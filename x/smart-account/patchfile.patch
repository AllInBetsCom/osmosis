diff --git a/proto/osmosis/smartaccount/v1beta1/tx.proto b/proto/osmosis/smartaccount/v1beta1/tx.proto
index 15380c360..1b0cc3c77 100644
--- a/proto/osmosis/smartaccount/v1beta1/tx.proto
+++ b/proto/osmosis/smartaccount/v1beta1/tx.proto
@@ -19,9 +19,9 @@ service Msg {
 
 // MsgAddAuthenticatorRequest defines the Msg/AddAuthenticator request type.
 message MsgAddAuthenticator {
-  option (amino.name) = "osmosis/smart-account/add-authenticator";
+  option (amino.name) = "osmosis/smartaccount/add-authenticator";
   string sender = 1;
-  string type = 2;
+  string authenticator_type = 2;
   bytes data = 3;
 }
 
@@ -31,7 +31,7 @@ message MsgAddAuthenticatorResponse { bool success = 1; }
 // MsgRemoveAuthenticatorRequest defines the Msg/RemoveAuthenticator request
 // type.
 message MsgRemoveAuthenticator {
-  option (amino.name) = "osmosis/smart-account/remove-authenticator";
+  option (amino.name) = "osmosis/smartaccount/remove-authenticator";
   string sender = 1;
   uint64 id = 2;
 }
diff --git a/x/smart-account/client/cli/tx.go b/x/smart-account/client/cli/tx.go
index ac4383329..8f757e4d8 100644
--- a/x/smart-account/client/cli/tx.go
+++ b/x/smart-account/client/cli/tx.go
@@ -61,8 +61,8 @@ func BuildAddAuthenticatorMsg(
 	}
 
 	return &types.MsgAddAuthenticator{
-		Type:   authenticatorType,
-		Data:   pubKeyBytes,
-		Sender: clientCtx.GetFromAddress().String(),
+		AuthenticatorType: authenticatorType,
+		Data:              pubKeyBytes,
+		Sender:            clientCtx.GetFromAddress().String(),
 	}, nil
 }
diff --git a/x/smart-account/keeper/msg_server.go b/x/smart-account/keeper/msg_server.go
index 81a8246b0..1b68769b8 100644
--- a/x/smart-account/keeper/msg_server.go
+++ b/x/smart-account/keeper/msg_server.go
@@ -43,7 +43,7 @@ func (m msgServer) AddAuthenticator(
 	}
 
 	// Finally, add the authenticator to the store.
-	id, err := m.Keeper.AddAuthenticator(ctx, sender, msg.Type, msg.Data)
+	id, err := m.Keeper.AddAuthenticator(ctx, sender, msg.AuthenticatorType, msg.Data)
 	if err != nil {
 		return nil, err
 	}
@@ -53,7 +53,7 @@ func (m msgServer) AddAuthenticator(
 			sdk.EventTypeMessage,
 			sdk.NewAttribute(sdk.AttributeKeyModule, types.AttributeValueCategory),
 			sdk.NewAttribute(sdk.AttributeKeySender, msg.Sender),
-			sdk.NewAttribute(types.AttributeKeyAuthenticatorType, msg.Type),
+			sdk.NewAttribute(types.AttributeKeyAuthenticatorType, msg.AuthenticatorType),
 			sdk.NewAttribute(types.AttributeKeyAuthenticatorId, strconv.FormatUint(id, 10)),
 		),
 	})
diff --git a/x/smart-account/keeper/msg_server_test.go b/x/smart-account/keeper/msg_server_test.go
index 90561127f..e22d41d51 100644
--- a/x/smart-account/keeper/msg_server_test.go
+++ b/x/smart-account/keeper/msg_server_test.go
@@ -26,9 +26,9 @@ func (s *KeeperTestSuite) TestMsgServer_AddAuthenticator() {
 
 	// Create a test message
 	msg := &types.MsgAddAuthenticator{
-		Sender: accAddress.String(),
-		Type:   authenticator.SignatureVerification{}.Type(),
-		Data:   priv.PubKey().Bytes(),
+		Sender:            accAddress.String(),
+		AuthenticatorType: authenticator.SignatureVerification{}.Type(),
+		Data:              priv.PubKey().Bytes(),
 	}
 
 	resp, err := msgServer.AddAuthenticator(sdk.WrapSDKContext(ctx), msg)
@@ -41,7 +41,7 @@ func (s *KeeperTestSuite) TestMsgServer_AddAuthenticator() {
 			sdk.EventTypeMessage,
 			sdk.NewAttribute(sdk.AttributeKeyModule, types.AttributeValueCategory),
 			sdk.NewAttribute(sdk.AttributeKeySender, msg.Sender),
-			sdk.NewAttribute(types.AttributeKeyAuthenticatorType, msg.Type),
+			sdk.NewAttribute(types.AttributeKeyAuthenticatorType, msg.AuthenticatorType),
 			sdk.NewAttribute(types.AttributeKeyAuthenticatorId, "1"),
 		),
 	})
@@ -62,12 +62,12 @@ func (s *KeeperTestSuite) TestMsgServer_AddAuthenticatorFail() {
 
 	// Create a test message
 	msg := &types.MsgAddAuthenticator{
-		Sender: accAddress.String(),
-		Type:   authenticator.SignatureVerification{}.Type(),
-		Data:   priv.PubKey().Bytes(),
+		Sender:            accAddress.String(),
+		AuthenticatorType: authenticator.SignatureVerification{}.Type(),
+		Data:              priv.PubKey().Bytes(),
 	}
 
-	msg.Type = "PassKeyAuthenticator"
+	msg.AuthenticatorType = "PassKeyAuthenticator"
 	_, err := msgServer.AddAuthenticator(sdk.WrapSDKContext(ctx), msg)
 	s.Require().Error(err)
 }
@@ -84,9 +84,9 @@ func (s *KeeperTestSuite) TestMsgServer_RemoveAuthenticator() {
 
 	// Create a test message
 	addMsg := &types.MsgAddAuthenticator{
-		Sender: accAddress.String(),
-		Type:   authenticator.SignatureVerification{}.Type(),
-		Data:   priv.PubKey().Bytes(),
+		Sender:            accAddress.String(),
+		AuthenticatorType: authenticator.SignatureVerification{}.Type(),
+		Data:              priv.PubKey().Bytes(),
 	}
 	_, err := msgServer.AddAuthenticator(sdk.WrapSDKContext(ctx), addMsg)
 	s.Require().NoError(err)
@@ -192,9 +192,9 @@ func (s *KeeperTestSuite) TestMsgServer_SmartAccountsNotActive() {
 
 	// Create a test message
 	msg := &types.MsgAddAuthenticator{
-		Sender: "",
-		Type:   authenticator.SignatureVerification{}.Type(),
-		Data:   []byte(""),
+		Sender:            "",
+		AuthenticatorType: authenticator.SignatureVerification{}.Type(),
+		Data:              []byte(""),
 	}
 
 	_, err := msgServer.AddAuthenticator(sdk.WrapSDKContext(ctx), msg)
diff --git a/x/smart-account/types/msgs.go b/x/smart-account/types/msgs.go
index 6ed74edc2..f081244e2 100644
--- a/x/smart-account/types/msgs.go
+++ b/x/smart-account/types/msgs.go
@@ -6,6 +6,11 @@ import (
 	sdk "github.com/cosmos/cosmos-sdk/types"
 )
 
+const (
+	TypeMsgAddAuthenticator    = "add_authenticator"
+	TypeMsgRemoveAuthenticator = "remove_authenticator"
+)
+
 // Helper functions
 func validateSender(sender string) error {
 	_, err := sdk.AccAddressFromBech32(sender)
@@ -34,10 +39,15 @@ func (msg *MsgAddAuthenticator) GetSigners() []sdk.AccAddress {
 	return getSender(msg.Sender)
 }
 
+func (msg MsgAddAuthenticator) GetSignBytes() []byte {
+	return sdk.MustSortJSON(ModuleCdc.MustMarshalJSON(&msg))
+}
+func (msg MsgAddAuthenticator) Route() string { return RouterKey }
+func (msg MsgAddAuthenticator) Type() string  { return TypeMsgAddAuthenticator }
+
 var _ sdk.Msg = &MsgRemoveAuthenticator{}
 
 func (msg *MsgRemoveAuthenticator) ValidateBasic() error {
-	// TODO: call validate here
 	return validateSender(msg.Sender)
 }
 
@@ -54,3 +64,9 @@ func (msg *MsgSetActiveState) ValidateBasic() error {
 func (msg *MsgSetActiveState) GetSigners() []sdk.AccAddress {
 	return getSender(msg.Sender)
 }
+
+func (msg MsgRemoveAuthenticator) GetSignBytes() []byte {
+	return sdk.MustSortJSON(ModuleCdc.MustMarshalJSON(&msg))
+}
+func (msg MsgRemoveAuthenticator) Route() string { return RouterKey }
+func (msg MsgRemoveAuthenticator) Type() string  { return TypeMsgRemoveAuthenticator }
diff --git a/x/smart-account/types/tx.pb.go b/x/smart-account/types/tx.pb.go
index 4670b20a8..e70fd3fd9 100644
--- a/x/smart-account/types/tx.pb.go
+++ b/x/smart-account/types/tx.pb.go
@@ -30,9 +30,9 @@ const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package
 
 // MsgAddAuthenticatorRequest defines the Msg/AddAuthenticator request type.
 type MsgAddAuthenticator struct {
-	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
-	Type   string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
-	Data   []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
+	Sender            string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
+	AuthenticatorType string `protobuf:"bytes,2,opt,name=authenticator_type,json=authenticatorType,proto3" json:"authenticator_type,omitempty"`
+	Data              []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
 }
 
 func (m *MsgAddAuthenticator) Reset()         { *m = MsgAddAuthenticator{} }
@@ -75,9 +75,9 @@ func (m *MsgAddAuthenticator) GetSender() string {
 	return ""
 }
 
-func (m *MsgAddAuthenticator) GetType() string {
+func (m *MsgAddAuthenticator) GetAuthenticatorType() string {
 	if m != nil {
-		return m.Type
+		return m.AuthenticatorType
 	}
 	return ""
 }
@@ -385,37 +385,37 @@ func init() {
 }
 
 var fileDescriptor_e696d15b139ba7e5 = []byte{
-	// 466 bytes of a gzipped FileDescriptorProto
-	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0x31, 0x6f, 0xd3, 0x50,
-	0x10, 0xc7, 0xe3, 0x24, 0x0a, 0xe5, 0x40, 0x15, 0x75, 0xa5, 0x10, 0x52, 0x64, 0x55, 0x96, 0x10,
-	0x51, 0x45, 0xfc, 0x94, 0x02, 0x8a, 0x1a, 0xb1, 0x04, 0x04, 0x5b, 0x16, 0x87, 0x89, 0x05, 0xbd,
-	0xf8, 0x9d, 0x5c, 0x4b, 0xb5, 0x5f, 0xf0, 0x5d, 0xa2, 0xc0, 0x84, 0xc4, 0x04, 0x53, 0x3f, 0x0a,
-	0x1f, 0x83, 0xb1, 0x23, 0x23, 0x4a, 0x06, 0xbe, 0x06, 0xca, 0xc3, 0xae, 0x9a, 0xd4, 0xd0, 0xa6,
-	0x4b, 0xf4, 0xee, 0xe5, 0xfe, 0xff, 0xfb, 0x9d, 0xef, 0x6c, 0x78, 0xa4, 0x29, 0xd6, 0x14, 0x91,
-	0xa0, 0x58, 0xa6, 0x2c, 0x83, 0x40, 0x4f, 0x12, 0x16, 0xd3, 0xce, 0x08, 0x59, 0x76, 0x04, 0xcf,
-	0xbc, 0x71, 0xaa, 0x59, 0xdb, 0x0f, 0xb3, 0x34, 0xef, 0x62, 0x9a, 0x97, 0xa5, 0x35, 0x77, 0x64,
-	0x1c, 0x25, 0x5a, 0x98, 0xdf, 0xbf, 0x02, 0xf7, 0x8b, 0x05, 0xbb, 0x03, 0x0a, 0xfb, 0x4a, 0xf5,
-	0x27, 0x7c, 0x8c, 0x09, 0x47, 0x81, 0x64, 0x9d, 0xda, 0x75, 0xa8, 0x11, 0x26, 0x0a, 0xd3, 0x86,
-	0xb5, 0x6f, 0xb5, 0x6e, 0xfb, 0x59, 0x64, 0xdb, 0x50, 0xe5, 0x8f, 0x63, 0x6c, 0x94, 0xcd, 0xad,
-	0x39, 0x2f, 0xef, 0x94, 0x64, 0xd9, 0xa8, 0xec, 0x5b, 0xad, 0xbb, 0xbe, 0x39, 0xf7, 0x9e, 0x7c,
-	0xfb, 0xfd, 0xfd, 0xe0, 0xf1, 0x0a, 0x74, 0x3b, 0xa7, 0x96, 0x4a, 0xb5, 0xe5, 0xc5, 0x6a, 0x6e,
-	0x17, 0xf6, 0x0a, 0x20, 0x7c, 0xa4, 0xb1, 0x4e, 0x08, 0xed, 0x06, 0xdc, 0xa2, 0x49, 0x10, 0x20,
-	0x91, 0xa1, 0xd9, 0xf2, 0xf3, 0xd0, 0xfd, 0x00, 0xf5, 0x01, 0x85, 0x3e, 0xc6, 0x7a, 0x8a, 0xd7,
-	0x6b, 0x60, 0x1b, 0xca, 0x91, 0x32, 0xf8, 0x55, 0xbf, 0x1c, 0xa9, 0x9e, 0x58, 0x82, 0x1e, 0x14,
-	0x83, 0xa6, 0xc6, 0x77, 0x8d, 0xb5, 0x07, 0x4e, 0x71, 0xc9, 0x6b, 0xe0, 0xbe, 0x82, 0x9d, 0x01,
-	0x85, 0x43, 0xe4, 0x7e, 0xc0, 0xd1, 0x14, 0x87, 0x2c, 0x19, 0xff, 0x49, 0x5a, 0x87, 0x9a, 0x34,
-	0x69, 0x86, 0x76, 0xcb, 0xcf, 0x22, 0x77, 0x0f, 0x1e, 0x5c, 0x32, 0xc9, 0x6b, 0xbb, 0x6f, 0xe0,
-	0xce, 0xdb, 0xd9, 0xeb, 0x19, 0x63, 0x42, 0x91, 0x4e, 0xec, 0x2e, 0xdc, 0x27, 0x3c, 0xc1, 0x80,
-	0x51, 0xbd, 0x5f, 0x69, 0x63, 0x89, 0x56, 0x69, 0x55, 0xfd, 0x7a, 0xfe, 0xf7, 0x4a, 0x2b, 0x74,
-	0x78, 0x5a, 0x81, 0xca, 0x80, 0x42, 0xfb, 0xb3, 0x05, 0xf7, 0x2e, 0x2d, 0x47, 0xc7, 0xfb, 0xdf,
-	0x9a, 0x79, 0x05, 0xa3, 0x6c, 0x1e, 0x6d, 0x2c, 0x39, 0x7f, 0x9c, 0x5f, 0x2d, 0xd8, 0x2d, 0x9a,
-	0xf0, 0xb3, 0x2b, 0x2d, 0x0b, 0x54, 0xcd, 0x17, 0x37, 0x51, 0x9d, 0xb3, 0x7c, 0x82, 0xed, 0xb5,
-	0xe9, 0x89, 0x2b, 0xfd, 0x56, 0x05, 0xcd, 0xee, 0x86, 0x82, 0xbc, 0xf6, 0xcb, 0xe1, 0x8f, 0xb9,
-	0x63, 0x9d, 0xcd, 0x1d, 0xeb, 0xd7, 0xdc, 0xb1, 0x4e, 0x17, 0x4e, 0xe9, 0x6c, 0xe1, 0x94, 0x7e,
-	0x2e, 0x9c, 0xd2, 0xbb, 0xa3, 0x30, 0xe2, 0xe3, 0xc9, 0xc8, 0x0b, 0x74, 0x2c, 0x32, 0xf3, 0xf6,
-	0x89, 0x1c, 0x51, 0x1e, 0x88, 0xe9, 0xe1, 0x73, 0x31, 0x5b, 0x5b, 0xee, 0xe5, 0xab, 0x4b, 0xa3,
-	0x9a, 0xf9, 0x0c, 0x3c, 0xfd, 0x13, 0x00, 0x00, 0xff, 0xff, 0x0a, 0x46, 0x23, 0x8b, 0x60, 0x04,
-	0x00, 0x00,
+	// 475 bytes of a gzipped FileDescriptorProto
+	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xc1, 0x6e, 0xd3, 0x40,
+	0x10, 0xcd, 0x26, 0x51, 0x28, 0x03, 0xaa, 0xc8, 0x56, 0x0a, 0x21, 0x45, 0x56, 0x65, 0x09, 0x14,
+	0x40, 0xb1, 0x95, 0x02, 0x8a, 0x1a, 0x71, 0x09, 0x08, 0x6e, 0xb9, 0x38, 0x3d, 0x71, 0xa9, 0x36,
+	0xde, 0x91, 0x6b, 0xa9, 0xf6, 0x5a, 0x9e, 0x4d, 0x94, 0x72, 0xe2, 0x0a, 0xa7, 0xfe, 0x00, 0xff,
+	0xc0, 0x67, 0x70, 0xec, 0x91, 0x23, 0x4a, 0x0e, 0xfc, 0x06, 0xca, 0xd6, 0xae, 0xea, 0xd6, 0xd0,
+	0x96, 0x8b, 0xe5, 0xd1, 0xbe, 0xf7, 0xe6, 0x3d, 0xcf, 0x78, 0xe1, 0x89, 0xa2, 0x48, 0x51, 0x48,
+	0x2e, 0x45, 0x22, 0xd5, 0xc2, 0xf7, 0xd5, 0x2c, 0xd6, 0xee, 0xbc, 0x3f, 0x45, 0x2d, 0xfa, 0xae,
+	0x5e, 0x38, 0x49, 0xaa, 0xb4, 0xe2, 0x8f, 0x33, 0x98, 0x73, 0x11, 0xe6, 0x64, 0xb0, 0x4e, 0x53,
+	0x44, 0x61, 0xac, 0x5c, 0xf3, 0x3c, 0x23, 0xd8, 0xdf, 0x18, 0x6c, 0x8d, 0x29, 0x18, 0x49, 0x39,
+	0x9a, 0xe9, 0x43, 0x8c, 0x75, 0xe8, 0x0b, 0xad, 0x52, 0xde, 0x82, 0x06, 0x61, 0x2c, 0x31, 0x6d,
+	0xb3, 0x1d, 0xd6, 0xbd, 0xeb, 0x65, 0x15, 0xef, 0x01, 0x17, 0x17, 0x81, 0x07, 0xfa, 0x38, 0xc1,
+	0x76, 0xd5, 0x60, 0x9a, 0x85, 0x93, 0xfd, 0xe3, 0x04, 0x39, 0x87, 0xba, 0x14, 0x5a, 0xb4, 0x6b,
+	0x3b, 0xac, 0x7b, 0xdf, 0x33, 0xef, 0xc3, 0x17, 0x5f, 0x7f, 0x7f, 0x7f, 0xfe, 0xb4, 0x34, 0x8f,
+	0x90, 0xb2, 0x57, 0x10, 0xb1, 0x07, 0xb0, 0x5d, 0x62, 0xcf, 0x43, 0x4a, 0x54, 0x4c, 0xc8, 0xdb,
+	0x70, 0x87, 0x66, 0xbe, 0x8f, 0x44, 0xc6, 0xe7, 0x86, 0x97, 0x97, 0x76, 0x02, 0xad, 0x31, 0x05,
+	0x1e, 0x46, 0x6a, 0x8e, 0x37, 0x8b, 0xb6, 0x09, 0xd5, 0x50, 0x9a, 0x28, 0x75, 0xaf, 0x1a, 0xca,
+	0xa1, 0xb3, 0xf6, 0xf9, 0xac, 0xd4, 0x67, 0x6a, 0x64, 0x2f, 0x59, 0x1d, 0x82, 0x55, 0xde, 0xf1,
+	0x06, 0x6e, 0xdf, 0x41, 0x73, 0x4c, 0xc1, 0x04, 0xf5, 0xc8, 0xd7, 0xe1, 0x1c, 0x27, 0x5a, 0x68,
+	0xfc, 0xab, 0xd1, 0x16, 0x34, 0x84, 0x81, 0x19, 0xb3, 0x1b, 0x5e, 0x56, 0xd9, 0xdb, 0xf0, 0xe8,
+	0x8a, 0x48, 0xde, 0xdb, 0xfe, 0x00, 0xf7, 0xf6, 0x17, 0xef, 0x17, 0x1a, 0x63, 0x0a, 0x55, 0xcc,
+	0x07, 0xf0, 0x90, 0xf0, 0x08, 0x7d, 0x8d, 0xf2, 0xa0, 0x10, 0x63, 0x6d, 0xad, 0xd6, 0xad, 0x7b,
+	0xad, 0xfc, 0xb8, 0x10, 0x85, 0x76, 0x4f, 0x6a, 0x50, 0x1b, 0x53, 0xc0, 0x3f, 0x33, 0x78, 0x70,
+	0x65, 0x6b, 0xfa, 0xce, 0xbf, 0xf6, 0xcf, 0x29, 0x99, 0x64, 0x67, 0xef, 0xd6, 0x94, 0xf3, 0xcf,
+	0xf9, 0x85, 0xc1, 0x56, 0xd9, 0x80, 0x5f, 0x5d, 0x2b, 0x59, 0xc2, 0xea, 0xbc, 0xf9, 0x1f, 0xd6,
+	0xb9, 0x97, 0x4f, 0xb0, 0x79, 0x69, 0x7a, 0xee, 0xb5, 0x7a, 0x45, 0x42, 0x67, 0x70, 0x4b, 0x42,
+	0xde, 0xfb, 0xed, 0xe4, 0xc7, 0xd2, 0x62, 0xa7, 0x4b, 0x8b, 0xfd, 0x5a, 0x5a, 0xec, 0x64, 0x65,
+	0x55, 0x4e, 0x57, 0x56, 0xe5, 0xe7, 0xca, 0xaa, 0x7c, 0xdc, 0x0b, 0x42, 0x7d, 0x38, 0x9b, 0x3a,
+	0xbe, 0x8a, 0xdc, 0x4c, 0xbc, 0x77, 0x24, 0xa6, 0x94, 0x17, 0xee, 0x7c, 0xf7, 0xb5, 0xbb, 0x38,
+	0xdb, 0xed, 0x5e, 0xbe, 0xdc, 0xeb, 0x3f, 0x9a, 0xa6, 0x0d, 0x73, 0x3f, 0xbc, 0xfc, 0x13, 0x00,
+	0x00, 0xff, 0xff, 0x14, 0x6a, 0x28, 0x70, 0x79, 0x04, 0x00, 0x00,
 }
 
 // Reference imports to suppress errors if they are not otherwise used.
@@ -601,10 +601,10 @@ func (m *MsgAddAuthenticator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
 		i--
 		dAtA[i] = 0x1a
 	}
-	if len(m.Type) > 0 {
-		i -= len(m.Type)
-		copy(dAtA[i:], m.Type)
-		i = encodeVarintTx(dAtA, i, uint64(len(m.Type)))
+	if len(m.AuthenticatorType) > 0 {
+		i -= len(m.AuthenticatorType)
+		copy(dAtA[i:], m.AuthenticatorType)
+		i = encodeVarintTx(dAtA, i, uint64(len(m.AuthenticatorType)))
 		i--
 		dAtA[i] = 0x12
 	}
@@ -844,7 +844,7 @@ func (m *MsgAddAuthenticator) Size() (n int) {
 	if l > 0 {
 		n += 1 + l + sovTx(uint64(l))
 	}
-	l = len(m.Type)
+	l = len(m.AuthenticatorType)
 	if l > 0 {
 		n += 1 + l + sovTx(uint64(l))
 	}
@@ -1005,7 +1005,7 @@ func (m *MsgAddAuthenticator) Unmarshal(dAtA []byte) error {
 			iNdEx = postIndex
 		case 2:
 			if wireType != 2 {
-				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
+				return fmt.Errorf("proto: wrong wireType = %d for field AuthenticatorType", wireType)
 			}
 			var stringLen uint64
 			for shift := uint(0); ; shift += 7 {
@@ -1033,7 +1033,7 @@ func (m *MsgAddAuthenticator) Unmarshal(dAtA []byte) error {
 			if postIndex > l {
 				return io.ErrUnexpectedEOF
 			}
-			m.Type = string(dAtA[iNdEx:postIndex])
+			m.AuthenticatorType = string(dAtA[iNdEx:postIndex])
 			iNdEx = postIndex
 		case 3:
 			if wireType != 2 {
