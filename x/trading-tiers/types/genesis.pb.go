// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: osmosis/tradingtiers/v1beta1/genesis.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "github.com/osmosis-labs/osmosis/v25/x/poolmanager/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Params struct {
	OptInFee                             types.Coin            `protobuf:"bytes,1,opt,name=opt_in_fee,json=optInFee,proto3" json:"opt_in_fee" yaml:"opt_in_fee"`
	StakeMinRequirement                  cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=stake_min_requirement,json=stakeMinRequirement,proto3,customtype=cosmossdk.io/math.Int" json:"stake_min_requirement" yaml:"stake_min_requirement"`
	RollingWindow                        uint64                `protobuf:"varint,4,opt,name=rolling_window,json=rollingWindow,proto3" json:"rolling_window,omitempty" yaml:"rolling_window"`
	MinTradeValueToInitializeDayTracking cosmossdk_io_math.Int `protobuf:"bytes,5,opt,name=min_trade_value_to_initialize_day_tracking,json=minTradeValueToInitializeDayTracking,proto3,customtype=cosmossdk.io/math.Int" json:"min_trade_value_to_initialize_day_tracking" yaml:"min_trade_value_to_initialize_day_tracking"`
	FeeTiers                             FeeTiers              `protobuf:"bytes,6,opt,name=fee_tiers,json=feeTiers,proto3" json:"fee_tiers"`
	OsmoUsdPoolId                        uint64                `protobuf:"varint,7,opt,name=osmo_usd_pool_id,json=osmoUsdPoolId,proto3" json:"osmo_usd_pool_id,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_0900b183414f4706, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetOptInFee() types.Coin {
	if m != nil {
		return m.OptInFee
	}
	return types.Coin{}
}

func (m *Params) GetRollingWindow() uint64 {
	if m != nil {
		return m.RollingWindow
	}
	return 0
}

func (m *Params) GetFeeTiers() FeeTiers {
	if m != nil {
		return m.FeeTiers
	}
	return FeeTiers{}
}

func (m *Params) GetOsmoUsdPoolId() uint64 {
	if m != nil {
		return m.OsmoUsdPoolId
	}
	return 0
}

type GenesisState struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_0900b183414f4706, []int{1}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type FeeTiers struct {
	FeeTiers []FeeTier `protobuf:"bytes,1,rep,name=fee_tiers,json=feeTiers,proto3" json:"fee_tiers"`
}

func (m *FeeTiers) Reset()         { *m = FeeTiers{} }
func (m *FeeTiers) String() string { return proto.CompactTextString(m) }
func (*FeeTiers) ProtoMessage()    {}
func (*FeeTiers) Descriptor() ([]byte, []int) {
	return fileDescriptor_0900b183414f4706, []int{2}
}
func (m *FeeTiers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeeTiers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeeTiers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeeTiers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeeTiers.Merge(m, src)
}
func (m *FeeTiers) XXX_Size() int {
	return m.Size()
}
func (m *FeeTiers) XXX_DiscardUnknown() {
	xxx_messageInfo_FeeTiers.DiscardUnknown(m)
}

var xxx_messageInfo_FeeTiers proto.InternalMessageInfo

func (m *FeeTiers) GetFeeTiers() []FeeTier {
	if m != nil {
		return m.FeeTiers
	}
	return nil
}

type FeeTier struct {
	TierId uint64 `protobuf:"varint,1,opt,name=tier_id,json=tierId,proto3" json:"tier_id,omitempty"`
	// tier_min_stake_requirement is the minimum amount of stake required to be in
	// this tier
	TierMinStakeRequirement cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=tier_min_stake_requirement,json=tierMinStakeRequirement,proto3,customtype=cosmossdk.io/math.Int" json:"tier_min_stake_requirement" yaml:"tier_min_stake_requirement"`
	// tier_min_rolling_window_volume is the minimum amount of volume required to
	// be in this tier
	TierMinRollingWindowVolume cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=tier_min_rolling_window_volume,json=tierMinRollingWindowVolume,proto3,customtype=cosmossdk.io/math.Int" json:"tier_min_rolling_window_volume" yaml:"tier_min_rolling_window_volume"`
}

func (m *FeeTier) Reset()         { *m = FeeTier{} }
func (m *FeeTier) String() string { return proto.CompactTextString(m) }
func (*FeeTier) ProtoMessage()    {}
func (*FeeTier) Descriptor() ([]byte, []int) {
	return fileDescriptor_0900b183414f4706, []int{3}
}
func (m *FeeTier) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeeTier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeeTier.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeeTier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeeTier.Merge(m, src)
}
func (m *FeeTier) XXX_Size() int {
	return m.Size()
}
func (m *FeeTier) XXX_DiscardUnknown() {
	xxx_messageInfo_FeeTier.DiscardUnknown(m)
}

var xxx_messageInfo_FeeTier proto.InternalMessageInfo

func (m *FeeTier) GetTierId() uint64 {
	if m != nil {
		return m.TierId
	}
	return 0
}

func init() {
	proto.RegisterType((*Params)(nil), "osmosis.tradingtiers.v1beta1.Params")
	proto.RegisterType((*GenesisState)(nil), "osmosis.tradingtiers.v1beta1.GenesisState")
	proto.RegisterType((*FeeTiers)(nil), "osmosis.tradingtiers.v1beta1.FeeTiers")
	proto.RegisterType((*FeeTier)(nil), "osmosis.tradingtiers.v1beta1.FeeTier")
}

func init() {
	proto.RegisterFile("osmosis/tradingtiers/v1beta1/genesis.proto", fileDescriptor_0900b183414f4706)
}

var fileDescriptor_0900b183414f4706 = []byte{
	// 696 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0x4f, 0x4f, 0x13, 0x41,
	0x1c, 0xed, 0x42, 0x2d, 0x30, 0x88, 0xd1, 0x55, 0x42, 0xdb, 0x90, 0x6d, 0xdd, 0x80, 0x36, 0x24,
	0xec, 0x06, 0x8c, 0x07, 0x4d, 0x4c, 0xcc, 0x6a, 0xd0, 0x1e, 0x48, 0xc8, 0x52, 0x31, 0xf1, 0x32,
	0x99, 0x76, 0xa7, 0xcb, 0x84, 0xdd, 0x99, 0xb2, 0x3b, 0x5b, 0xa8, 0x17, 0xef, 0x9e, 0xfc, 0x20,
	0x1e, 0x3c, 0xf8, 0x21, 0x38, 0x72, 0x34, 0x1e, 0x1a, 0x03, 0xdf, 0x80, 0x4f, 0x60, 0xe6, 0xcf,
	0x96, 0x82, 0x08, 0xdc, 0xfa, 0x9b, 0xf7, 0x7e, 0xbf, 0x79, 0x6f, 0x7f, 0xaf, 0x03, 0x56, 0x58,
	0x1a, 0xb3, 0x94, 0xa4, 0x2e, 0x4f, 0x50, 0x40, 0x68, 0xc8, 0x09, 0x4e, 0x52, 0xb7, 0xbf, 0xd6,
	0xc6, 0x1c, 0xad, 0xb9, 0x21, 0xa6, 0x38, 0x25, 0xa9, 0xd3, 0x4b, 0x18, 0x67, 0xe6, 0xa2, 0xe6,
	0x3a, 0xe3, 0x5c, 0x47, 0x73, 0xab, 0x8f, 0x42, 0x16, 0x32, 0x49, 0x74, 0xc5, 0x2f, 0xd5, 0x53,
	0xad, 0x84, 0x8c, 0x85, 0x11, 0x76, 0x65, 0xd5, 0xce, 0xba, 0x2e, 0xa2, 0x83, 0x1c, 0xea, 0xc8,
	0x79, 0x50, 0xf5, 0xa8, 0x42, 0x43, 0xd6, 0xe5, 0xae, 0x20, 0x4b, 0x10, 0x27, 0x8c, 0xe6, 0xb8,
	0x62, 0xbb, 0x6d, 0x94, 0xe2, 0x91, 0xd8, 0x0e, 0x23, 0x39, 0xee, 0xe4, 0xae, 0x7a, 0x8c, 0x45,
	0x31, 0xa2, 0x28, 0xc4, 0xc9, 0x88, 0x17, 0xb3, 0x20, 0x8b, 0x30, 0x4c, 0x58, 0xc6, 0xb1, 0xe6,
	0x2f, 0x5d, 0xc7, 0xe7, 0x87, 0x8a, 0x65, 0xff, 0x2c, 0x82, 0xd2, 0x16, 0x4a, 0x50, 0x9c, 0x9a,
	0x3e, 0x00, 0xac, 0xc7, 0x21, 0xa1, 0xb0, 0x8b, 0x71, 0xd9, 0xa8, 0x1b, 0x8d, 0xd9, 0xf5, 0x8a,
	0xa3, 0x3d, 0x08, 0x55, 0xf9, 0x67, 0x71, 0xde, 0x30, 0x42, 0xbd, 0xca, 0xd1, 0xb0, 0x56, 0x38,
	0x1b, 0xd6, 0x1e, 0x0c, 0x50, 0x1c, 0xbd, 0xb4, 0xcf, 0x5b, 0x6d, 0x7f, 0x9a, 0xf5, 0x78, 0x93,
	0x6e, 0x60, 0x6c, 0xee, 0x83, 0xf9, 0x94, 0xa3, 0x3d, 0x0c, 0x63, 0x42, 0x61, 0x82, 0xf7, 0x33,
	0x92, 0xe0, 0x18, 0x53, 0x5e, 0x9e, 0xa8, 0x1b, 0x8d, 0x19, 0xef, 0x95, 0x98, 0xf1, 0x7b, 0x58,
	0x9b, 0x57, 0xb7, 0xa4, 0xc1, 0x9e, 0x43, 0x98, 0x1b, 0x23, 0xbe, 0xeb, 0x34, 0x29, 0x3f, 0x1b,
	0xd6, 0x16, 0xd5, 0xf0, 0x2b, 0x67, 0xd8, 0xfe, 0x43, 0x79, 0xbe, 0x49, 0xa8, 0x7f, 0x7e, 0x6a,
	0xbe, 0x06, 0xf7, 0x12, 0x16, 0x45, 0x84, 0x86, 0xf0, 0x80, 0xd0, 0x80, 0x1d, 0x94, 0x8b, 0x75,
	0xa3, 0x51, 0xf4, 0x2a, 0x67, 0xc3, 0xda, 0xbc, 0x1a, 0x77, 0x11, 0xb7, 0xfd, 0x39, 0x7d, 0xf0,
	0x51, 0xd6, 0xe6, 0x77, 0x03, 0xac, 0x88, 0xbb, 0x44, 0x24, 0x30, 0xec, 0xa3, 0x28, 0xc3, 0x90,
	0x33, 0x48, 0x28, 0xe1, 0x04, 0x45, 0xe4, 0x33, 0x86, 0x01, 0x1a, 0x08, 0xb4, 0xb3, 0x47, 0x68,
	0x58, 0xbe, 0x23, 0xad, 0xf8, 0x37, 0x59, 0x59, 0x53, 0x77, 0xdf, 0x7e, 0xb0, 0xed, 0x2f, 0xc5,
	0x84, 0xb6, 0x04, 0x77, 0x47, 0x50, 0x5b, 0xac, 0x39, 0x22, 0xbe, 0x45, 0x83, 0x96, 0xa6, 0x99,
	0x4d, 0x30, 0xd3, 0xc5, 0x18, 0xca, 0xe4, 0x96, 0x4b, 0x72, 0x6d, 0x4f, 0x9c, 0xeb, 0x62, 0xed,
	0x6c, 0x60, 0xdc, 0x12, 0x07, 0x5e, 0x51, 0x88, 0xf6, 0xa7, 0xbb, 0xba, 0x36, 0x9f, 0x82, 0xfb,
	0xa2, 0x11, 0x66, 0x69, 0x00, 0x45, 0x6c, 0x20, 0x09, 0xca, 0x53, 0xe2, 0xeb, 0xf9, 0x73, 0xe2,
	0xfc, 0x43, 0x1a, 0x6c, 0x31, 0x16, 0x35, 0x03, 0xdb, 0x07, 0x77, 0xdf, 0xa9, 0xff, 0xd1, 0x36,
	0x47, 0x1c, 0x9b, 0x1e, 0x28, 0xf5, 0x64, 0x8a, 0x74, 0x6e, 0x96, 0xae, 0x17, 0xa0, 0x12, 0xa7,
	0xaf, 0xd7, 0x9d, 0x76, 0x0b, 0x4c, 0xe7, 0xc2, 0xcc, 0xf7, 0xe3, 0x9e, 0x8c, 0xfa, 0x64, 0x63,
	0x76, 0x7d, 0xf9, 0x56, 0x9e, 0x2e, 0x5b, 0xb2, 0x7f, 0x4c, 0x80, 0x29, 0x8d, 0x99, 0x0b, 0x60,
	0x4a, 0x34, 0x09, 0x57, 0x86, 0x74, 0x55, 0x12, 0x65, 0x33, 0x30, 0xbf, 0x80, 0xaa, 0x04, 0xc4,
	0x72, 0x54, 0xd6, 0xfe, 0xcd, 0xaa, 0x77, 0xd3, 0x82, 0x1f, 0xab, 0x05, 0xff, 0x7f, 0x90, 0xed,
	0x2f, 0x08, 0x70, 0x93, 0xd0, 0x6d, 0x01, 0x8d, 0x87, 0xf6, 0xab, 0x01, 0xac, 0x51, 0xe3, 0xc5,
	0x78, 0xc2, 0x3e, 0x8b, 0xb2, 0x18, 0x97, 0x27, 0xa5, 0x8a, 0x8d, 0x9b, 0x54, 0x2c, 0x5f, 0x52,
	0x71, 0xe5, 0x30, 0xdb, 0xaf, 0x6a, 0x25, 0xfe, 0x78, 0xf2, 0x77, 0x24, 0xe8, 0x6d, 0x1f, 0x9d,
	0x58, 0xc6, 0xf1, 0x89, 0x65, 0xfc, 0x39, 0xb1, 0x8c, 0x6f, 0xa7, 0x56, 0xe1, 0xf8, 0xd4, 0x2a,
	0xfc, 0x3a, 0xb5, 0x0a, 0x9f, 0x5e, 0x84, 0x84, 0xef, 0x66, 0x6d, 0xa7, 0xc3, 0x62, 0x57, 0x6f,
	0x63, 0x35, 0x42, 0xed, 0x34, 0x2f, 0xdc, 0xfe, 0xfa, 0x73, 0xf7, 0x30, 0x7f, 0x77, 0x57, 0xd5,
	0xc3, 0xcb, 0x07, 0x3d, 0x9c, 0xb6, 0x4b, 0xf2, 0xbd, 0x79, 0xf6, 0x37, 0x00, 0x00, 0xff, 0xff,
	0xb8, 0x98, 0xc7, 0x44, 0x9d, 0x05, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OsmoUsdPoolId != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.OsmoUsdPoolId))
		i--
		dAtA[i] = 0x38
	}
	{
		size, err := m.FeeTiers.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.MinTradeValueToInitializeDayTracking.Size()
		i -= size
		if _, err := m.MinTradeValueToInitializeDayTracking.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.RollingWindow != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.RollingWindow))
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.StakeMinRequirement.Size()
		i -= size
		if _, err := m.StakeMinRequirement.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.OptInFee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *FeeTiers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeeTiers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeeTiers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FeeTiers) > 0 {
		for iNdEx := len(m.FeeTiers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FeeTiers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *FeeTier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeeTier) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeeTier) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TierMinRollingWindowVolume.Size()
		i -= size
		if _, err := m.TierMinRollingWindowVolume.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.TierMinStakeRequirement.Size()
		i -= size
		if _, err := m.TierMinStakeRequirement.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.TierId != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.TierId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.OptInFee.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.StakeMinRequirement.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if m.RollingWindow != 0 {
		n += 1 + sovGenesis(uint64(m.RollingWindow))
	}
	l = m.MinTradeValueToInitializeDayTracking.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.FeeTiers.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if m.OsmoUsdPoolId != 0 {
		n += 1 + sovGenesis(uint64(m.OsmoUsdPoolId))
	}
	return n
}

func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *FeeTiers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FeeTiers) > 0 {
		for _, e := range m.FeeTiers {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *FeeTier) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TierId != 0 {
		n += 1 + sovGenesis(uint64(m.TierId))
	}
	l = m.TierMinStakeRequirement.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.TierMinRollingWindowVolume.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptInFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OptInFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeMinRequirement", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StakeMinRequirement.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollingWindow", wireType)
			}
			m.RollingWindow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RollingWindow |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinTradeValueToInitializeDayTracking", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinTradeValueToInitializeDayTracking.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeTiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeeTiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OsmoUsdPoolId", wireType)
			}
			m.OsmoUsdPoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OsmoUsdPoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeeTiers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeeTiers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeeTiers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeTiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeTiers = append(m.FeeTiers, FeeTier{})
			if err := m.FeeTiers[len(m.FeeTiers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeeTier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeeTier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeeTier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TierId", wireType)
			}
			m.TierId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TierId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TierMinStakeRequirement", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TierMinStakeRequirement.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TierMinRollingWindowVolume", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TierMinRollingWindowVolume.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
