package grpc 

// THIS FILE IS GENERATED CODE, DO NOT EDIT
// SOURCE AT `{{.ProtoPath}}`
{{ $version := .VersionSuffix }}

import (
	context "context"

	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"

	sdk "github.com/cosmos/cosmos-sdk/types"
	"{{.ClientPath}}"
	"{{.ClientPath}}/queryproto{{$version}}"
)

type Querier struct {
	Q client.Querier
}

var _ queryproto{{$version}}.QueryServer = Querier{}

{{range .Queries -}} 

func (q Querier) {{.QueryName}}(grpcCtx context.Context,
	req *queryproto{{$version}}.{{.QueryName}}Request,
) ({{ if .Response }}{{.Response}}{{else}}*queryproto{{$version}}.{{.QueryName}}Response{{end}}, error) {
	if req == nil {
		return nil, status.Error(codes.InvalidArgument, "empty request")
	}
	ctx := sdk.UnwrapSDKContext(grpcCtx)
	return q.Q.{{.QueryName}}(ctx, *req)
}

{{end -}} 
