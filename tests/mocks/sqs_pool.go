// Code generated by MockGen. DO NOT EDIT.
// Source: ingest/sqs/domain/pools.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	osmomath "github.com/osmosis-labs/osmosis/osmomath"
	domain "github.com/osmosis-labs/osmosis/v20/ingest/sqs/domain"
	types "github.com/osmosis-labs/osmosis/v20/x/poolmanager/types"
)

// MockSQSPoolI is a mock of PoolI interface.
type MockSQSPoolI struct {
	ctrl     *gomock.Controller
	recorder *MockSQSPoolIMockRecorder
}

// MockSQSPoolIMockRecorder is the mock recorder for MockSQSPoolI.
type MockSQSPoolIMockRecorder struct {
	mock *MockSQSPoolI
}

// NewMockSQSPoolI creates a new mock instance.
func NewMockSQSPoolI(ctrl *gomock.Controller) *MockSQSPoolI {
	mock := &MockSQSPoolI{ctrl: ctrl}
	mock.recorder = &MockSQSPoolIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSQSPoolI) EXPECT() *MockSQSPoolIMockRecorder {
	return m.recorder
}

// GetId mocks base method.
func (m *MockSQSPoolI) GetId() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetId")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetId indicates an expected call of GetId.
func (mr *MockSQSPoolIMockRecorder) GetId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetId", reflect.TypeOf((*MockSQSPoolI)(nil).GetId))
}

// GetPoolDenoms mocks base method.
func (m *MockSQSPoolI) GetPoolDenoms() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPoolDenoms")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetPoolDenoms indicates an expected call of GetPoolDenoms.
func (mr *MockSQSPoolIMockRecorder) GetPoolDenoms() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPoolDenoms", reflect.TypeOf((*MockSQSPoolI)(nil).GetPoolDenoms))
}

// GetSQSPoolModel mocks base method.
func (m *MockSQSPoolI) GetSQSPoolModel() domain.SQSPool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSQSPoolModel")
	ret0, _ := ret[0].(domain.SQSPool)
	return ret0
}

// GetSQSPoolModel indicates an expected call of GetSQSPoolModel.
func (mr *MockSQSPoolIMockRecorder) GetSQSPoolModel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSQSPoolModel", reflect.TypeOf((*MockSQSPoolI)(nil).GetSQSPoolModel))
}

// GetTickModel mocks base method.
func (m *MockSQSPoolI) GetTickModel() (*domain.TickModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTickModel")
	ret0, _ := ret[0].(*domain.TickModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTickModel indicates an expected call of GetTickModel.
func (mr *MockSQSPoolIMockRecorder) GetTickModel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTickModel", reflect.TypeOf((*MockSQSPoolI)(nil).GetTickModel))
}

// GetTotalValueLockedUOSMO mocks base method.
func (m *MockSQSPoolI) GetTotalValueLockedUOSMO() osmomath.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalValueLockedUOSMO")
	ret0, _ := ret[0].(osmomath.Int)
	return ret0
}

// GetTotalValueLockedUOSMO indicates an expected call of GetTotalValueLockedUOSMO.
func (mr *MockSQSPoolIMockRecorder) GetTotalValueLockedUOSMO() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalValueLockedUOSMO", reflect.TypeOf((*MockSQSPoolI)(nil).GetTotalValueLockedUOSMO))
}

// GetType mocks base method.
func (m *MockSQSPoolI) GetType() types.PoolType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetType")
	ret0, _ := ret[0].(types.PoolType)
	return ret0
}

// GetType indicates an expected call of GetType.
func (mr *MockSQSPoolIMockRecorder) GetType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetType", reflect.TypeOf((*MockSQSPoolI)(nil).GetType))
}

// GetUnderlyingPool mocks base method.
func (m *MockSQSPoolI) GetUnderlyingPool() types.PoolI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnderlyingPool")
	ret0, _ := ret[0].(types.PoolI)
	return ret0
}

// GetUnderlyingPool indicates an expected call of GetUnderlyingPool.
func (mr *MockSQSPoolIMockRecorder) GetUnderlyingPool() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnderlyingPool", reflect.TypeOf((*MockSQSPoolI)(nil).GetUnderlyingPool))
}

// Validate mocks base method.
func (m *MockSQSPoolI) Validate(minUOSMOTVL osmomath.Int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", minUOSMOTVL)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockSQSPoolIMockRecorder) Validate(minUOSMOTVL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockSQSPoolI)(nil).Validate), minUOSMOTVL)
}

// MockPoolsRepository is a mock of PoolsRepository interface.
type MockPoolsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPoolsRepositoryMockRecorder
}

// MockPoolsRepositoryMockRecorder is the mock recorder for MockPoolsRepository.
type MockPoolsRepositoryMockRecorder struct {
	mock *MockPoolsRepository
}

// NewMockPoolsRepository creates a new mock instance.
func NewMockPoolsRepository(ctrl *gomock.Controller) *MockPoolsRepository {
	mock := &MockPoolsRepository{ctrl: ctrl}
	mock.recorder = &MockPoolsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPoolsRepository) EXPECT() *MockPoolsRepositoryMockRecorder {
	return m.recorder
}

// GetAllCFMM mocks base method.
func (m *MockPoolsRepository) GetAllCFMM(arg0 context.Context) ([]domain.PoolI, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCFMM", arg0)
	ret0, _ := ret[0].([]domain.PoolI)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCFMM indicates an expected call of GetAllCFMM.
func (mr *MockPoolsRepositoryMockRecorder) GetAllCFMM(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCFMM", reflect.TypeOf((*MockPoolsRepository)(nil).GetAllCFMM), arg0)
}

// GetAllConcentrated mocks base method.
func (m *MockPoolsRepository) GetAllConcentrated(arg0 context.Context) ([]domain.PoolI, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllConcentrated", arg0)
	ret0, _ := ret[0].([]domain.PoolI)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllConcentrated indicates an expected call of GetAllConcentrated.
func (mr *MockPoolsRepositoryMockRecorder) GetAllConcentrated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllConcentrated", reflect.TypeOf((*MockPoolsRepository)(nil).GetAllConcentrated), arg0)
}

// GetAllCosmWasm mocks base method.
func (m *MockPoolsRepository) GetAllCosmWasm(arg0 context.Context) ([]domain.PoolI, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCosmWasm", arg0)
	ret0, _ := ret[0].([]domain.PoolI)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCosmWasm indicates an expected call of GetAllCosmWasm.
func (mr *MockPoolsRepositoryMockRecorder) GetAllCosmWasm(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCosmWasm", reflect.TypeOf((*MockPoolsRepository)(nil).GetAllCosmWasm), arg0)
}

// GetAllPools mocks base method.
func (m *MockPoolsRepository) GetAllPools(arg0 context.Context) ([]domain.PoolI, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPools", arg0)
	ret0, _ := ret[0].([]domain.PoolI)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPools indicates an expected call of GetAllPools.
func (mr *MockPoolsRepositoryMockRecorder) GetAllPools(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPools", reflect.TypeOf((*MockPoolsRepository)(nil).GetAllPools), arg0)
}

// StorePools mocks base method.
func (m *MockPoolsRepository) StorePools(ctx context.Context, tx domain.Tx, cfmmPools, concentratedPools, cosmwasmPools []domain.PoolI) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorePools", ctx, tx, cfmmPools, concentratedPools, cosmwasmPools)
	ret0, _ := ret[0].(error)
	return ret0
}

// StorePools indicates an expected call of StorePools.
func (mr *MockPoolsRepositoryMockRecorder) StorePools(ctx, tx, cfmmPools, concentratedPools, cosmwasmPools interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorePools", reflect.TypeOf((*MockPoolsRepository)(nil).StorePools), ctx, tx, cfmmPools, concentratedPools, cosmwasmPools)
}

// MockPoolsUsecase is a mock of PoolsUsecase interface.
type MockPoolsUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockPoolsUsecaseMockRecorder
}

// MockPoolsUsecaseMockRecorder is the mock recorder for MockPoolsUsecase.
type MockPoolsUsecaseMockRecorder struct {
	mock *MockPoolsUsecase
}

// NewMockPoolsUsecase creates a new mock instance.
func NewMockPoolsUsecase(ctrl *gomock.Controller) *MockPoolsUsecase {
	mock := &MockPoolsUsecase{ctrl: ctrl}
	mock.recorder = &MockPoolsUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPoolsUsecase) EXPECT() *MockPoolsUsecaseMockRecorder {
	return m.recorder
}

// GetAllPools mocks base method.
func (m *MockPoolsUsecase) GetAllPools(ctx context.Context) ([]domain.PoolI, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPools", ctx)
	ret0, _ := ret[0].([]domain.PoolI)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPools indicates an expected call of GetAllPools.
func (mr *MockPoolsUsecaseMockRecorder) GetAllPools(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPools", reflect.TypeOf((*MockPoolsUsecase)(nil).GetAllPools), ctx)
}
