// Code generated by MockGen. DO NOT EDIT.
// Source: ingest/sqs/domain/pools.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/osmosis-labs/osmosis/v20/ingest/sqs/domain"
	types "github.com/osmosis-labs/osmosis/v20/x/poolmanager/types"
)

// MockSQSPoolI is a mock of PoolI interface.
type MockSQSPoolI struct {
	ctrl     *gomock.Controller
	recorder *MockSQSPoolIMockRecorder
}

// MockSQSPoolIMockRecorder is the mock recorder for MockSQSPoolI.
type MockSQSPoolIMockRecorder struct {
	mock *MockSQSPoolI
}

// NewMockSQSPoolI creates a new mock instance.
func NewMockSQSPoolI(ctrl *gomock.Controller) *MockSQSPoolI {
	mock := &MockSQSPoolI{ctrl: ctrl}
	mock.recorder = &MockSQSPoolIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSQSPoolI) EXPECT() *MockSQSPoolIMockRecorder {
	return m.recorder
}

// GetDenoms mocks base method.
func (m *MockSQSPoolI) GetDenoms() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDenoms")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetDenoms indicates an expected call of GetDenoms.
func (mr *MockSQSPoolIMockRecorder) GetDenoms() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDenoms", reflect.TypeOf((*MockSQSPoolI)(nil).GetDenoms))
}

// GetId mocks base method.
func (m *MockSQSPoolI) GetId() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetId")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetId indicates an expected call of GetId.
func (mr *MockSQSPoolIMockRecorder) GetId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetId", reflect.TypeOf((*MockSQSPoolI)(nil).GetId))
}

// GetLiquidity mocks base method.
func (m *MockSQSPoolI) GetLiquidity() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLiquidity")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetLiquidity indicates an expected call of GetLiquidity.
func (mr *MockSQSPoolIMockRecorder) GetLiquidity() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLiquidity", reflect.TypeOf((*MockSQSPoolI)(nil).GetLiquidity))
}

// GetSpreadFactor mocks base method.
func (m *MockSQSPoolI) GetSpreadFactor() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpreadFactor")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSpreadFactor indicates an expected call of GetSpreadFactor.
func (mr *MockSQSPoolIMockRecorder) GetSpreadFactor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpreadFactor", reflect.TypeOf((*MockSQSPoolI)(nil).GetSpreadFactor))
}

// GetType mocks base method.
func (m *MockSQSPoolI) GetType() types.PoolType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetType")
	ret0, _ := ret[0].(types.PoolType)
	return ret0
}

// GetType indicates an expected call of GetType.
func (mr *MockSQSPoolIMockRecorder) GetType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetType", reflect.TypeOf((*MockSQSPoolI)(nil).GetType))
}

// GetWeights mocks base method.
func (m *MockSQSPoolI) GetWeights() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWeights")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetWeights indicates an expected call of GetWeights.
func (mr *MockSQSPoolIMockRecorder) GetWeights() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWeights", reflect.TypeOf((*MockSQSPoolI)(nil).GetWeights))
}

// MockPoolsRepository is a mock of PoolsRepository interface.
type MockPoolsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPoolsRepositoryMockRecorder
}

// MockPoolsRepositoryMockRecorder is the mock recorder for MockPoolsRepository.
type MockPoolsRepositoryMockRecorder struct {
	mock *MockPoolsRepository
}

// NewMockPoolsRepository creates a new mock instance.
func NewMockPoolsRepository(ctrl *gomock.Controller) *MockPoolsRepository {
	mock := &MockPoolsRepository{ctrl: ctrl}
	mock.recorder = &MockPoolsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPoolsRepository) EXPECT() *MockPoolsRepositoryMockRecorder {
	return m.recorder
}

// GetAllCFMM mocks base method.
func (m *MockPoolsRepository) GetAllCFMM(arg0 context.Context) ([]domain.PoolI, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCFMM", arg0)
	ret0, _ := ret[0].([]domain.PoolI)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCFMM indicates an expected call of GetAllCFMM.
func (mr *MockPoolsRepositoryMockRecorder) GetAllCFMM(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCFMM", reflect.TypeOf((*MockPoolsRepository)(nil).GetAllCFMM), arg0)
}

// GetAllConcentrated mocks base method.
func (m *MockPoolsRepository) GetAllConcentrated(arg0 context.Context) ([]domain.PoolI, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllConcentrated", arg0)
	ret0, _ := ret[0].([]domain.PoolI)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllConcentrated indicates an expected call of GetAllConcentrated.
func (mr *MockPoolsRepositoryMockRecorder) GetAllConcentrated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllConcentrated", reflect.TypeOf((*MockPoolsRepository)(nil).GetAllConcentrated), arg0)
}

// GetAllCosmWasm mocks base method.
func (m *MockPoolsRepository) GetAllCosmWasm(arg0 context.Context) ([]domain.PoolI, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCosmWasm", arg0)
	ret0, _ := ret[0].([]domain.PoolI)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCosmWasm indicates an expected call of GetAllCosmWasm.
func (mr *MockPoolsRepositoryMockRecorder) GetAllCosmWasm(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCosmWasm", reflect.TypeOf((*MockPoolsRepository)(nil).GetAllCosmWasm), arg0)
}

// StoreCFMM mocks base method.
func (m *MockPoolsRepository) StoreCFMM(arg0 context.Context, arg1 []domain.PoolI) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreCFMM", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreCFMM indicates an expected call of StoreCFMM.
func (mr *MockPoolsRepositoryMockRecorder) StoreCFMM(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreCFMM", reflect.TypeOf((*MockPoolsRepository)(nil).StoreCFMM), arg0, arg1)
}

// StoreConcentrated mocks base method.
func (m *MockPoolsRepository) StoreConcentrated(arg0 context.Context, arg1 []domain.PoolI) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreConcentrated", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreConcentrated indicates an expected call of StoreConcentrated.
func (mr *MockPoolsRepositoryMockRecorder) StoreConcentrated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreConcentrated", reflect.TypeOf((*MockPoolsRepository)(nil).StoreConcentrated), arg0, arg1)
}

// StoreCosmWasm mocks base method.
func (m *MockPoolsRepository) StoreCosmWasm(arg0 context.Context, arg1 []domain.PoolI) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreCosmWasm", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreCosmWasm indicates an expected call of StoreCosmWasm.
func (mr *MockPoolsRepositoryMockRecorder) StoreCosmWasm(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreCosmWasm", reflect.TypeOf((*MockPoolsRepository)(nil).StoreCosmWasm), arg0, arg1)
}

// MockPoolsUsecase is a mock of PoolsUsecase interface.
type MockPoolsUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockPoolsUsecaseMockRecorder
}

// MockPoolsUsecaseMockRecorder is the mock recorder for MockPoolsUsecase.
type MockPoolsUsecaseMockRecorder struct {
	mock *MockPoolsUsecase
}

// NewMockPoolsUsecase creates a new mock instance.
func NewMockPoolsUsecase(ctrl *gomock.Controller) *MockPoolsUsecase {
	mock := &MockPoolsUsecase{ctrl: ctrl}
	mock.recorder = &MockPoolsUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPoolsUsecase) EXPECT() *MockPoolsUsecaseMockRecorder {
	return m.recorder
}

// GetAllPools mocks base method.
func (m *MockPoolsUsecase) GetAllPools(ctx context.Context) ([]domain.PoolI, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPools", ctx)
	ret0, _ := ret[0].([]domain.PoolI)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPools indicates an expected call of GetAllPools.
func (mr *MockPoolsUsecaseMockRecorder) GetAllPools(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPools", reflect.TypeOf((*MockPoolsUsecase)(nil).GetAllPools), ctx)
}
