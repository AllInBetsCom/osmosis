swagger: '2.0'
info:
  title: Osmosis - gRPC Gateway docs
  description: A REST interface for state queries, legacy transactions
  version: 1.0.0
paths:
  /osmosis/epochs/v1beta1/current_epoch:
    get:
      summary: CurrentEpoch provide current epoch of specified identifier
      operationId: CurrentEpoch
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              current_epoch:
                type: string
                format: int64
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: identifier
          in: query
          required: false
          type: string
      tags:
        - Query
  /osmosis/epochs/v1beta1/epochs:
    get:
      summary: EpochInfos provide running epochInfos
      operationId: EpochInfos
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              epochs:
                type: array
                items:
                  type: object
                  properties:
                    identifier:
                      type: string
                      description: >-
                        identifier is a unique reference to this particular
                        timer.
                    start_time:
                      type: string
                      format: date-time
                      description: >-
                        start_time is the time at which the timer first ever
                        ticks.

                        If start_time is in the future, the epoch will not begin
                        until the start

                        time.
                    duration:
                      type: string
                      description: >-
                        duration is the time in between epoch ticks.

                        In order for intended behavior to be met, duration
                        should

                        be greater than the chains expected block time.

                        Duration must be non-zero.
                    current_epoch:
                      type: string
                      format: int64
                      description: >-
                        current_epoch is the current epoch number, or in other
                        words,

                        how many times has the timer 'ticked'.

                        The first tick (current_epoch=1) is defined as

                        the first block whose blocktime is greater than the
                        EpochInfo start_time.
                    current_epoch_start_time:
                      type: string
                      format: date-time
                      description: >-
                        current_epoch_start_time describes the start time of the
                        current timer

                        interval. The interval is (current_epoch_start_time,

                        current_epoch_start_time + duration] When the timer
                        ticks, this is set to

                        current_epoch_start_time = last_epoch_start_time +
                        duration only one timer

                        tick for a given identifier can occur per block.


                        NOTE! The current_epoch_start_time may diverge
                        significantly from the

                        wall-clock time the epoch began at. Wall-clock time of
                        epoch start may be

                        >> current_epoch_start_time. Suppose
                        current_epoch_start_time = 10,

                        duration = 5. Suppose the chain goes offline at t=14,
                        and comes back online

                        at t=30, and produces blocks at every successive time.
                        (t=31, 32, etc.)

                        * The t=30 block will start the epoch for (10, 15]

                        * The t=31 block will start the epoch for (15, 20]

                        * The t=32 block will start the epoch for (20, 25]

                        * The t=33 block will start the epoch for (25, 30]

                        * The t=34 block will start the epoch for (30, 35]

                        * The **t=36** block will start the epoch for (35, 40]
                    epoch_counting_started:
                      type: boolean
                      description: >-
                        epoch_counting_started is a boolean, that indicates
                        whether this

                        epoch timer has began yet.
                    current_epoch_start_height:
                      type: string
                      format: int64
                      title: >-
                        current_epoch_start_height is the block height at which
                        the current epoch

                        started. (The block height at which the timer last
                        ticked)
                  description: |-
                    EpochInfo is a struct that describes the data going into
                    a timer defined by the x/epochs module.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      tags:
        - Query
  /osmosis/gamm/v1beta1/cfmm_concentrated_pool_links:
    get:
      summary: |-
        CFMMConcentratedPoolLinks returns migration links between CFMM and
        Concentrated pools.
      operationId: CFMMConcentratedPoolLinks
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              migration_records:
                type: object
                properties:
                  balancer_to_concentrated_pool_links:
                    type: array
                    items:
                      type: object
                      properties:
                        balancer_pool_id:
                          type: string
                          format: uint64
                        cl_pool_id:
                          type: string
                          format: uint64
                      description: >-
                        BalancerToConcentratedPoolLink defines a single link
                        between a single

                        balancer pool and a single concentrated liquidity pool.
                        This link is used to

                        allow a balancer pool to migrate to a single canonical
                        full range

                        concentrated liquidity pool position

                        A balancer pool can be linked to a maximum of one cl
                        pool, and a cl pool can

                        be linked to a maximum of one balancer pool.
                title: >-
                  MigrationRecords contains all the links between balancer and
                  concentrated

                  pools
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      tags:
        - Query
  /osmosis/gamm/v1beta1/concentrated_pool_id_link_from_cfmm/{cfmm_pool_id}:
    get:
      summary: >-
        ConcentratedPoolIdLinkFromBalancer returns the pool id of the
        concentrated

        pool that is linked with the given CFMM pool.
      operationId: ConcentratedPoolIdLinkFromCFMM
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              concentrated_pool_id:
                type: string
                format: uint64
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: cfmm_pool_id
          in: path
          required: true
          type: string
          format: uint64
      tags:
        - Query
  /osmosis/gamm/v1beta1/filtered_pools:
    get:
      summary: |-
        PoolsWithFilter allows you to query specific pools with requested
        parameters
      operationId: PoolsWithFilter
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              pools:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: min_liquidity
          description: |-
            String of the coins in single string separated by comma. Ex)
            10uatom,100uosmo.
          in: query
          required: false
          type: string
        - name: pool_type
          in: query
          required: false
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /osmosis/gamm/v1beta1/num_pools:
    get:
      summary: 'Deprecated: please use the alternative in x/poolmanager'
      operationId: NumPools
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              num_pools:
                type: string
                format: uint64
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      tags:
        - Query
  /osmosis/gamm/v1beta1/pool_type/{pool_id}:
    get:
      summary: |-
        PoolType returns the type of the pool.
        Returns "Balancer" as a string literal when the pool is a balancer pool.
        Errors if the pool is failed to be type caseted.
      operationId: PoolType
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              pool_type:
                type: string
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: pool_id
          in: path
          required: true
          type: string
          format: uint64
      tags:
        - Query
  /osmosis/gamm/v1beta1/pools:
    get:
      operationId: Pools
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              pools:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /osmosis/gamm/v1beta1/pools/{pool_id}:
    get:
      summary: 'Deprecated: please use the alternative in x/poolmanager'
      operationId: Pool
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              pool:
                type: object
                properties:
                  type_url:
                    type: string
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                  value:
                    type: string
                    format: byte
                    description: >-
                      Must be a valid serialized protocol buffer of the above
                      specified type.
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }
                      // or ...
                      if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                        foo = any.unpack(Foo.getDefaultInstance());
                      }

                  Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                  Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := anypb.New(foo)
                       if err != nil {
                         ...
                       }
                       ...
                       foo := &pb.Foo{}
                       if err := any.UnmarshalTo(foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".


                  JSON


                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
            title: 'Deprecated: please use the alternative in x/poolmanager'
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: pool_id
          in: path
          required: true
          type: string
          format: uint64
      tags:
        - Query
  /osmosis/gamm/v1beta1/pools/{pool_id}/exit_swap_share_amount_in:
    get:
      operationId: CalcExitPoolCoinsFromShares
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              tokens_out:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom
                    method

                    signatures required by gogoproto.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: pool_id
          in: path
          required: true
          type: string
          format: uint64
        - name: share_in_amount
          in: query
          required: false
          type: string
      tags:
        - Query
  /osmosis/gamm/v1beta1/pools/{pool_id}/join_swap_exact_in:
    get:
      operationId: CalcJoinPoolShares
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              share_out_amount:
                type: string
              tokens_out:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom
                    method

                    signatures required by gogoproto.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: pool_id
          in: path
          required: true
          type: string
          format: uint64
      tags:
        - Query
  /osmosis/gamm/v1beta1/pools/{pool_id}/params:
    get:
      operationId: PoolParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              params:
                type: object
                properties:
                  type_url:
                    type: string
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                  value:
                    type: string
                    format: byte
                    description: >-
                      Must be a valid serialized protocol buffer of the above
                      specified type.
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }
                      // or ...
                      if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                        foo = any.unpack(Foo.getDefaultInstance());
                      }

                  Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                  Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := anypb.New(foo)
                       if err != nil {
                         ...
                       }
                       ...
                       foo := &pb.Foo{}
                       if err := any.UnmarshalTo(foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".


                  JSON


                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: pool_id
          in: path
          required: true
          type: string
          format: uint64
      tags:
        - Query
  /osmosis/gamm/v1beta1/pools/{pool_id}/prices:
    get:
      summary: |-
        SpotPrice defines a gRPC query handler that returns the spot price given
        a base denomination and a quote denomination.
      operationId: SpotPrice
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              spot_price:
                type: string
                title: String of the Dec. Ex) 10.203uatom
            description: >-
              QuerySpotPriceResponse defines the gRPC response structure for a
              SpotPrice

              query.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: pool_id
          in: path
          required: true
          type: string
          format: uint64
        - name: base_asset_denom
          in: query
          required: false
          type: string
        - name: quote_asset_denom
          in: query
          required: false
          type: string
      tags:
        - Query
  /osmosis/gamm/v1beta1/pools/{pool_id}/total_pool_liquidity:
    get:
      summary: 'Deprecated: please use the alternative in x/poolmanager'
      operationId: TotalPoolLiquidity
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              liquidity:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom
                    method

                    signatures required by gogoproto.
            title: 'Deprecated: please use the alternative in x/poolmanager'
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: pool_id
          in: path
          required: true
          type: string
          format: uint64
      tags:
        - Query
  /osmosis/gamm/v1beta1/pools/{pool_id}/total_shares:
    get:
      operationId: TotalShares
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              total_shares:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: pool_id
          in: path
          required: true
          type: string
          format: uint64
      tags:
        - Query
  /osmosis/gamm/v1beta1/total_liquidity:
    get:
      operationId: TotalLiquidity
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              liquidity:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom
                    method

                    signatures required by gogoproto.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      tags:
        - Query
  /osmosis/gamm/v1beta1/{pool_id}/estimate/swap_exact_amount_in:
    get:
      summary: 'Deprecated: please use the alternative in x/poolmanager'
      operationId: EstimateSwapExactAmountIn
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              token_out_amount:
                type: string
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: pool_id
          in: path
          required: true
          type: string
          format: uint64
        - name: sender
          in: query
          required: false
          type: string
        - name: token_in
          in: query
          required: false
          type: string
      tags:
        - Query
  /osmosis/gamm/v1beta1/{pool_id}/estimate/swap_exact_amount_out:
    get:
      summary: 'Deprecated: please use the alternative in x/poolmanager'
      operationId: EstimateSwapExactAmountOut
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              token_in_amount:
                type: string
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: pool_id
          in: path
          required: true
          type: string
          format: uint64
        - name: sender
          in: query
          required: false
          type: string
        - name: token_out
          in: query
          required: false
          type: string
      tags:
        - Query
  /osmosis/incentives/v1beta1/active_gauges:
    get:
      summary: ActiveGauges returns active gauges
      operationId: ActiveGauges
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uint64
                      title: id is the unique ID of a Gauge
                    is_perpetual:
                      type: boolean
                      description: >-
                        is_perpetual is a flag to show if it's a perpetual or
                        non-perpetual gauge

                        Non-perpetual gauges distribute their tokens equally per
                        epoch while the

                        gauge is in the active period. Perpetual gauges
                        distribute all their tokens

                        at a single time and only distribute their tokens again
                        once the gauge is

                        refilled, Intended for use with incentives that get
                        refilled daily.
                    distribute_to:
                      title: >-
                        distribute_to is where the gauge rewards are distributed
                        to.

                        This is queried via lock duration or by timestamp
                      type: object
                      properties:
                        lock_query_type:
                          title: >-
                            LockQueryType is a type of lock query,
                            ByLockDuration | ByLockTime
                          type: string
                          enum:
                            - ByDuration
                            - ByTime
                            - NoLock
                            - ByGroup
                          default: ByDuration
                          description: >-
                            LockQueryType defines the type of the lock query
                            that can

                            either be by duration or start time of the lock.
                        denom:
                          type: string
                          title: >-
                            Denom represents the token denomination we are
                            looking to lock up
                        duration:
                          type: string
                          description: >-
                            Duration is used to query locks with longer duration
                            than the specified

                            duration. Duration field must not be nil when the
                            lock query type is

                            `ByLockDuration`.
                        timestamp:
                          type: string
                          format: date-time
                          description: >-
                            Timestamp is used by locks started before the
                            specified duration.

                            Timestamp field must not be nil when the lock query
                            type is `ByLockTime`.

                            Querying locks with timestamp is currently not
                            implemented.
                      description: >-
                        QueryCondition is a struct used for querying locks upon
                        different conditions.

                        Duration field and timestamp fields could be optional,
                        depending on the

                        LockQueryType.
                    coins:
                      type: array
                      items:
                        type: object
                        properties:
                          denom:
                            type: string
                          amount:
                            type: string
                        description: >-
                          Coin defines a token with a denomination and an
                          amount.


                          NOTE: The amount field is an Int which implements the
                          custom method

                          signatures required by gogoproto.
                      title: >-
                        coins is the total amount of coins that have been in the
                        gauge

                        Can distribute multiple coin denoms
                    start_time:
                      type: string
                      format: date-time
                      title: start_time is the distribution start time
                    num_epochs_paid_over:
                      type: string
                      format: uint64
                      title: >-
                        num_epochs_paid_over is the number of total epochs
                        distribution will be

                        completed over
                    filled_epochs:
                      type: string
                      format: uint64
                      title: >-
                        filled_epochs is the number of epochs distribution has
                        been completed on

                        already
                    distributed_coins:
                      type: array
                      items:
                        type: object
                        properties:
                          denom:
                            type: string
                          amount:
                            type: string
                        description: >-
                          Coin defines a token with a denomination and an
                          amount.


                          NOTE: The amount field is an Int which implements the
                          custom method

                          signatures required by gogoproto.
                      title: >-
                        distributed_coins are coins that have been distributed
                        already
                  description: >-
                    Gauge is an object that stores and distributes yields to
                    recipients who

                    satisfy certain conditions. Currently gauges support
                    conditions around the

                    duration for which a given denom is locked.
                title: Active gagues only
              pagination:
                title: Pagination defines pagination for the response
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /osmosis/incentives/v1beta1/active_gauges_per_denom:
    get:
      summary: ActiveGaugesPerDenom returns active gauges by denom
      operationId: ActiveGaugesPerDenom
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uint64
                      title: id is the unique ID of a Gauge
                    is_perpetual:
                      type: boolean
                      description: >-
                        is_perpetual is a flag to show if it's a perpetual or
                        non-perpetual gauge

                        Non-perpetual gauges distribute their tokens equally per
                        epoch while the

                        gauge is in the active period. Perpetual gauges
                        distribute all their tokens

                        at a single time and only distribute their tokens again
                        once the gauge is

                        refilled, Intended for use with incentives that get
                        refilled daily.
                    distribute_to:
                      title: >-
                        distribute_to is where the gauge rewards are distributed
                        to.

                        This is queried via lock duration or by timestamp
                      type: object
                      properties:
                        lock_query_type:
                          title: >-
                            LockQueryType is a type of lock query,
                            ByLockDuration | ByLockTime
                          type: string
                          enum:
                            - ByDuration
                            - ByTime
                            - NoLock
                            - ByGroup
                          default: ByDuration
                          description: >-
                            LockQueryType defines the type of the lock query
                            that can

                            either be by duration or start time of the lock.
                        denom:
                          type: string
                          title: >-
                            Denom represents the token denomination we are
                            looking to lock up
                        duration:
                          type: string
                          description: >-
                            Duration is used to query locks with longer duration
                            than the specified

                            duration. Duration field must not be nil when the
                            lock query type is

                            `ByLockDuration`.
                        timestamp:
                          type: string
                          format: date-time
                          description: >-
                            Timestamp is used by locks started before the
                            specified duration.

                            Timestamp field must not be nil when the lock query
                            type is `ByLockTime`.

                            Querying locks with timestamp is currently not
                            implemented.
                      description: >-
                        QueryCondition is a struct used for querying locks upon
                        different conditions.

                        Duration field and timestamp fields could be optional,
                        depending on the

                        LockQueryType.
                    coins:
                      type: array
                      items:
                        type: object
                        properties:
                          denom:
                            type: string
                          amount:
                            type: string
                        description: >-
                          Coin defines a token with a denomination and an
                          amount.


                          NOTE: The amount field is an Int which implements the
                          custom method

                          signatures required by gogoproto.
                      title: >-
                        coins is the total amount of coins that have been in the
                        gauge

                        Can distribute multiple coin denoms
                    start_time:
                      type: string
                      format: date-time
                      title: start_time is the distribution start time
                    num_epochs_paid_over:
                      type: string
                      format: uint64
                      title: >-
                        num_epochs_paid_over is the number of total epochs
                        distribution will be

                        completed over
                    filled_epochs:
                      type: string
                      format: uint64
                      title: >-
                        filled_epochs is the number of epochs distribution has
                        been completed on

                        already
                    distributed_coins:
                      type: array
                      items:
                        type: object
                        properties:
                          denom:
                            type: string
                          amount:
                            type: string
                        description: >-
                          Coin defines a token with a denomination and an
                          amount.


                          NOTE: The amount field is an Int which implements the
                          custom method

                          signatures required by gogoproto.
                      title: >-
                        distributed_coins are coins that have been distributed
                        already
                  description: >-
                    Gauge is an object that stores and distributes yields to
                    recipients who

                    satisfy certain conditions. Currently gauges support
                    conditions around the

                    duration for which a given denom is locked.
                title: Active gagues that match denom in query
              pagination:
                title: Pagination defines pagination for the response
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: denom
          description: Desired denom when querying active gagues.
          in: query
          required: false
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /osmosis/incentives/v1beta1/all_groups:
    get:
      summary: AllGroups returns all groups
      operationId: AllGroups
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              groups:
                type: array
                items:
                  type: object
                  properties:
                    group_gauge_id:
                      type: string
                      format: uint64
                    internal_gauge_info:
                      type: object
                      properties:
                        total_weight:
                          type: string
                        gauge_records:
                          type: array
                          items:
                            type: object
                            properties:
                              gauge_id:
                                type: string
                                format: uint64
                              current_weight:
                                type: string
                                description: >-
                                  CurrentWeight is the current weight of this
                                  gauge being distributed to for

                                  this epoch. For instance, for volume splitting
                                  policy, this stores the

                                  volume generated in the last epoch of the
                                  linked pool.
                              cumulative_weight:
                                type: string
                                description: >-
                                  CumulativeWeight serves as a snapshot of the
                                  accumulator being tracked

                                  based on splitting policy. For instance, for
                                  volume splitting policy, this

                                  stores the cumulative volume for the linked
                                  pool at time of last update.
                      description: >-
                        Note that while both InternalGaugeInfo and
                        InternalGaugeRecord could

                        technically be replaced by DistrInfo and DistrRecord
                        from the pool-incentives

                        module, we create separate types here to keep our
                        abstractions clean and

                        readable (pool-incentives distribution abstractions are
                        used in a very

                        specific way that does not directly relate to gauge
                        logic). This also helps

                        us sidestep a refactor to avoid an import cycle.
                    splitting_policy:
                      type: string
                      enum:
                        - ByVolume
                      default: ByVolume
                      title: >-
                        SplittingPolicy determines the way we want to split
                        incentives in groupGauges
                  description: >-
                    Group is an object that stores a 1:1 mapped gauge ID, a list
                    of pool gauge

                    info, and a splitting policy. These are grouped into a
                    single abstraction to

                    allow for distribution of group incentives to internal
                    gauges according to

                    the specified splitting policy.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      tags:
        - Query
  /osmosis/incentives/v1beta1/all_groups_gauges:
    get:
      summary: AllGroupsGauges returns all group gauges
      operationId: AllGroupsGauges
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              gauges:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uint64
                      title: id is the unique ID of a Gauge
                    is_perpetual:
                      type: boolean
                      description: >-
                        is_perpetual is a flag to show if it's a perpetual or
                        non-perpetual gauge

                        Non-perpetual gauges distribute their tokens equally per
                        epoch while the

                        gauge is in the active period. Perpetual gauges
                        distribute all their tokens

                        at a single time and only distribute their tokens again
                        once the gauge is

                        refilled, Intended for use with incentives that get
                        refilled daily.
                    distribute_to:
                      title: >-
                        distribute_to is where the gauge rewards are distributed
                        to.

                        This is queried via lock duration or by timestamp
                      type: object
                      properties:
                        lock_query_type:
                          title: >-
                            LockQueryType is a type of lock query,
                            ByLockDuration | ByLockTime
                          type: string
                          enum:
                            - ByDuration
                            - ByTime
                            - NoLock
                            - ByGroup
                          default: ByDuration
                          description: >-
                            LockQueryType defines the type of the lock query
                            that can

                            either be by duration or start time of the lock.
                        denom:
                          type: string
                          title: >-
                            Denom represents the token denomination we are
                            looking to lock up
                        duration:
                          type: string
                          description: >-
                            Duration is used to query locks with longer duration
                            than the specified

                            duration. Duration field must not be nil when the
                            lock query type is

                            `ByLockDuration`.
                        timestamp:
                          type: string
                          format: date-time
                          description: >-
                            Timestamp is used by locks started before the
                            specified duration.

                            Timestamp field must not be nil when the lock query
                            type is `ByLockTime`.

                            Querying locks with timestamp is currently not
                            implemented.
                      description: >-
                        QueryCondition is a struct used for querying locks upon
                        different conditions.

                        Duration field and timestamp fields could be optional,
                        depending on the

                        LockQueryType.
                    coins:
                      type: array
                      items:
                        type: object
                        properties:
                          denom:
                            type: string
                          amount:
                            type: string
                        description: >-
                          Coin defines a token with a denomination and an
                          amount.


                          NOTE: The amount field is an Int which implements the
                          custom method

                          signatures required by gogoproto.
                      title: >-
                        coins is the total amount of coins that have been in the
                        gauge

                        Can distribute multiple coin denoms
                    start_time:
                      type: string
                      format: date-time
                      title: start_time is the distribution start time
                    num_epochs_paid_over:
                      type: string
                      format: uint64
                      title: >-
                        num_epochs_paid_over is the number of total epochs
                        distribution will be

                        completed over
                    filled_epochs:
                      type: string
                      format: uint64
                      title: >-
                        filled_epochs is the number of epochs distribution has
                        been completed on

                        already
                    distributed_coins:
                      type: array
                      items:
                        type: object
                        properties:
                          denom:
                            type: string
                          amount:
                            type: string
                        description: >-
                          Coin defines a token with a denomination and an
                          amount.


                          NOTE: The amount field is an Int which implements the
                          custom method

                          signatures required by gogoproto.
                      title: >-
                        distributed_coins are coins that have been distributed
                        already
                  description: >-
                    Gauge is an object that stores and distributes yields to
                    recipients who

                    satisfy certain conditions. Currently gauges support
                    conditions around the

                    duration for which a given denom is locked.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      tags:
        - Query
  /osmosis/incentives/v1beta1/all_groups_with_gauge:
    get:
      summary: AllGroupsWithGauge returns all groups with their group gauge
      operationId: AllGroupsWithGauge
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              groups_with_gauge:
                type: array
                items:
                  type: object
                  properties:
                    group:
                      type: object
                      properties:
                        group_gauge_id:
                          type: string
                          format: uint64
                        internal_gauge_info:
                          type: object
                          properties:
                            total_weight:
                              type: string
                            gauge_records:
                              type: array
                              items:
                                type: object
                                properties:
                                  gauge_id:
                                    type: string
                                    format: uint64
                                  current_weight:
                                    type: string
                                    description: >-
                                      CurrentWeight is the current weight of
                                      this gauge being distributed to for

                                      this epoch. For instance, for volume
                                      splitting policy, this stores the

                                      volume generated in the last epoch of the
                                      linked pool.
                                  cumulative_weight:
                                    type: string
                                    description: >-
                                      CumulativeWeight serves as a snapshot of
                                      the accumulator being tracked

                                      based on splitting policy. For instance,
                                      for volume splitting policy, this

                                      stores the cumulative volume for the
                                      linked pool at time of last update.
                          description: >-
                            Note that while both InternalGaugeInfo and
                            InternalGaugeRecord could

                            technically be replaced by DistrInfo and DistrRecord
                            from the pool-incentives

                            module, we create separate types here to keep our
                            abstractions clean and

                            readable (pool-incentives distribution abstractions
                            are used in a very

                            specific way that does not directly relate to gauge
                            logic). This also helps

                            us sidestep a refactor to avoid an import cycle.
                        splitting_policy:
                          type: string
                          enum:
                            - ByVolume
                          default: ByVolume
                          title: >-
                            SplittingPolicy determines the way we want to split
                            incentives in groupGauges
                      description: >-
                        Group is an object that stores a 1:1 mapped gauge ID, a
                        list of pool gauge

                        info, and a splitting policy. These are grouped into a
                        single abstraction to

                        allow for distribution of group incentives to internal
                        gauges according to

                        the specified splitting policy.
                    gauge:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uint64
                          title: id is the unique ID of a Gauge
                        is_perpetual:
                          type: boolean
                          description: >-
                            is_perpetual is a flag to show if it's a perpetual
                            or non-perpetual gauge

                            Non-perpetual gauges distribute their tokens equally
                            per epoch while the

                            gauge is in the active period. Perpetual gauges
                            distribute all their tokens

                            at a single time and only distribute their tokens
                            again once the gauge is

                            refilled, Intended for use with incentives that get
                            refilled daily.
                        distribute_to:
                          title: >-
                            distribute_to is where the gauge rewards are
                            distributed to.

                            This is queried via lock duration or by timestamp
                          type: object
                          properties:
                            lock_query_type:
                              title: >-
                                LockQueryType is a type of lock query,
                                ByLockDuration | ByLockTime
                              type: string
                              enum:
                                - ByDuration
                                - ByTime
                                - NoLock
                                - ByGroup
                              default: ByDuration
                              description: >-
                                LockQueryType defines the type of the lock query
                                that can

                                either be by duration or start time of the lock.
                            denom:
                              type: string
                              title: >-
                                Denom represents the token denomination we are
                                looking to lock up
                            duration:
                              type: string
                              description: >-
                                Duration is used to query locks with longer
                                duration than the specified

                                duration. Duration field must not be nil when
                                the lock query type is

                                `ByLockDuration`.
                            timestamp:
                              type: string
                              format: date-time
                              description: >-
                                Timestamp is used by locks started before the
                                specified duration.

                                Timestamp field must not be nil when the lock
                                query type is `ByLockTime`.

                                Querying locks with timestamp is currently not
                                implemented.
                          description: >-
                            QueryCondition is a struct used for querying locks
                            upon different conditions.

                            Duration field and timestamp fields could be
                            optional, depending on the

                            LockQueryType.
                        coins:
                          type: array
                          items:
                            type: object
                            properties:
                              denom:
                                type: string
                              amount:
                                type: string
                            description: >-
                              Coin defines a token with a denomination and an
                              amount.


                              NOTE: The amount field is an Int which implements
                              the custom method

                              signatures required by gogoproto.
                          title: >-
                            coins is the total amount of coins that have been in
                            the gauge

                            Can distribute multiple coin denoms
                        start_time:
                          type: string
                          format: date-time
                          title: start_time is the distribution start time
                        num_epochs_paid_over:
                          type: string
                          format: uint64
                          title: >-
                            num_epochs_paid_over is the number of total epochs
                            distribution will be

                            completed over
                        filled_epochs:
                          type: string
                          format: uint64
                          title: >-
                            filled_epochs is the number of epochs distribution
                            has been completed on

                            already
                        distributed_coins:
                          type: array
                          items:
                            type: object
                            properties:
                              denom:
                                type: string
                              amount:
                                type: string
                            description: >-
                              Coin defines a token with a denomination and an
                              amount.


                              NOTE: The amount field is an Int which implements
                              the custom method

                              signatures required by gogoproto.
                          title: >-
                            distributed_coins are coins that have been
                            distributed already
                      description: >-
                        Gauge is an object that stores and distributes yields to
                        recipients who

                        satisfy certain conditions. Currently gauges support
                        conditions around the

                        duration for which a given denom is locked.
                  description: >-
                    GroupsWithGauge is a helper struct that stores a group and
                    its

                    associated gauge.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      tags:
        - Query
  /osmosis/incentives/v1beta1/current_weight_by_group_gauge_id/{group_gauge_id}:
    get:
      summary: |-
        CurrentWeightByGroupGaugeID returns the current weight since the
        the last epoch given a group gauge ID
      operationId: CurrentWeightByGroupGaugeID
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              gauge_weight:
                type: array
                items:
                  type: object
                  properties:
                    gauge_id:
                      type: string
                      format: uint64
                    weight_ratio:
                      type: string
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: group_gauge_id
          in: path
          required: true
          type: string
          format: uint64
      tags:
        - Query
  /osmosis/incentives/v1beta1/gauge_by_id/{id}:
    get:
      summary: GaugeByID returns gauges by their respective ID
      operationId: GaugeByID
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              gauge:
                type: object
                properties:
                  id:
                    type: string
                    format: uint64
                    title: id is the unique ID of a Gauge
                  is_perpetual:
                    type: boolean
                    description: >-
                      is_perpetual is a flag to show if it's a perpetual or
                      non-perpetual gauge

                      Non-perpetual gauges distribute their tokens equally per
                      epoch while the

                      gauge is in the active period. Perpetual gauges distribute
                      all their tokens

                      at a single time and only distribute their tokens again
                      once the gauge is

                      refilled, Intended for use with incentives that get
                      refilled daily.
                  distribute_to:
                    title: >-
                      distribute_to is where the gauge rewards are distributed
                      to.

                      This is queried via lock duration or by timestamp
                    type: object
                    properties:
                      lock_query_type:
                        title: >-
                          LockQueryType is a type of lock query, ByLockDuration
                          | ByLockTime
                        type: string
                        enum:
                          - ByDuration
                          - ByTime
                          - NoLock
                          - ByGroup
                        default: ByDuration
                        description: >-
                          LockQueryType defines the type of the lock query that
                          can

                          either be by duration or start time of the lock.
                      denom:
                        type: string
                        title: >-
                          Denom represents the token denomination we are looking
                          to lock up
                      duration:
                        type: string
                        description: >-
                          Duration is used to query locks with longer duration
                          than the specified

                          duration. Duration field must not be nil when the lock
                          query type is

                          `ByLockDuration`.
                      timestamp:
                        type: string
                        format: date-time
                        description: >-
                          Timestamp is used by locks started before the
                          specified duration.

                          Timestamp field must not be nil when the lock query
                          type is `ByLockTime`.

                          Querying locks with timestamp is currently not
                          implemented.
                    description: >-
                      QueryCondition is a struct used for querying locks upon
                      different conditions.

                      Duration field and timestamp fields could be optional,
                      depending on the

                      LockQueryType.
                  coins:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                    title: >-
                      coins is the total amount of coins that have been in the
                      gauge

                      Can distribute multiple coin denoms
                  start_time:
                    type: string
                    format: date-time
                    title: start_time is the distribution start time
                  num_epochs_paid_over:
                    type: string
                    format: uint64
                    title: >-
                      num_epochs_paid_over is the number of total epochs
                      distribution will be

                      completed over
                  filled_epochs:
                    type: string
                    format: uint64
                    title: >-
                      filled_epochs is the number of epochs distribution has
                      been completed on

                      already
                  distributed_coins:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                    title: >-
                      distributed_coins are coins that have been distributed
                      already
                description: >-
                  Gauge is an object that stores and distributes yields to
                  recipients who

                  satisfy certain conditions. Currently gauges support
                  conditions around the

                  duration for which a given denom is locked.
                title: Gauge that corresponds to provided gague ID
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: id
          description: Gague ID being queried
          in: path
          required: true
          type: string
          format: uint64
      tags:
        - Query
  /osmosis/incentives/v1beta1/gauges:
    get:
      summary: Gauges returns both upcoming and active gauges
      operationId: Gauges
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uint64
                      title: id is the unique ID of a Gauge
                    is_perpetual:
                      type: boolean
                      description: >-
                        is_perpetual is a flag to show if it's a perpetual or
                        non-perpetual gauge

                        Non-perpetual gauges distribute their tokens equally per
                        epoch while the

                        gauge is in the active period. Perpetual gauges
                        distribute all their tokens

                        at a single time and only distribute their tokens again
                        once the gauge is

                        refilled, Intended for use with incentives that get
                        refilled daily.
                    distribute_to:
                      title: >-
                        distribute_to is where the gauge rewards are distributed
                        to.

                        This is queried via lock duration or by timestamp
                      type: object
                      properties:
                        lock_query_type:
                          title: >-
                            LockQueryType is a type of lock query,
                            ByLockDuration | ByLockTime
                          type: string
                          enum:
                            - ByDuration
                            - ByTime
                            - NoLock
                            - ByGroup
                          default: ByDuration
                          description: >-
                            LockQueryType defines the type of the lock query
                            that can

                            either be by duration or start time of the lock.
                        denom:
                          type: string
                          title: >-
                            Denom represents the token denomination we are
                            looking to lock up
                        duration:
                          type: string
                          description: >-
                            Duration is used to query locks with longer duration
                            than the specified

                            duration. Duration field must not be nil when the
                            lock query type is

                            `ByLockDuration`.
                        timestamp:
                          type: string
                          format: date-time
                          description: >-
                            Timestamp is used by locks started before the
                            specified duration.

                            Timestamp field must not be nil when the lock query
                            type is `ByLockTime`.

                            Querying locks with timestamp is currently not
                            implemented.
                      description: >-
                        QueryCondition is a struct used for querying locks upon
                        different conditions.

                        Duration field and timestamp fields could be optional,
                        depending on the

                        LockQueryType.
                    coins:
                      type: array
                      items:
                        type: object
                        properties:
                          denom:
                            type: string
                          amount:
                            type: string
                        description: >-
                          Coin defines a token with a denomination and an
                          amount.


                          NOTE: The amount field is an Int which implements the
                          custom method

                          signatures required by gogoproto.
                      title: >-
                        coins is the total amount of coins that have been in the
                        gauge

                        Can distribute multiple coin denoms
                    start_time:
                      type: string
                      format: date-time
                      title: start_time is the distribution start time
                    num_epochs_paid_over:
                      type: string
                      format: uint64
                      title: >-
                        num_epochs_paid_over is the number of total epochs
                        distribution will be

                        completed over
                    filled_epochs:
                      type: string
                      format: uint64
                      title: >-
                        filled_epochs is the number of epochs distribution has
                        been completed on

                        already
                    distributed_coins:
                      type: array
                      items:
                        type: object
                        properties:
                          denom:
                            type: string
                          amount:
                            type: string
                        description: >-
                          Coin defines a token with a denomination and an
                          amount.


                          NOTE: The amount field is an Int which implements the
                          custom method

                          signatures required by gogoproto.
                      title: >-
                        distributed_coins are coins that have been distributed
                        already
                  description: >-
                    Gauge is an object that stores and distributes yields to
                    recipients who

                    satisfy certain conditions. Currently gauges support
                    conditions around the

                    duration for which a given denom is locked.
                title: Upcoming and active gauges
              pagination:
                title: Pagination defines pagination for the response
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /osmosis/incentives/v1beta1/group_by_group_gauge_id/{id}:
    get:
      summary: GroupByGroupGaugeID returns a group given its group gauge ID
      operationId: GroupByGroupGaugeID
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              group:
                type: object
                properties:
                  group_gauge_id:
                    type: string
                    format: uint64
                  internal_gauge_info:
                    type: object
                    properties:
                      total_weight:
                        type: string
                      gauge_records:
                        type: array
                        items:
                          type: object
                          properties:
                            gauge_id:
                              type: string
                              format: uint64
                            current_weight:
                              type: string
                              description: >-
                                CurrentWeight is the current weight of this
                                gauge being distributed to for

                                this epoch. For instance, for volume splitting
                                policy, this stores the

                                volume generated in the last epoch of the linked
                                pool.
                            cumulative_weight:
                              type: string
                              description: >-
                                CumulativeWeight serves as a snapshot of the
                                accumulator being tracked

                                based on splitting policy. For instance, for
                                volume splitting policy, this

                                stores the cumulative volume for the linked pool
                                at time of last update.
                    description: >-
                      Note that while both InternalGaugeInfo and
                      InternalGaugeRecord could

                      technically be replaced by DistrInfo and DistrRecord from
                      the pool-incentives

                      module, we create separate types here to keep our
                      abstractions clean and

                      readable (pool-incentives distribution abstractions are
                      used in a very

                      specific way that does not directly relate to gauge
                      logic). This also helps

                      us sidestep a refactor to avoid an import cycle.
                  splitting_policy:
                    type: string
                    enum:
                      - ByVolume
                    default: ByVolume
                    title: >-
                      SplittingPolicy determines the way we want to split
                      incentives in groupGauges
                description: >-
                  Group is an object that stores a 1:1 mapped gauge ID, a list
                  of pool gauge

                  info, and a splitting policy. These are grouped into a single
                  abstraction to

                  allow for distribution of group incentives to internal gauges
                  according to

                  the specified splitting policy.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: id
          in: path
          required: true
          type: string
          format: uint64
      tags:
        - Query
  /osmosis/incentives/v1beta1/lockable_durations:
    get:
      summary: >-
        LockableDurations returns lockable durations that are valid to
        distribute

        incentives for
      operationId: LockableDurations
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              lockable_durations:
                type: array
                items:
                  type: string
                title: >-
                  Time durations that users can lock coins for in order to
                  receive rewards
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      tags:
        - Query
  /osmosis/incentives/v1beta1/module_to_distribute_coins:
    get:
      summary: ModuleToDistributeCoins returns coins that are going to be distributed
      operationId: ModuleToDistributeCoins
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              coins:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom
                    method

                    signatures required by gogoproto.
                title: Coins that have yet to be distributed
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      tags:
        - Query
  /osmosis/incentives/v1beta1/rewards_est/{owner}:
    get:
      summary: >-
        RewardsEst returns an estimate of the rewards from now until a specified

        time in the future The querier either provides an address or a set of
        locks

        for which they want to find the associated rewards
      operationId: RewardsEst
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              coins:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom
                    method

                    signatures required by gogoproto.
                title: >-
                  Estimated coin rewards that will be received at provided
                  address

                  from specified locks between current time and end epoch
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: owner
          description: Address that is being queried for future estimated rewards
          in: path
          required: true
          type: string
        - name: lock_ids
          description: Lock IDs included in future reward estimation.
          in: query
          required: false
          type: array
          items:
            type: string
            format: uint64
          collectionFormat: multi
        - name: end_epoch
          description: |-
            Upper time limit of reward estimation
            Lower limit is current epoch.
          in: query
          required: false
          type: string
          format: int64
      tags:
        - Query
  /osmosis/incentives/v1beta1/upcoming_gauges:
    get:
      summary: Returns scheduled gauges that have not yet occurred
      operationId: UpcomingGauges
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uint64
                      title: id is the unique ID of a Gauge
                    is_perpetual:
                      type: boolean
                      description: >-
                        is_perpetual is a flag to show if it's a perpetual or
                        non-perpetual gauge

                        Non-perpetual gauges distribute their tokens equally per
                        epoch while the

                        gauge is in the active period. Perpetual gauges
                        distribute all their tokens

                        at a single time and only distribute their tokens again
                        once the gauge is

                        refilled, Intended for use with incentives that get
                        refilled daily.
                    distribute_to:
                      title: >-
                        distribute_to is where the gauge rewards are distributed
                        to.

                        This is queried via lock duration or by timestamp
                      type: object
                      properties:
                        lock_query_type:
                          title: >-
                            LockQueryType is a type of lock query,
                            ByLockDuration | ByLockTime
                          type: string
                          enum:
                            - ByDuration
                            - ByTime
                            - NoLock
                            - ByGroup
                          default: ByDuration
                          description: >-
                            LockQueryType defines the type of the lock query
                            that can

                            either be by duration or start time of the lock.
                        denom:
                          type: string
                          title: >-
                            Denom represents the token denomination we are
                            looking to lock up
                        duration:
                          type: string
                          description: >-
                            Duration is used to query locks with longer duration
                            than the specified

                            duration. Duration field must not be nil when the
                            lock query type is

                            `ByLockDuration`.
                        timestamp:
                          type: string
                          format: date-time
                          description: >-
                            Timestamp is used by locks started before the
                            specified duration.

                            Timestamp field must not be nil when the lock query
                            type is `ByLockTime`.

                            Querying locks with timestamp is currently not
                            implemented.
                      description: >-
                        QueryCondition is a struct used for querying locks upon
                        different conditions.

                        Duration field and timestamp fields could be optional,
                        depending on the

                        LockQueryType.
                    coins:
                      type: array
                      items:
                        type: object
                        properties:
                          denom:
                            type: string
                          amount:
                            type: string
                        description: >-
                          Coin defines a token with a denomination and an
                          amount.


                          NOTE: The amount field is an Int which implements the
                          custom method

                          signatures required by gogoproto.
                      title: >-
                        coins is the total amount of coins that have been in the
                        gauge

                        Can distribute multiple coin denoms
                    start_time:
                      type: string
                      format: date-time
                      title: start_time is the distribution start time
                    num_epochs_paid_over:
                      type: string
                      format: uint64
                      title: >-
                        num_epochs_paid_over is the number of total epochs
                        distribution will be

                        completed over
                    filled_epochs:
                      type: string
                      format: uint64
                      title: >-
                        filled_epochs is the number of epochs distribution has
                        been completed on

                        already
                    distributed_coins:
                      type: array
                      items:
                        type: object
                        properties:
                          denom:
                            type: string
                          amount:
                            type: string
                        description: >-
                          Coin defines a token with a denomination and an
                          amount.


                          NOTE: The amount field is an Int which implements the
                          custom method

                          signatures required by gogoproto.
                      title: >-
                        distributed_coins are coins that have been distributed
                        already
                  description: >-
                    Gauge is an object that stores and distributes yields to
                    recipients who

                    satisfy certain conditions. Currently gauges support
                    conditions around the

                    duration for which a given denom is locked.
                title: Gauges whose distribution is upcoming
              pagination:
                title: Pagination defines pagination for the response
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /osmosis/incentives/v1beta1/upcoming_gauges_per_denom:
    get:
      summary: >-
        UpcomingGaugesPerDenom returns scheduled gauges that have not yet
        occurred

        by denom
      operationId: UpcomingGaugesPerDenom
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              upcoming_gauges:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uint64
                      title: id is the unique ID of a Gauge
                    is_perpetual:
                      type: boolean
                      description: >-
                        is_perpetual is a flag to show if it's a perpetual or
                        non-perpetual gauge

                        Non-perpetual gauges distribute their tokens equally per
                        epoch while the

                        gauge is in the active period. Perpetual gauges
                        distribute all their tokens

                        at a single time and only distribute their tokens again
                        once the gauge is

                        refilled, Intended for use with incentives that get
                        refilled daily.
                    distribute_to:
                      title: >-
                        distribute_to is where the gauge rewards are distributed
                        to.

                        This is queried via lock duration or by timestamp
                      type: object
                      properties:
                        lock_query_type:
                          title: >-
                            LockQueryType is a type of lock query,
                            ByLockDuration | ByLockTime
                          type: string
                          enum:
                            - ByDuration
                            - ByTime
                            - NoLock
                            - ByGroup
                          default: ByDuration
                          description: >-
                            LockQueryType defines the type of the lock query
                            that can

                            either be by duration or start time of the lock.
                        denom:
                          type: string
                          title: >-
                            Denom represents the token denomination we are
                            looking to lock up
                        duration:
                          type: string
                          description: >-
                            Duration is used to query locks with longer duration
                            than the specified

                            duration. Duration field must not be nil when the
                            lock query type is

                            `ByLockDuration`.
                        timestamp:
                          type: string
                          format: date-time
                          description: >-
                            Timestamp is used by locks started before the
                            specified duration.

                            Timestamp field must not be nil when the lock query
                            type is `ByLockTime`.

                            Querying locks with timestamp is currently not
                            implemented.
                      description: >-
                        QueryCondition is a struct used for querying locks upon
                        different conditions.

                        Duration field and timestamp fields could be optional,
                        depending on the

                        LockQueryType.
                    coins:
                      type: array
                      items:
                        type: object
                        properties:
                          denom:
                            type: string
                          amount:
                            type: string
                        description: >-
                          Coin defines a token with a denomination and an
                          amount.


                          NOTE: The amount field is an Int which implements the
                          custom method

                          signatures required by gogoproto.
                      title: >-
                        coins is the total amount of coins that have been in the
                        gauge

                        Can distribute multiple coin denoms
                    start_time:
                      type: string
                      format: date-time
                      title: start_time is the distribution start time
                    num_epochs_paid_over:
                      type: string
                      format: uint64
                      title: >-
                        num_epochs_paid_over is the number of total epochs
                        distribution will be

                        completed over
                    filled_epochs:
                      type: string
                      format: uint64
                      title: >-
                        filled_epochs is the number of epochs distribution has
                        been completed on

                        already
                    distributed_coins:
                      type: array
                      items:
                        type: object
                        properties:
                          denom:
                            type: string
                          amount:
                            type: string
                        description: >-
                          Coin defines a token with a denomination and an
                          amount.


                          NOTE: The amount field is an Int which implements the
                          custom method

                          signatures required by gogoproto.
                      title: >-
                        distributed_coins are coins that have been distributed
                        already
                  description: >-
                    Gauge is an object that stores and distributes yields to
                    recipients who

                    satisfy certain conditions. Currently gauges support
                    conditions around the

                    duration for which a given denom is locked.
                title: Upcoming gagues that match denom in query
              pagination:
                title: Pagination defines pagination for the response
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: denom
          description: Filter for upcoming gagues that match specific denom.
          in: query
          required: false
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /osmosis/lockup/v1beta1/account_locked_coins/{owner}:
    get:
      summary: Return a locked coins that can't be withdrawn
      operationId: AccountLockedCoins
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              coins:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom
                    method

                    signatures required by gogoproto.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: owner
          in: path
          required: true
          type: string
      tags:
        - Query
  /osmosis/lockup/v1beta1/account_locked_duration/{owner}:
    get:
      summary: Returns account locked records with a specific duration
      operationId: AccountLockedDuration
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              locks:
                type: array
                items:
                  type: object
                  properties:
                    ID:
                      type: string
                      format: uint64
                      description: >-
                        ID is the unique id of the lock.

                        The ID of the lock is decided upon lock creation,
                        incrementing by 1 for

                        every lock.
                    owner:
                      type: string
                      description: |-
                        Owner is the account address of the lock owner.
                        Only the owner can modify the state of the lock.
                    duration:
                      type: string
                      description: >-
                        Duration is the time needed for a lock to mature after
                        unlocking has

                        started.
                    end_time:
                      type: string
                      format: date-time
                      description: >-
                        EndTime refers to the time at which the lock would
                        mature and get deleted.

                        This value is first initialized when an unlock has
                        started for the lock,

                        end time being block time + duration.
                    coins:
                      type: array
                      items:
                        type: object
                        properties:
                          denom:
                            type: string
                          amount:
                            type: string
                        description: >-
                          Coin defines a token with a denomination and an
                          amount.


                          NOTE: The amount field is an Int which implements the
                          custom method

                          signatures required by gogoproto.
                      description: >-
                        Coins are the tokens locked within the lock, kept in the
                        module account.
                    reward_receiver_address:
                      type: string
                      description: >-
                        Reward Receiver Address is the address that would be
                        receiving rewards for

                        the incentives for the lock. This is set to owner by
                        default and can be

                        changed via separate msg.
                  description: >-
                    PeriodLock is a single lock unit by period defined by the
                    x/lockup module.

                    It's a record of a locked coin at a specific time. It stores
                    owner, duration,

                    unlock time and the number of coins locked. A state of a
                    period lock is

                    created upon lock creation, and deleted once the lock has
                    been matured after

                    the `duration` has passed since unbonding started.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: owner
          in: path
          required: true
          type: string
        - name: duration
          in: query
          required: false
          type: string
      tags:
        - Query
  /osmosis/lockup/v1beta1/account_locked_longer_duration/{owner}:
    get:
      summary: Returns account locked records with longer duration
      operationId: AccountLockedLongerDuration
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              locks:
                type: array
                items:
                  type: object
                  properties:
                    ID:
                      type: string
                      format: uint64
                      description: >-
                        ID is the unique id of the lock.

                        The ID of the lock is decided upon lock creation,
                        incrementing by 1 for

                        every lock.
                    owner:
                      type: string
                      description: |-
                        Owner is the account address of the lock owner.
                        Only the owner can modify the state of the lock.
                    duration:
                      type: string
                      description: >-
                        Duration is the time needed for a lock to mature after
                        unlocking has

                        started.
                    end_time:
                      type: string
                      format: date-time
                      description: >-
                        EndTime refers to the time at which the lock would
                        mature and get deleted.

                        This value is first initialized when an unlock has
                        started for the lock,

                        end time being block time + duration.
                    coins:
                      type: array
                      items:
                        type: object
                        properties:
                          denom:
                            type: string
                          amount:
                            type: string
                        description: >-
                          Coin defines a token with a denomination and an
                          amount.


                          NOTE: The amount field is an Int which implements the
                          custom method

                          signatures required by gogoproto.
                      description: >-
                        Coins are the tokens locked within the lock, kept in the
                        module account.
                    reward_receiver_address:
                      type: string
                      description: >-
                        Reward Receiver Address is the address that would be
                        receiving rewards for

                        the incentives for the lock. This is set to owner by
                        default and can be

                        changed via separate msg.
                  description: >-
                    PeriodLock is a single lock unit by period defined by the
                    x/lockup module.

                    It's a record of a locked coin at a specific time. It stores
                    owner, duration,

                    unlock time and the number of coins locked. A state of a
                    period lock is

                    created upon lock creation, and deleted once the lock has
                    been matured after

                    the `duration` has passed since unbonding started.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: owner
          in: path
          required: true
          type: string
        - name: duration
          in: query
          required: false
          type: string
      tags:
        - Query
  /osmosis/lockup/v1beta1/account_locked_longer_duration_denom/{owner}:
    get:
      summary: Returns account's locked records for a denom with longer duration
      operationId: AccountLockedLongerDurationDenom
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              locks:
                type: array
                items:
                  type: object
                  properties:
                    ID:
                      type: string
                      format: uint64
                      description: >-
                        ID is the unique id of the lock.

                        The ID of the lock is decided upon lock creation,
                        incrementing by 1 for

                        every lock.
                    owner:
                      type: string
                      description: |-
                        Owner is the account address of the lock owner.
                        Only the owner can modify the state of the lock.
                    duration:
                      type: string
                      description: >-
                        Duration is the time needed for a lock to mature after
                        unlocking has

                        started.
                    end_time:
                      type: string
                      format: date-time
                      description: >-
                        EndTime refers to the time at which the lock would
                        mature and get deleted.

                        This value is first initialized when an unlock has
                        started for the lock,

                        end time being block time + duration.
                    coins:
                      type: array
                      items:
                        type: object
                        properties:
                          denom:
                            type: string
                          amount:
                            type: string
                        description: >-
                          Coin defines a token with a denomination and an
                          amount.


                          NOTE: The amount field is an Int which implements the
                          custom method

                          signatures required by gogoproto.
                      description: >-
                        Coins are the tokens locked within the lock, kept in the
                        module account.
                    reward_receiver_address:
                      type: string
                      description: >-
                        Reward Receiver Address is the address that would be
                        receiving rewards for

                        the incentives for the lock. This is set to owner by
                        default and can be

                        changed via separate msg.
                  description: >-
                    PeriodLock is a single lock unit by period defined by the
                    x/lockup module.

                    It's a record of a locked coin at a specific time. It stores
                    owner, duration,

                    unlock time and the number of coins locked. A state of a
                    period lock is

                    created upon lock creation, and deleted once the lock has
                    been matured after

                    the `duration` has passed since unbonding started.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: owner
          in: path
          required: true
          type: string
        - name: duration
          in: query
          required: false
          type: string
        - name: denom
          in: query
          required: false
          type: string
      tags:
        - Query
  /osmosis/lockup/v1beta1/account_locked_longer_duration_not_unlocking_only/{owner}:
    get:
      summary: |-
        Returns account locked records with longer duration excluding tokens
        started unlocking
      operationId: AccountLockedLongerDurationNotUnlockingOnly
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              locks:
                type: array
                items:
                  type: object
                  properties:
                    ID:
                      type: string
                      format: uint64
                      description: >-
                        ID is the unique id of the lock.

                        The ID of the lock is decided upon lock creation,
                        incrementing by 1 for

                        every lock.
                    owner:
                      type: string
                      description: |-
                        Owner is the account address of the lock owner.
                        Only the owner can modify the state of the lock.
                    duration:
                      type: string
                      description: >-
                        Duration is the time needed for a lock to mature after
                        unlocking has

                        started.
                    end_time:
                      type: string
                      format: date-time
                      description: >-
                        EndTime refers to the time at which the lock would
                        mature and get deleted.

                        This value is first initialized when an unlock has
                        started for the lock,

                        end time being block time + duration.
                    coins:
                      type: array
                      items:
                        type: object
                        properties:
                          denom:
                            type: string
                          amount:
                            type: string
                        description: >-
                          Coin defines a token with a denomination and an
                          amount.


                          NOTE: The amount field is an Int which implements the
                          custom method

                          signatures required by gogoproto.
                      description: >-
                        Coins are the tokens locked within the lock, kept in the
                        module account.
                    reward_receiver_address:
                      type: string
                      description: >-
                        Reward Receiver Address is the address that would be
                        receiving rewards for

                        the incentives for the lock. This is set to owner by
                        default and can be

                        changed via separate msg.
                  description: >-
                    PeriodLock is a single lock unit by period defined by the
                    x/lockup module.

                    It's a record of a locked coin at a specific time. It stores
                    owner, duration,

                    unlock time and the number of coins locked. A state of a
                    period lock is

                    created upon lock creation, and deleted once the lock has
                    been matured after

                    the `duration` has passed since unbonding started.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: owner
          in: path
          required: true
          type: string
        - name: duration
          in: query
          required: false
          type: string
      tags:
        - Query
  /osmosis/lockup/v1beta1/account_locked_pasttime/{owner}:
    get:
      summary: Returns locked records of an account with unlock time beyond timestamp
      operationId: AccountLockedPastTime
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              locks:
                type: array
                items:
                  type: object
                  properties:
                    ID:
                      type: string
                      format: uint64
                      description: >-
                        ID is the unique id of the lock.

                        The ID of the lock is decided upon lock creation,
                        incrementing by 1 for

                        every lock.
                    owner:
                      type: string
                      description: |-
                        Owner is the account address of the lock owner.
                        Only the owner can modify the state of the lock.
                    duration:
                      type: string
                      description: >-
                        Duration is the time needed for a lock to mature after
                        unlocking has

                        started.
                    end_time:
                      type: string
                      format: date-time
                      description: >-
                        EndTime refers to the time at which the lock would
                        mature and get deleted.

                        This value is first initialized when an unlock has
                        started for the lock,

                        end time being block time + duration.
                    coins:
                      type: array
                      items:
                        type: object
                        properties:
                          denom:
                            type: string
                          amount:
                            type: string
                        description: >-
                          Coin defines a token with a denomination and an
                          amount.


                          NOTE: The amount field is an Int which implements the
                          custom method

                          signatures required by gogoproto.
                      description: >-
                        Coins are the tokens locked within the lock, kept in the
                        module account.
                    reward_receiver_address:
                      type: string
                      description: >-
                        Reward Receiver Address is the address that would be
                        receiving rewards for

                        the incentives for the lock. This is set to owner by
                        default and can be

                        changed via separate msg.
                  description: >-
                    PeriodLock is a single lock unit by period defined by the
                    x/lockup module.

                    It's a record of a locked coin at a specific time. It stores
                    owner, duration,

                    unlock time and the number of coins locked. A state of a
                    period lock is

                    created upon lock creation, and deleted once the lock has
                    been matured after

                    the `duration` has passed since unbonding started.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: owner
          in: path
          required: true
          type: string
        - name: timestamp
          in: query
          required: false
          type: string
          format: date-time
      tags:
        - Query
  /osmosis/lockup/v1beta1/account_locked_pasttime_denom/{owner}:
    get:
      summary: Returns lock records by address, timestamp, denom
      operationId: AccountLockedPastTimeDenom
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              locks:
                type: array
                items:
                  type: object
                  properties:
                    ID:
                      type: string
                      format: uint64
                      description: >-
                        ID is the unique id of the lock.

                        The ID of the lock is decided upon lock creation,
                        incrementing by 1 for

                        every lock.
                    owner:
                      type: string
                      description: |-
                        Owner is the account address of the lock owner.
                        Only the owner can modify the state of the lock.
                    duration:
                      type: string
                      description: >-
                        Duration is the time needed for a lock to mature after
                        unlocking has

                        started.
                    end_time:
                      type: string
                      format: date-time
                      description: >-
                        EndTime refers to the time at which the lock would
                        mature and get deleted.

                        This value is first initialized when an unlock has
                        started for the lock,

                        end time being block time + duration.
                    coins:
                      type: array
                      items:
                        type: object
                        properties:
                          denom:
                            type: string
                          amount:
                            type: string
                        description: >-
                          Coin defines a token with a denomination and an
                          amount.


                          NOTE: The amount field is an Int which implements the
                          custom method

                          signatures required by gogoproto.
                      description: >-
                        Coins are the tokens locked within the lock, kept in the
                        module account.
                    reward_receiver_address:
                      type: string
                      description: >-
                        Reward Receiver Address is the address that would be
                        receiving rewards for

                        the incentives for the lock. This is set to owner by
                        default and can be

                        changed via separate msg.
                  description: >-
                    PeriodLock is a single lock unit by period defined by the
                    x/lockup module.

                    It's a record of a locked coin at a specific time. It stores
                    owner, duration,

                    unlock time and the number of coins locked. A state of a
                    period lock is

                    created upon lock creation, and deleted once the lock has
                    been matured after

                    the `duration` has passed since unbonding started.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: owner
          in: path
          required: true
          type: string
        - name: timestamp
          in: query
          required: false
          type: string
          format: date-time
        - name: denom
          in: query
          required: false
          type: string
      tags:
        - Query
  /osmosis/lockup/v1beta1/account_locked_pasttime_not_unlocking_only/{owner}:
    get:
      summary: |-
        Returns locked records of an account with unlock time beyond timestamp
        excluding tokens started unlocking
      operationId: AccountLockedPastTimeNotUnlockingOnly
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              locks:
                type: array
                items:
                  type: object
                  properties:
                    ID:
                      type: string
                      format: uint64
                      description: >-
                        ID is the unique id of the lock.

                        The ID of the lock is decided upon lock creation,
                        incrementing by 1 for

                        every lock.
                    owner:
                      type: string
                      description: |-
                        Owner is the account address of the lock owner.
                        Only the owner can modify the state of the lock.
                    duration:
                      type: string
                      description: >-
                        Duration is the time needed for a lock to mature after
                        unlocking has

                        started.
                    end_time:
                      type: string
                      format: date-time
                      description: >-
                        EndTime refers to the time at which the lock would
                        mature and get deleted.

                        This value is first initialized when an unlock has
                        started for the lock,

                        end time being block time + duration.
                    coins:
                      type: array
                      items:
                        type: object
                        properties:
                          denom:
                            type: string
                          amount:
                            type: string
                        description: >-
                          Coin defines a token with a denomination and an
                          amount.


                          NOTE: The amount field is an Int which implements the
                          custom method

                          signatures required by gogoproto.
                      description: >-
                        Coins are the tokens locked within the lock, kept in the
                        module account.
                    reward_receiver_address:
                      type: string
                      description: >-
                        Reward Receiver Address is the address that would be
                        receiving rewards for

                        the incentives for the lock. This is set to owner by
                        default and can be

                        changed via separate msg.
                  description: >-
                    PeriodLock is a single lock unit by period defined by the
                    x/lockup module.

                    It's a record of a locked coin at a specific time. It stores
                    owner, duration,

                    unlock time and the number of coins locked. A state of a
                    period lock is

                    created upon lock creation, and deleted once the lock has
                    been matured after

                    the `duration` has passed since unbonding started.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: owner
          in: path
          required: true
          type: string
        - name: timestamp
          in: query
          required: false
          type: string
          format: date-time
      tags:
        - Query
  /osmosis/lockup/v1beta1/account_unlockable_coins/{owner}:
    get:
      summary: Returns unlockable coins which are not withdrawn yet
      operationId: AccountUnlockableCoins
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              coins:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom
                    method

                    signatures required by gogoproto.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: owner
          in: path
          required: true
          type: string
      tags:
        - Query
  /osmosis/lockup/v1beta1/account_unlocked_before_time/{owner}:
    get:
      summary: Returns unlocked records with unlock time before timestamp
      operationId: AccountUnlockedBeforeTime
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              locks:
                type: array
                items:
                  type: object
                  properties:
                    ID:
                      type: string
                      format: uint64
                      description: >-
                        ID is the unique id of the lock.

                        The ID of the lock is decided upon lock creation,
                        incrementing by 1 for

                        every lock.
                    owner:
                      type: string
                      description: |-
                        Owner is the account address of the lock owner.
                        Only the owner can modify the state of the lock.
                    duration:
                      type: string
                      description: >-
                        Duration is the time needed for a lock to mature after
                        unlocking has

                        started.
                    end_time:
                      type: string
                      format: date-time
                      description: >-
                        EndTime refers to the time at which the lock would
                        mature and get deleted.

                        This value is first initialized when an unlock has
                        started for the lock,

                        end time being block time + duration.
                    coins:
                      type: array
                      items:
                        type: object
                        properties:
                          denom:
                            type: string
                          amount:
                            type: string
                        description: >-
                          Coin defines a token with a denomination and an
                          amount.


                          NOTE: The amount field is an Int which implements the
                          custom method

                          signatures required by gogoproto.
                      description: >-
                        Coins are the tokens locked within the lock, kept in the
                        module account.
                    reward_receiver_address:
                      type: string
                      description: >-
                        Reward Receiver Address is the address that would be
                        receiving rewards for

                        the incentives for the lock. This is set to owner by
                        default and can be

                        changed via separate msg.
                  description: >-
                    PeriodLock is a single lock unit by period defined by the
                    x/lockup module.

                    It's a record of a locked coin at a specific time. It stores
                    owner, duration,

                    unlock time and the number of coins locked. A state of a
                    period lock is

                    created upon lock creation, and deleted once the lock has
                    been matured after

                    the `duration` has passed since unbonding started.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: owner
          in: path
          required: true
          type: string
        - name: timestamp
          in: query
          required: false
          type: string
          format: date-time
      tags:
        - Query
  /osmosis/lockup/v1beta1/account_unlocking_coins/{owner}:
    get:
      summary: Returns unlocking coins
      operationId: AccountUnlockingCoins
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              coins:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom
                    method

                    signatures required by gogoproto.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: owner
          in: path
          required: true
          type: string
      tags:
        - Query
  /osmosis/lockup/v1beta1/lock_reward_receiver/{lock_id}:
    get:
      summary: Returns lock record by id
      operationId: LockRewardReceiver
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              reward_receiver:
                type: string
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: lock_id
          in: path
          required: true
          type: string
          format: uint64
      tags:
        - Query
  /osmosis/lockup/v1beta1/locked_by_id/{lock_id}:
    get:
      summary: Returns lock record by id
      operationId: LockedByID
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              lock:
                type: object
                properties:
                  ID:
                    type: string
                    format: uint64
                    description: >-
                      ID is the unique id of the lock.

                      The ID of the lock is decided upon lock creation,
                      incrementing by 1 for

                      every lock.
                  owner:
                    type: string
                    description: |-
                      Owner is the account address of the lock owner.
                      Only the owner can modify the state of the lock.
                  duration:
                    type: string
                    description: >-
                      Duration is the time needed for a lock to mature after
                      unlocking has

                      started.
                  end_time:
                    type: string
                    format: date-time
                    description: >-
                      EndTime refers to the time at which the lock would mature
                      and get deleted.

                      This value is first initialized when an unlock has started
                      for the lock,

                      end time being block time + duration.
                  coins:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                    description: >-
                      Coins are the tokens locked within the lock, kept in the
                      module account.
                  reward_receiver_address:
                    type: string
                    description: >-
                      Reward Receiver Address is the address that would be
                      receiving rewards for

                      the incentives for the lock. This is set to owner by
                      default and can be

                      changed via separate msg.
                description: >-
                  PeriodLock is a single lock unit by period defined by the
                  x/lockup module.

                  It's a record of a locked coin at a specific time. It stores
                  owner, duration,

                  unlock time and the number of coins locked. A state of a
                  period lock is

                  created upon lock creation, and deleted once the lock has been
                  matured after

                  the `duration` has passed since unbonding started.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: lock_id
          in: path
          required: true
          type: string
          format: uint64
      tags:
        - Query
  /osmosis/lockup/v1beta1/locked_denom:
    get:
      summary: Returns total locked per denom with longer past given time
      operationId: LockedDenom
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              amount:
                type: string
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: denom
          in: query
          required: false
          type: string
        - name: duration
          in: query
          required: false
          type: string
      tags:
        - Query
  /osmosis/lockup/v1beta1/module_balance:
    get:
      summary: Return full balance of the module
      operationId: ModuleBalance
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              coins:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom
                    method

                    signatures required by gogoproto.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      tags:
        - Query
  /osmosis/lockup/v1beta1/module_locked_amount:
    get:
      summary: Return locked balance of the module
      operationId: ModuleLockedAmount
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              coins:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom
                    method

                    signatures required by gogoproto.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      tags:
        - Query
  /osmosis/lockup/v1beta1/next_lock_id:
    get:
      summary: Returns next lock ID
      operationId: NextLockID
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              lock_id:
                type: string
                format: uint64
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      tags:
        - Query
  /osmosis/lockup/v1beta1/params:
    get:
      summary: Params returns lockup params.
      operationId: LockupParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              params:
                type: object
                properties:
                  force_unlock_allowed_addresses:
                    type: array
                    items:
                      type: string
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      tags:
        - Query
  /osmosis/lockup/v1beta1/synthetic_lockup_by_lock_id/{lock_id}:
    get:
      summary: Returns synthetic lockup by native lockup id
      operationId: SyntheticLockupByLockupID
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              synthetic_lock:
                type: object
                properties:
                  underlying_lock_id:
                    type: string
                    format: uint64
                    description: >-
                      Underlying Lock ID is the underlying native lock's id for
                      this synthetic

                      lockup. A synthetic lock MUST have an underlying lock.
                  synth_denom:
                    type: string
                    description: |-
                      SynthDenom is the synthetic denom that is a combination of
                      gamm share + bonding status + validator address.
                  end_time:
                    type: string
                    format: date-time
                    title: >-
                      used for unbonding synthetic lockups, for active synthetic
                      lockups, this

                      value is set to uninitialized value
                  duration:
                    type: string
                    description: |-
                      Duration is the duration for a synthetic lock to mature
                      at the point of unbonding has started.
                description: >-
                  SyntheticLock is creating virtual lockup where new denom is
                  combination of

                  original denom and synthetic suffix. At the time of synthetic
                  lockup creation

                  and deletion, accumulation store is also being updated and on
                  querier side,

                  they can query as freely as native lockup.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: lock_id
          in: path
          required: true
          type: string
          format: uint64
      tags:
        - Query
  /osmosis/lockup/v1beta1/synthetic_lockups_by_lock_id/{lock_id}:
    get:
      summary: |-
        Returns synthetic lockup by native lockup id
        Deprecated: use SyntheticLockupByLockupID instead
      operationId: SyntheticLockupsByLockupID
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              synthetic_locks:
                type: array
                items:
                  type: object
                  properties:
                    underlying_lock_id:
                      type: string
                      format: uint64
                      description: >-
                        Underlying Lock ID is the underlying native lock's id
                        for this synthetic

                        lockup. A synthetic lock MUST have an underlying lock.
                    synth_denom:
                      type: string
                      description: >-
                        SynthDenom is the synthetic denom that is a combination
                        of

                        gamm share + bonding status + validator address.
                    end_time:
                      type: string
                      format: date-time
                      title: >-
                        used for unbonding synthetic lockups, for active
                        synthetic lockups, this

                        value is set to uninitialized value
                    duration:
                      type: string
                      description: |-
                        Duration is the duration for a synthetic lock to mature
                        at the point of unbonding has started.
                  description: >-
                    SyntheticLock is creating virtual lockup where new denom is
                    combination of

                    original denom and synthetic suffix. At the time of
                    synthetic lockup creation

                    and deletion, accumulation store is also being updated and
                    on querier side,

                    they can query as freely as native lockup.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: lock_id
          in: path
          required: true
          type: string
          format: uint64
      tags:
        - Query
  /osmosis/mint/v1beta1/epoch_provisions:
    get:
      summary: EpochProvisions returns the current minting epoch provisions value.
      operationId: EpochProvisions
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              epoch_provisions:
                type: string
                format: byte
                description: >-
                  epoch_provisions is the current minting per epoch provisions
                  value.
            description: |-
              QueryEpochProvisionsResponse is the response type for the
              Query/EpochProvisions RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      tags:
        - Query
  /osmosis/mint/v1beta1/params:
    get:
      summary: Params returns the total set of minting parameters.
      operationId: MintParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              params:
                description: params defines the parameters of the module.
                type: object
                properties:
                  mint_denom:
                    type: string
                    description: mint_denom is the denom of the coin to mint.
                  genesis_epoch_provisions:
                    type: string
                    description: >-
                      genesis_epoch_provisions epoch provisions from the first
                      epoch.
                  epoch_identifier:
                    type: string
                    description: epoch_identifier mint epoch identifier e.g. (day, week).
                  reduction_period_in_epochs:
                    type: string
                    format: int64
                    description: |-
                      reduction_period_in_epochs the number of epochs it takes
                      to reduce the rewards.
                  reduction_factor:
                    type: string
                    description: >-
                      reduction_factor is the reduction multiplier to execute

                      at the end of each period set by
                      reduction_period_in_epochs.
                  distribution_proportions:
                    description: >-
                      distribution_proportions defines the distribution
                      proportions of the minted

                      denom. In other words, defines which stakeholders will
                      receive the minted

                      denoms and how much.
                    type: object
                    properties:
                      staking:
                        type: string
                        description: >-
                          staking defines the proportion of the minted
                          mint_denom that is to be

                          allocated as staking rewards.
                      pool_incentives:
                        type: string
                        description: >-
                          pool_incentives defines the proportion of the minted
                          mint_denom that is

                          to be allocated as pool incentives.
                      developer_rewards:
                        type: string
                        description: >-
                          developer_rewards defines the proportion of the minted
                          mint_denom that is

                          to be allocated to developer rewards address.
                      community_pool:
                        type: string
                        description: >-
                          community_pool defines the proportion of the minted
                          mint_denom that is

                          to be allocated to the community pool.
                  weighted_developer_rewards_receivers:
                    type: array
                    items:
                      type: object
                      properties:
                        address:
                          type: string
                        weight:
                          type: string
                      description: >-
                        WeightedAddress represents an address with a weight
                        assigned to it.

                        The weight is used to determine the proportion of the
                        total minted

                        tokens to be minted to the address.
                    description: >-
                      weighted_developer_rewards_receivers is the address to
                      receive developer

                      rewards with weights assignedt to each address. The final
                      amount that each

                      address receives is: epoch_provisions *

                      distribution_proportions.developer_rewards * Address's
                      Weight.
                  minting_rewards_distribution_start_epoch:
                    type: string
                    format: int64
                    title: >-
                      minting_rewards_distribution_start_epoch start epoch to
                      distribute minting

                      rewards
            description: >-
              QueryParamsResponse is the response type for the Query/Params RPC
              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      tags:
        - Query
  /osmosis/pool-incentives/v1beta1/distr_info:
    get:
      summary: DistrInfo returns the pool's matching gauge ids and weights.
      operationId: DistrInfo
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              distr_info:
                type: object
                properties:
                  total_weight:
                    type: string
                  records:
                    type: array
                    items:
                      type: object
                      properties:
                        gauge_id:
                          type: string
                          format: uint64
                        weight:
                          type: string
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      tags:
        - Query
  /osmosis/pool-incentives/v1beta1/external_incentive_gauges:
    get:
      summary: ExternalIncentiveGauges returns external incentive gauges.
      operationId: ExternalIncentiveGauges
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uint64
                      title: id is the unique ID of a Gauge
                    is_perpetual:
                      type: boolean
                      description: >-
                        is_perpetual is a flag to show if it's a perpetual or
                        non-perpetual gauge

                        Non-perpetual gauges distribute their tokens equally per
                        epoch while the

                        gauge is in the active period. Perpetual gauges
                        distribute all their tokens

                        at a single time and only distribute their tokens again
                        once the gauge is

                        refilled, Intended for use with incentives that get
                        refilled daily.
                    distribute_to:
                      title: >-
                        distribute_to is where the gauge rewards are distributed
                        to.

                        This is queried via lock duration or by timestamp
                      type: object
                      properties:
                        lock_query_type:
                          title: >-
                            LockQueryType is a type of lock query,
                            ByLockDuration | ByLockTime
                          type: string
                          enum:
                            - ByDuration
                            - ByTime
                            - NoLock
                            - ByGroup
                          default: ByDuration
                          description: >-
                            LockQueryType defines the type of the lock query
                            that can

                            either be by duration or start time of the lock.
                        denom:
                          type: string
                          title: >-
                            Denom represents the token denomination we are
                            looking to lock up
                        duration:
                          type: string
                          description: >-
                            Duration is used to query locks with longer duration
                            than the specified

                            duration. Duration field must not be nil when the
                            lock query type is

                            `ByLockDuration`.
                        timestamp:
                          type: string
                          format: date-time
                          description: >-
                            Timestamp is used by locks started before the
                            specified duration.

                            Timestamp field must not be nil when the lock query
                            type is `ByLockTime`.

                            Querying locks with timestamp is currently not
                            implemented.
                      description: >-
                        QueryCondition is a struct used for querying locks upon
                        different conditions.

                        Duration field and timestamp fields could be optional,
                        depending on the

                        LockQueryType.
                    coins:
                      type: array
                      items:
                        type: object
                        properties:
                          denom:
                            type: string
                          amount:
                            type: string
                        description: >-
                          Coin defines a token with a denomination and an
                          amount.


                          NOTE: The amount field is an Int which implements the
                          custom method

                          signatures required by gogoproto.
                      title: >-
                        coins is the total amount of coins that have been in the
                        gauge

                        Can distribute multiple coin denoms
                    start_time:
                      type: string
                      format: date-time
                      title: start_time is the distribution start time
                    num_epochs_paid_over:
                      type: string
                      format: uint64
                      title: >-
                        num_epochs_paid_over is the number of total epochs
                        distribution will be

                        completed over
                    filled_epochs:
                      type: string
                      format: uint64
                      title: >-
                        filled_epochs is the number of epochs distribution has
                        been completed on

                        already
                    distributed_coins:
                      type: array
                      items:
                        type: object
                        properties:
                          denom:
                            type: string
                          amount:
                            type: string
                        description: >-
                          Coin defines a token with a denomination and an
                          amount.


                          NOTE: The amount field is an Int which implements the
                          custom method

                          signatures required by gogoproto.
                      title: >-
                        distributed_coins are coins that have been distributed
                        already
                  description: >-
                    Gauge is an object that stores and distributes yields to
                    recipients who

                    satisfy certain conditions. Currently gauges support
                    conditions around the

                    duration for which a given denom is locked.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      tags:
        - Query
  /osmosis/pool-incentives/v1beta1/gauge-ids/{pool_id}:
    get:
      summary: >-
        GaugeIds takes the pool id and returns the matching gauge ids and
        durations
      operationId: GaugeIds
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              gauge_ids_with_duration:
                type: array
                items:
                  type: object
                  properties:
                    gauge_id:
                      type: string
                      format: uint64
                    duration:
                      type: string
                    gauge_incentive_percentage:
                      type: string
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: pool_id
          in: path
          required: true
          type: string
          format: uint64
      tags:
        - Query
  /osmosis/pool-incentives/v1beta1/incentivized_pools:
    get:
      summary: IncentivizedPools returns currently incentivized pools
      operationId: IncentivizedPools
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              incentivized_pools:
                type: array
                items:
                  type: object
                  properties:
                    pool_id:
                      type: string
                      format: uint64
                    lockable_duration:
                      type: string
                    gauge_id:
                      type: string
                      format: uint64
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      tags:
        - Query
  /osmosis/pool-incentives/v1beta1/lockable_durations:
    get:
      summary: LockableDurations returns lock durations for pools.
      operationId: PoolLockableDurations
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              lockable_durations:
                type: array
                items:
                  type: string
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      tags:
        - Query
  /osmosis/pool-incentives/v1beta1/params:
    get:
      summary: Params returns pool incentives params.
      operationId: PoolIncentivesParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              params:
                type: object
                properties:
                  minted_denom:
                    type: string
                    description: >-
                      minted_denom is the denomination of the coin expected to
                      be minted by the

                      minting module. Pool-incentives module doesn’t actually
                      mint the coin

                      itself, but rather manages the distribution of coins that
                      matches the

                      defined minted_denom.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      tags:
        - Query
  /osmosis/superfluid/v1beta1/account_delegated_cl_positions/{delegator_address}:
    get:
      summary: >-
        Returns all of a user's full range CL positions that are superfluid
        staked.
      operationId: UserConcentratedSuperfluidPositionsDelegated
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              cl_pool_user_position_records:
                type: array
                items:
                  type: object
                  properties:
                    validator_address:
                      type: string
                    position_id:
                      type: string
                      format: uint64
                    lock_id:
                      type: string
                      format: uint64
                    synthetic_lock:
                      type: object
                      properties:
                        underlying_lock_id:
                          type: string
                          format: uint64
                          description: >-
                            Underlying Lock ID is the underlying native lock's
                            id for this synthetic

                            lockup. A synthetic lock MUST have an underlying
                            lock.
                        synth_denom:
                          type: string
                          description: >-
                            SynthDenom is the synthetic denom that is a
                            combination of

                            gamm share + bonding status + validator address.
                        end_time:
                          type: string
                          format: date-time
                          title: >-
                            used for unbonding synthetic lockups, for active
                            synthetic lockups, this

                            value is set to uninitialized value
                        duration:
                          type: string
                          description: >-
                            Duration is the duration for a synthetic lock to
                            mature

                            at the point of unbonding has started.
                      description: >-
                        SyntheticLock is creating virtual lockup where new denom
                        is combination of

                        original denom and synthetic suffix. At the time of
                        synthetic lockup creation

                        and deletion, accumulation store is also being updated
                        and on querier side,

                        they can query as freely as native lockup.
                    delegation_amount:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                    equivalent_staked_amount:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: delegator_address
          in: path
          required: true
          type: string
      tags:
        - Query
  /osmosis/superfluid/v1beta1/account_undelegating_cl_positions/{delegator_address}:
    get:
      operationId: UserConcentratedSuperfluidPositionsUndelegating
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              cl_pool_user_position_records:
                type: array
                items:
                  type: object
                  properties:
                    validator_address:
                      type: string
                    position_id:
                      type: string
                      format: uint64
                    lock_id:
                      type: string
                      format: uint64
                    synthetic_lock:
                      type: object
                      properties:
                        underlying_lock_id:
                          type: string
                          format: uint64
                          description: >-
                            Underlying Lock ID is the underlying native lock's
                            id for this synthetic

                            lockup. A synthetic lock MUST have an underlying
                            lock.
                        synth_denom:
                          type: string
                          description: >-
                            SynthDenom is the synthetic denom that is a
                            combination of

                            gamm share + bonding status + validator address.
                        end_time:
                          type: string
                          format: date-time
                          title: >-
                            used for unbonding synthetic lockups, for active
                            synthetic lockups, this

                            value is set to uninitialized value
                        duration:
                          type: string
                          description: >-
                            Duration is the duration for a synthetic lock to
                            mature

                            at the point of unbonding has started.
                      description: >-
                        SyntheticLock is creating virtual lockup where new denom
                        is combination of

                        original denom and synthetic suffix. At the time of
                        synthetic lockup creation

                        and deletion, accumulation store is also being updated
                        and on querier side,

                        they can query as freely as native lockup.
                    delegation_amount:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                    equivalent_staked_amount:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: delegator_address
          in: path
          required: true
          type: string
      tags:
        - Query
  /osmosis/superfluid/v1beta1/all_assets:
    get:
      summary: Returns all registered superfluid assets.
      operationId: AllAssets
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              assets:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    asset_type:
                      title: >-
                        AssetType indicates whether the superfluid asset is a
                        native token or an lp

                        share
                      type: string
                      enum:
                        - SuperfluidAssetTypeNative
                        - SuperfluidAssetTypeLPShare
                        - SuperfluidAssetTypeConcentratedShare
                      default: SuperfluidAssetTypeNative
                  title: >-
                    SuperfluidAsset stores the pair of superfluid asset type and
                    denom pair
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      tags:
        - Query
  /osmosis/superfluid/v1beta1/all_intermediary_accounts:
    get:
      summary: Returns all superfluid intermediary accounts.
      operationId: AllIntermediaryAccounts
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              accounts:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    val_addr:
                      type: string
                    gauge_id:
                      type: string
                      format: uint64
                    address:
                      type: string
              pagination:
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    description: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently. It will be empty if
                      there are no more results.
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /osmosis/superfluid/v1beta1/all_superfluid_delegations:
    get:
      summary: |-
        Returns the total amount of osmo superfluidly staked.
        Response is denominated in uosmo.
      operationId: TotalSuperfluidDelegations
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              total_delegations:
                type: string
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      tags:
        - Query
  /osmosis/superfluid/v1beta1/asset_multiplier:
    get:
      summary: Returns the osmo equivalent multiplier used in the most recent epoch.
      operationId: AssetMultiplier
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              osmo_equivalent_multiplier:
                type: object
                properties:
                  epoch_number:
                    type: string
                    format: int64
                  denom:
                    type: string
                    title: superfluid asset denom, can be LP token or native token
                  multiplier:
                    type: string
                description: >-
                  The Osmo-Equivalent-Multiplier Record for epoch N refers to
                  the osmo worth we

                  treat an LP share as having, for all of epoch N. Eventually
                  this is intended

                  to be set as the Time-weighted-average-osmo-backing for the
                  entire duration

                  of epoch N-1. (Thereby locking what's in use for epoch N as
                  based on the

                  prior epochs rewards) However for now, this is not the TWAP
                  but instead the

                  spot price at the boundary. For different types of assets in
                  the future, it

                  could change.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: denom
          in: query
          required: false
          type: string
      tags:
        - Query
  /osmosis/superfluid/v1beta1/asset_type:
    get:
      summary: |-
        Returns superfluid asset type, whether if it's a native asset or an lp
        share.
      operationId: AssetType
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              asset_type:
                type: string
                enum:
                  - SuperfluidAssetTypeNative
                  - SuperfluidAssetTypeLPShare
                  - SuperfluidAssetTypeConcentratedShare
                default: SuperfluidAssetTypeNative
                title: >-
                  SuperfluidAssetType indicates whether the superfluid asset is

                  a native token, lp share of a pool, or concentrated share of a
                  pool
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: denom
          in: query
          required: false
          type: string
      tags:
        - Query
  /osmosis/superfluid/v1beta1/connected_intermediary_account/{lock_id}:
    get:
      summary: Returns intermediary account connected to a superfluid staked lock by id
      operationId: ConnectedIntermediaryAccount
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              account:
                type: object
                properties:
                  denom:
                    type: string
                  val_addr:
                    type: string
                  gauge_id:
                    type: string
                    format: uint64
                  address:
                    type: string
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: lock_id
          in: path
          required: true
          type: string
          format: uint64
      tags:
        - Query
  /osmosis/superfluid/v1beta1/estimate_superfluid_delegation_amount_by_validator_denom:
    get:
      summary: >-
        Returns the amount of a specific denom delegated to a specific validator

        This is labeled an estimate, because the way it calculates the amount
        can

        lead rounding errors from the true delegated amount
      operationId: EstimateSuperfluidDelegatedAmountByValidatorDenom
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              total_delegated_coins:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom
                    method

                    signatures required by gogoproto.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: validator_address
          in: query
          required: false
          type: string
        - name: denom
          in: query
          required: false
          type: string
      tags:
        - Query
  /osmosis/superfluid/v1beta1/params:
    get:
      summary: Params returns the total set of superfluid parameters.
      operationId: SuperfluidParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              params:
                description: params defines the parameters of the module.
                type: object
                properties:
                  minimum_risk_factor:
                    type: string
                    description: >-
                      minimum_risk_factor is to be cut on OSMO equivalent value
                      of lp tokens for

                      superfluid staking, default: 5%. The minimum risk factor
                      works

                      to counter-balance the staked amount on chain's exposure
                      to various asset

                      volatilities, and have base staking be 'resistant' to
                      volatility.
                title: Params holds parameters for the superfluid module
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      tags:
        - Query
  /osmosis/superfluid/v1beta1/superfluid_delegation_amount:
    get:
      summary: >-
        Returns the coins superfluid delegated for the delegator, validator,
        denom

        triplet
      operationId: SuperfluidDelegationAmount
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              amount:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom
                    method

                    signatures required by gogoproto.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: delegator_address
          in: query
          required: false
          type: string
        - name: validator_address
          in: query
          required: false
          type: string
        - name: denom
          in: query
          required: false
          type: string
      tags:
        - Query
  /osmosis/superfluid/v1beta1/superfluid_delegations/{delegator_address}:
    get:
      summary: Returns all the delegated superfluid positions for a specific delegator.
      operationId: SuperfluidDelegationsByDelegator
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              superfluid_delegation_records:
                type: array
                items:
                  type: object
                  properties:
                    delegator_address:
                      type: string
                    validator_address:
                      type: string
                    delegation_amount:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                    equivalent_staked_amount:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                  description: >-
                    SuperfluidDelegationRecord is a struct used to indicate
                    superfluid

                    delegations of an account in the state machine in a user
                    friendly form.
              total_delegated_coins:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom
                    method

                    signatures required by gogoproto.
              total_equivalent_staked_amount:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: delegator_address
          in: path
          required: true
          type: string
      tags:
        - Query
  /osmosis/superfluid/v1beta1/superfluid_delegations_by_validator_denom:
    get:
      summary: >-
        Returns all the superfluid positions of a specific denom delegated to
        one

        validator
      operationId: SuperfluidDelegationsByValidatorDenom
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              superfluid_delegation_records:
                type: array
                items:
                  type: object
                  properties:
                    delegator_address:
                      type: string
                    validator_address:
                      type: string
                    delegation_amount:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                    equivalent_staked_amount:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                  description: >-
                    SuperfluidDelegationRecord is a struct used to indicate
                    superfluid

                    delegations of an account in the state machine in a user
                    friendly form.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: validator_address
          in: query
          required: false
          type: string
        - name: denom
          in: query
          required: false
          type: string
      tags:
        - Query
  /osmosis/superfluid/v1beta1/superfluid_undelegations_by_delegator/{delegator_address}:
    get:
      summary: >-
        Returns all the undelegating superfluid positions for a specific
        delegator.
      operationId: SuperfluidUndelegationsByDelegator
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              superfluid_delegation_records:
                type: array
                items:
                  type: object
                  properties:
                    delegator_address:
                      type: string
                    validator_address:
                      type: string
                    delegation_amount:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                    equivalent_staked_amount:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                  description: >-
                    SuperfluidDelegationRecord is a struct used to indicate
                    superfluid

                    delegations of an account in the state machine in a user
                    friendly form.
              total_undelegated_coins:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom
                    method

                    signatures required by gogoproto.
              synthetic_locks:
                type: array
                items:
                  type: object
                  properties:
                    underlying_lock_id:
                      type: string
                      format: uint64
                      description: >-
                        Underlying Lock ID is the underlying native lock's id
                        for this synthetic

                        lockup. A synthetic lock MUST have an underlying lock.
                    synth_denom:
                      type: string
                      description: >-
                        SynthDenom is the synthetic denom that is a combination
                        of

                        gamm share + bonding status + validator address.
                    end_time:
                      type: string
                      format: date-time
                      title: >-
                        used for unbonding synthetic lockups, for active
                        synthetic lockups, this

                        value is set to uninitialized value
                    duration:
                      type: string
                      description: |-
                        Duration is the duration for a synthetic lock to mature
                        at the point of unbonding has started.
                  description: >-
                    SyntheticLock is creating virtual lockup where new denom is
                    combination of

                    original denom and synthetic suffix. At the time of
                    synthetic lockup creation

                    and deletion, accumulation store is also being updated and
                    on querier side,

                    they can query as freely as native lockup.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: delegator_address
          in: path
          required: true
          type: string
        - name: denom
          in: query
          required: false
          type: string
      tags:
        - Query
  /osmosis/superfluid/v1beta1/supply:
    get:
      operationId: RestSupply
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              amount:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: denom
          in: query
          required: false
          type: string
      tags:
        - Query
  /osmosis/superfluid/v1beta1/total_delegation_by_delegator/{delegator_address}:
    get:
      summary: Returns the specified delegations for a specific delegator
      operationId: TotalDelegationByDelegator
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              superfluid_delegation_records:
                type: array
                items:
                  type: object
                  properties:
                    delegator_address:
                      type: string
                    validator_address:
                      type: string
                    delegation_amount:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                    equivalent_staked_amount:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                  description: >-
                    SuperfluidDelegationRecord is a struct used to indicate
                    superfluid

                    delegations of an account in the state machine in a user
                    friendly form.
              delegation_response:
                type: array
                items:
                  type: object
                  properties:
                    delegation:
                      type: object
                      properties:
                        delegator_address:
                          type: string
                          description: >-
                            delegator_address is the bech32-encoded address of
                            the delegator.
                        validator_address:
                          type: string
                          description: >-
                            validator_address is the bech32-encoded address of
                            the validator.
                        shares:
                          type: string
                          description: shares define the delegation shares received.
                      description: >-
                        Delegation represents the bond with tokens held by an
                        account. It is

                        owned by one delegator, and is associated with the
                        voting power of one

                        validator.
                    balance:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                  description: >-
                    DelegationResponse is equivalent to Delegation except that
                    it contains a

                    balance in addition to shares which is more suitable for
                    client responses.
              total_delegated_coins:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom
                    method

                    signatures required by gogoproto.
              total_equivalent_staked_amount:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: delegator_address
          in: path
          required: true
          type: string
      tags:
        - Query
  /osmosis/superfluid/v1beta1/unpool_whitelist:
    get:
      summary: Returns a list of whitelisted pool ids to unpool.
      operationId: UnpoolWhitelist
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              pool_ids:
                type: array
                items:
                  type: string
                  format: uint64
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }
                        // or ...
                        if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                          foo = any.unpack(Foo.getDefaultInstance());
                        }

                    Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                    Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".


                    JSON


                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      tags:
        - Query
  /osmosis/tokenfactory/v1beta1/all_before_send_hooks:
    get:
      summary: >-
        AllBeforeSendHooksAddresses defines a gRPC query method for

        getting all addresses with before send hook registered.

        The response returns two arrays, an array with a list of denom and an
        array

        of before send hook addresses. The idx of denom corresponds to before
        send

        hook addresse's idx.
      operationId: AllBeforeSendHooksAddresses
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              denoms:
                type: array
                items:
                  type: string
              before_send_hook_addresses:
                type: array
                items:
                  type: string
            description: >-
              QueryAllBeforeSendHooksAddressesResponse defines the response
              structure for

              the AllBeforeSendHooksAddresses gRPC query.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      tags:
        - Query
  /osmosis/tokenfactory/v1beta1/denoms/{denom}/authority_metadata:
    get:
      summary: |-
        DenomAuthorityMetadata defines a gRPC query method for fetching
        DenomAuthorityMetadata for a particular denom.
      operationId: DenomAuthorityMetadata
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              authority_metadata:
                type: object
                properties:
                  admin:
                    type: string
                    title: Can be empty for no admin, or a valid osmosis address
                description: >-
                  DenomAuthorityMetadata specifies metadata for addresses that
                  have specific

                  capabilities over a token factory denom. Right now there is
                  only one Admin

                  permission, but is planned to be extended to the future.
            description: >-
              QueryDenomAuthorityMetadataResponse defines the response structure
              for the

              DenomAuthorityMetadata gRPC query.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: denom
          in: path
          required: true
          type: string
      tags:
        - Query
  /osmosis/tokenfactory/v1beta1/denoms/{denom}/before_send_hook:
    get:
      summary: |-
        BeforeSendHookAddress defines a gRPC query method for
        getting the address registered for the before send hook.
      operationId: BeforeSendHookAddress
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              cosmwasm_address:
                type: string
            description: >-
              QueryBeforeSendHookAddressResponse defines the response structure
              for the

              DenomBeforeSendHook gRPC query.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: denom
          in: path
          required: true
          type: string
      tags:
        - Query
  /osmosis/tokenfactory/v1beta1/denoms_from_creator/{creator}:
    get:
      summary: |-
        DenomsFromCreator defines a gRPC query method for fetching all
        denominations created by a specific admin/creator.
      operationId: DenomsFromCreator
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              denoms:
                type: array
                items:
                  type: string
            description: >-
              QueryDenomsFromCreatorRequest defines the response structure for
              the

              DenomsFromCreator gRPC query.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: creator
          in: path
          required: true
          type: string
      tags:
        - Query
  /osmosis/tokenfactory/v1beta1/params:
    get:
      summary: >-
        Params defines a gRPC query method that returns the tokenfactory
        module's

        parameters.
      operationId: TokenfactoryParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              params:
                description: params defines the parameters of the module.
                type: object
                properties:
                  denom_creation_fee:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                    description: >-
                      DenomCreationFee defines the fee to be charged on the
                      creation of a new

                      denom. The fee is drawn from the MsgCreateDenom's sender
                      account, and

                      transferred to the community pool.
                  denom_creation_gas_consume:
                    type: string
                    format: uint64
                    description: >-
                      DenomCreationGasConsume defines the gas cost for creating
                      a new denom.

                      This is intended as a spam deterrence mechanism.


                      See: https://github.com/CosmWasm/token-factory/issues/11
            description: >-
              QueryParamsResponse is the response type for the Query/Params RPC
              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      tags:
        - Query
  /osmosis/txfees/v1beta1/base_denom:
    get:
      summary: Returns a list of all base denom tokens and their corresponding pools.
      operationId: TxFeesBaseDenom
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              base_denom:
                type: string
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      tags:
        - Query
  /osmosis/txfees/v1beta1/cur_eip_base_fee:
    get:
      summary: Returns a list of all base denom tokens and their corresponding pools.
      operationId: GetEipBaseFee
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              base_fee:
                type: string
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      tags:
        - Query
  /osmosis/txfees/v1beta1/denom_pool_id/{denom}:
    get:
      summary: Returns the poolID for a specified denom input.
      operationId: DenomPoolId
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              poolID:
                type: string
                format: uint64
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: denom
          in: path
          required: true
          type: string
      tags:
        - Query
  /osmosis/txfees/v1beta1/fee_tokens:
    get:
      summary: >-
        FeeTokens returns a list of all the whitelisted fee tokens and their

        corresponding pools. It does not include the BaseDenom, which has its
        own

        query endpoint
      operationId: FeeTokens
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              fee_tokens:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    poolID:
                      type: string
                      format: uint64
                  description: >-
                    FeeToken is a struct that specifies a coin denom, and pool
                    ID pair.

                    This marks the token as eligible for use as a tx fee asset
                    in Osmosis.

                    Its price in osmo is derived through looking at the provided
                    pool ID.

                    The pool ID must have osmo as one of its assets.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      tags:
        - Query
  /osmosis/txfees/v1beta1/spot_price_by_denom:
    get:
      summary: DenomSpotPrice returns all spot prices by each registered token denom.
      operationId: DenomSpotPrice
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              poolID:
                type: string
                format: uint64
              spot_price:
                type: string
            title: >-
              QueryDenomSpotPriceRequest defines grpc response structure for
              querying spot

              price for the specified tx fee denom
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: denom
          in: query
          required: false
          type: string
      tags:
        - Query
definitions:
  google.protobuf.Any:
    type: object
    properties:
      type_url:
        type: string
        description: >-
          A URL/resource name that uniquely identifies the type of the
          serialized

          protocol buffer message. This string must contain at least

          one "/" character. The last segment of the URL's path must represent

          the fully qualified name of the type (as in

          `path/google.protobuf.Duration`). The name should be in a canonical
          form

          (e.g., leading "." is not accepted).


          In practice, teams usually precompile into the binary all types that
          they

          expect it to use in the context of Any. However, for URLs which use
          the

          scheme `http`, `https`, or no scheme, one can optionally set up a type

          server that maps type URLs to message definitions as follows:


          * If no scheme is provided, `https` is assumed.

          * An HTTP GET on the URL must yield a [google.protobuf.Type][]
            value in binary format, or produce an error.
          * Applications are allowed to cache lookup results based on the
            URL, or have them precompiled into a binary to avoid any
            lookup. Therefore, binary compatibility needs to be preserved
            on changes to types. (Use versioned type names to manage
            breaking changes.)

          Note: this functionality is not currently available in the official

          protobuf release, and it is not used for type URLs beginning with

          type.googleapis.com.


          Schemes other than `http`, `https` (or the empty scheme) might be

          used with implementation specific semantics.
      value:
        type: string
        format: byte
        description: >-
          Must be a valid serialized protocol buffer of the above specified
          type.
    description: >-
      `Any` contains an arbitrary serialized protocol buffer message along with
      a

      URL that describes the type of the serialized message.


      Protobuf library provides support to pack/unpack Any values in the form

      of utility functions or additional generated methods of the Any type.


      Example 1: Pack and unpack a message in C++.

          Foo foo = ...;
          Any any;
          any.PackFrom(foo);
          ...
          if (any.UnpackTo(&foo)) {
            ...
          }

      Example 2: Pack and unpack a message in Java.

          Foo foo = ...;
          Any any = Any.pack(foo);
          ...
          if (any.is(Foo.class)) {
            foo = any.unpack(Foo.class);
          }
          // or ...
          if (any.isSameTypeAs(Foo.getDefaultInstance())) {
            foo = any.unpack(Foo.getDefaultInstance());
          }

      Example 3: Pack and unpack a message in Python.

          foo = Foo(...)
          any = Any()
          any.Pack(foo)
          ...
          if any.Is(Foo.DESCRIPTOR):
            any.Unpack(foo)
            ...

      Example 4: Pack and unpack a message in Go

           foo := &pb.Foo{...}
           any, err := anypb.New(foo)
           if err != nil {
             ...
           }
           ...
           foo := &pb.Foo{}
           if err := any.UnmarshalTo(foo); err != nil {
             ...
           }

      The pack methods provided by protobuf library will by default use

      'type.googleapis.com/full.type.name' as the type URL and the unpack

      methods only use the fully qualified type name after the last '/'

      in the type URL, for example "foo.bar.com/x/y.z" will yield type

      name "y.z".


      JSON


      The JSON representation of an `Any` value uses the regular

      representation of the deserialized, embedded message, with an

      additional field `@type` which contains the type URL. Example:

          package google.profile;
          message Person {
            string first_name = 1;
            string last_name = 2;
          }

          {
            "@type": "type.googleapis.com/google.profile.Person",
            "firstName": <string>,
            "lastName": <string>
          }

      If the embedded message type is well-known and has a custom JSON

      representation, that representation will be embedded adding a field

      `value` which holds the custom JSON in addition to the `@type`

      field. Example (for message [google.protobuf.Duration][]):

          {
            "@type": "type.googleapis.com/google.protobuf.Duration",
            "value": "1.212s"
          }
  grpc.gateway.runtime.Error:
    type: object
    properties:
      error:
        type: string
      code:
        type: integer
        format: int32
      message:
        type: string
      details:
        type: array
        items:
          type: object
          properties:
            type_url:
              type: string
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
            value:
              type: string
              format: byte
              description: >-
                Must be a valid serialized protocol buffer of the above
                specified type.
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }
                // or ...
                if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                  foo = any.unpack(Foo.getDefaultInstance());
                }

            Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

            Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := anypb.New(foo)
                 if err != nil {
                   ...
                 }
                 ...
                 foo := &pb.Foo{}
                 if err := any.UnmarshalTo(foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".


            JSON


            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
  osmosis.epochs.v1beta1.EpochInfo:
    type: object
    properties:
      identifier:
        type: string
        description: identifier is a unique reference to this particular timer.
      start_time:
        type: string
        format: date-time
        description: >-
          start_time is the time at which the timer first ever ticks.

          If start_time is in the future, the epoch will not begin until the
          start

          time.
      duration:
        type: string
        description: |-
          duration is the time in between epoch ticks.
          In order for intended behavior to be met, duration should
          be greater than the chains expected block time.
          Duration must be non-zero.
      current_epoch:
        type: string
        format: int64
        description: >-
          current_epoch is the current epoch number, or in other words,

          how many times has the timer 'ticked'.

          The first tick (current_epoch=1) is defined as

          the first block whose blocktime is greater than the EpochInfo
          start_time.
      current_epoch_start_time:
        type: string
        format: date-time
        description: >-
          current_epoch_start_time describes the start time of the current timer

          interval. The interval is (current_epoch_start_time,

          current_epoch_start_time + duration] When the timer ticks, this is set
          to

          current_epoch_start_time = last_epoch_start_time + duration only one
          timer

          tick for a given identifier can occur per block.


          NOTE! The current_epoch_start_time may diverge significantly from the

          wall-clock time the epoch began at. Wall-clock time of epoch start may
          be

          >> current_epoch_start_time. Suppose current_epoch_start_time = 10,

          duration = 5. Suppose the chain goes offline at t=14, and comes back
          online

          at t=30, and produces blocks at every successive time. (t=31, 32,
          etc.)

          * The t=30 block will start the epoch for (10, 15]

          * The t=31 block will start the epoch for (15, 20]

          * The t=32 block will start the epoch for (20, 25]

          * The t=33 block will start the epoch for (25, 30]

          * The t=34 block will start the epoch for (30, 35]

          * The **t=36** block will start the epoch for (35, 40]
      epoch_counting_started:
        type: boolean
        description: |-
          epoch_counting_started is a boolean, that indicates whether this
          epoch timer has began yet.
      current_epoch_start_height:
        type: string
        format: int64
        title: >-
          current_epoch_start_height is the block height at which the current
          epoch

          started. (The block height at which the timer last ticked)
    description: |-
      EpochInfo is a struct that describes the data going into
      a timer defined by the x/epochs module.
  osmosis.epochs.v1beta1.QueryCurrentEpochResponse:
    type: object
    properties:
      current_epoch:
        type: string
        format: int64
  osmosis.epochs.v1beta1.QueryEpochsInfoResponse:
    type: object
    properties:
      epochs:
        type: array
        items:
          type: object
          properties:
            identifier:
              type: string
              description: identifier is a unique reference to this particular timer.
            start_time:
              type: string
              format: date-time
              description: >-
                start_time is the time at which the timer first ever ticks.

                If start_time is in the future, the epoch will not begin until
                the start

                time.
            duration:
              type: string
              description: |-
                duration is the time in between epoch ticks.
                In order for intended behavior to be met, duration should
                be greater than the chains expected block time.
                Duration must be non-zero.
            current_epoch:
              type: string
              format: int64
              description: >-
                current_epoch is the current epoch number, or in other words,

                how many times has the timer 'ticked'.

                The first tick (current_epoch=1) is defined as

                the first block whose blocktime is greater than the EpochInfo
                start_time.
            current_epoch_start_time:
              type: string
              format: date-time
              description: >-
                current_epoch_start_time describes the start time of the current
                timer

                interval. The interval is (current_epoch_start_time,

                current_epoch_start_time + duration] When the timer ticks, this
                is set to

                current_epoch_start_time = last_epoch_start_time + duration only
                one timer

                tick for a given identifier can occur per block.


                NOTE! The current_epoch_start_time may diverge significantly
                from the

                wall-clock time the epoch began at. Wall-clock time of epoch
                start may be

                >> current_epoch_start_time. Suppose current_epoch_start_time =
                10,

                duration = 5. Suppose the chain goes offline at t=14, and comes
                back online

                at t=30, and produces blocks at every successive time. (t=31,
                32, etc.)

                * The t=30 block will start the epoch for (10, 15]

                * The t=31 block will start the epoch for (15, 20]

                * The t=32 block will start the epoch for (20, 25]

                * The t=33 block will start the epoch for (25, 30]

                * The t=34 block will start the epoch for (30, 35]

                * The **t=36** block will start the epoch for (35, 40]
            epoch_counting_started:
              type: boolean
              description: |-
                epoch_counting_started is a boolean, that indicates whether this
                epoch timer has began yet.
            current_epoch_start_height:
              type: string
              format: int64
              title: >-
                current_epoch_start_height is the block height at which the
                current epoch

                started. (The block height at which the timer last ticked)
          description: |-
            EpochInfo is a struct that describes the data going into
            a timer defined by the x/epochs module.
  cosmos.base.query.v1beta1.PageRequest:
    type: object
    properties:
      key:
        type: string
        format: byte
        description: |-
          key is a value returned in PageResponse.next_key to begin
          querying the next page most efficiently. Only one of offset or key
          should be set.
      offset:
        type: string
        format: uint64
        description: |-
          offset is a numeric offset that can be used when key is unavailable.
          It is less efficient than using key. Only one of offset or key should
          be set.
      limit:
        type: string
        format: uint64
        description: >-
          limit is the total number of results to be returned in the result
          page.

          If left empty it will default to a value to be set by each app.
      count_total:
        type: boolean
        description: >-
          count_total is set to true  to indicate that the result set should
          include

          a count of the total number of items available for pagination in UIs.

          count_total is only respected when offset is used. It is ignored when
          key

          is set.
      reverse:
        type: boolean
        description: >-
          reverse is set to true if results are to be returned in the descending
          order.


          Since: cosmos-sdk 0.43
    description: |-
      message SomeRequest {
               Foo some_parameter = 1;
               PageRequest pagination = 2;
       }
    title: |-
      PageRequest is to be embedded in gRPC request messages for efficient
      pagination. Ex:
  cosmos.base.query.v1beta1.PageResponse:
    type: object
    properties:
      next_key:
        type: string
        format: byte
        description: |-
          next_key is the key to be passed to PageRequest.key to
          query the next page most efficiently. It will be empty if
          there are no more results.
      total:
        type: string
        format: uint64
        title: |-
          total is total number of results available if PageRequest.count_total
          was set, its value is undefined otherwise
    description: |-
      PageResponse is to be embedded in gRPC response messages where the
      corresponding request message has used PageRequest.

       message SomeResponse {
               repeated Bar results = 1;
               PageResponse page = 2;
       }
  cosmos.base.v1beta1.Coin:
    type: object
    properties:
      denom:
        type: string
      amount:
        type: string
    description: |-
      Coin defines a token with a denomination and an amount.

      NOTE: The amount field is an Int which implements the custom method
      signatures required by gogoproto.
  osmosis.gamm.v1beta1.BalancerToConcentratedPoolLink:
    type: object
    properties:
      balancer_pool_id:
        type: string
        format: uint64
      cl_pool_id:
        type: string
        format: uint64
    description: >-
      BalancerToConcentratedPoolLink defines a single link between a single

      balancer pool and a single concentrated liquidity pool. This link is used
      to

      allow a balancer pool to migrate to a single canonical full range

      concentrated liquidity pool position

      A balancer pool can be linked to a maximum of one cl pool, and a cl pool
      can

      be linked to a maximum of one balancer pool.
  osmosis.gamm.v1beta1.MigrationRecords:
    type: object
    properties:
      balancer_to_concentrated_pool_links:
        type: array
        items:
          type: object
          properties:
            balancer_pool_id:
              type: string
              format: uint64
            cl_pool_id:
              type: string
              format: uint64
          description: >-
            BalancerToConcentratedPoolLink defines a single link between a
            single

            balancer pool and a single concentrated liquidity pool. This link is
            used to

            allow a balancer pool to migrate to a single canonical full range

            concentrated liquidity pool position

            A balancer pool can be linked to a maximum of one cl pool, and a cl
            pool can

            be linked to a maximum of one balancer pool.
    title: |-
      MigrationRecords contains all the links between balancer and concentrated
      pools
  osmosis.gamm.v1beta1.QueryCFMMConcentratedPoolLinksResponse:
    type: object
    properties:
      migration_records:
        type: object
        properties:
          balancer_to_concentrated_pool_links:
            type: array
            items:
              type: object
              properties:
                balancer_pool_id:
                  type: string
                  format: uint64
                cl_pool_id:
                  type: string
                  format: uint64
              description: >-
                BalancerToConcentratedPoolLink defines a single link between a
                single

                balancer pool and a single concentrated liquidity pool. This
                link is used to

                allow a balancer pool to migrate to a single canonical full
                range

                concentrated liquidity pool position

                A balancer pool can be linked to a maximum of one cl pool, and a
                cl pool can

                be linked to a maximum of one balancer pool.
        title: >-
          MigrationRecords contains all the links between balancer and
          concentrated

          pools
  osmosis.gamm.v1beta1.QueryCalcExitPoolCoinsFromSharesResponse:
    type: object
    properties:
      tokens_out:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
  osmosis.gamm.v1beta1.QueryCalcJoinPoolNoSwapSharesResponse:
    type: object
    properties:
      tokens_out:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
      shares_out:
        type: string
  osmosis.gamm.v1beta1.QueryCalcJoinPoolSharesResponse:
    type: object
    properties:
      share_out_amount:
        type: string
      tokens_out:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
  osmosis.gamm.v1beta1.QueryConcentratedPoolIdLinkFromCFMMResponse:
    type: object
    properties:
      concentrated_pool_id:
        type: string
        format: uint64
  osmosis.gamm.v1beta1.QueryNumPoolsResponse:
    type: object
    properties:
      num_pools:
        type: string
        format: uint64
  osmosis.gamm.v1beta1.QueryPoolParamsResponse:
    type: object
    properties:
      params:
        type: object
        properties:
          type_url:
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
          value:
            type: string
            format: byte
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }
              // or ...
              if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                foo = any.unpack(Foo.getDefaultInstance());
              }

          Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

          Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := anypb.New(foo)
               if err != nil {
                 ...
               }
               ...
               foo := &pb.Foo{}
               if err := any.UnmarshalTo(foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".


          JSON


          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
  osmosis.gamm.v1beta1.QueryPoolResponse:
    type: object
    properties:
      pool:
        type: object
        properties:
          type_url:
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
          value:
            type: string
            format: byte
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }
              // or ...
              if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                foo = any.unpack(Foo.getDefaultInstance());
              }

          Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

          Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := anypb.New(foo)
               if err != nil {
                 ...
               }
               ...
               foo := &pb.Foo{}
               if err := any.UnmarshalTo(foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".


          JSON


          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
    title: 'Deprecated: please use the alternative in x/poolmanager'
  osmosis.gamm.v1beta1.QueryPoolTypeResponse:
    type: object
    properties:
      pool_type:
        type: string
  osmosis.gamm.v1beta1.QueryPoolsResponse:
    type: object
    properties:
      pools:
        type: array
        items:
          type: object
          properties:
            type_url:
              type: string
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
            value:
              type: string
              format: byte
              description: >-
                Must be a valid serialized protocol buffer of the above
                specified type.
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }
                // or ...
                if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                  foo = any.unpack(Foo.getDefaultInstance());
                }

            Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

            Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := anypb.New(foo)
                 if err != nil {
                   ...
                 }
                 ...
                 foo := &pb.Foo{}
                 if err := any.UnmarshalTo(foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".


            JSON


            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
  osmosis.gamm.v1beta1.QueryPoolsWithFilterResponse:
    type: object
    properties:
      pools:
        type: array
        items:
          type: object
          properties:
            type_url:
              type: string
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
            value:
              type: string
              format: byte
              description: >-
                Must be a valid serialized protocol buffer of the above
                specified type.
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }
                // or ...
                if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                  foo = any.unpack(Foo.getDefaultInstance());
                }

            Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

            Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := anypb.New(foo)
                 if err != nil {
                   ...
                 }
                 ...
                 foo := &pb.Foo{}
                 if err := any.UnmarshalTo(foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".


            JSON


            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
  osmosis.gamm.v1beta1.QuerySpotPriceResponse:
    type: object
    properties:
      spot_price:
        type: string
        title: String of the Dec. Ex) 10.203uatom
    description: |-
      QuerySpotPriceResponse defines the gRPC response structure for a SpotPrice
      query.
  osmosis.gamm.v1beta1.QuerySwapExactAmountInResponse:
    type: object
    properties:
      token_out_amount:
        type: string
  osmosis.gamm.v1beta1.QuerySwapExactAmountOutResponse:
    type: object
    properties:
      token_in_amount:
        type: string
  osmosis.gamm.v1beta1.QueryTotalLiquidityResponse:
    type: object
    properties:
      liquidity:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
  osmosis.gamm.v1beta1.QueryTotalPoolLiquidityResponse:
    type: object
    properties:
      liquidity:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
    title: 'Deprecated: please use the alternative in x/poolmanager'
  osmosis.gamm.v1beta1.QueryTotalSharesResponse:
    type: object
    properties:
      total_shares:
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
        description: |-
          Coin defines a token with a denomination and an amount.

          NOTE: The amount field is an Int which implements the custom method
          signatures required by gogoproto.
  osmosis.poolmanager.v1beta1.SwapAmountInRoute:
    type: object
    properties:
      pool_id:
        type: string
        format: uint64
      token_out_denom:
        type: string
  osmosis.poolmanager.v1beta1.SwapAmountOutRoute:
    type: object
    properties:
      pool_id:
        type: string
        format: uint64
      token_in_denom:
        type: string
  osmosis.incentives.ActiveGaugesPerDenomResponse:
    type: object
    properties:
      data:
        type: array
        items:
          type: object
          properties:
            id:
              type: string
              format: uint64
              title: id is the unique ID of a Gauge
            is_perpetual:
              type: boolean
              description: >-
                is_perpetual is a flag to show if it's a perpetual or
                non-perpetual gauge

                Non-perpetual gauges distribute their tokens equally per epoch
                while the

                gauge is in the active period. Perpetual gauges distribute all
                their tokens

                at a single time and only distribute their tokens again once the
                gauge is

                refilled, Intended for use with incentives that get refilled
                daily.
            distribute_to:
              title: |-
                distribute_to is where the gauge rewards are distributed to.
                This is queried via lock duration or by timestamp
              type: object
              properties:
                lock_query_type:
                  title: >-
                    LockQueryType is a type of lock query, ByLockDuration |
                    ByLockTime
                  type: string
                  enum:
                    - ByDuration
                    - ByTime
                    - NoLock
                    - ByGroup
                  default: ByDuration
                  description: |-
                    LockQueryType defines the type of the lock query that can
                    either be by duration or start time of the lock.
                denom:
                  type: string
                  title: >-
                    Denom represents the token denomination we are looking to
                    lock up
                duration:
                  type: string
                  description: >-
                    Duration is used to query locks with longer duration than
                    the specified

                    duration. Duration field must not be nil when the lock query
                    type is

                    `ByLockDuration`.
                timestamp:
                  type: string
                  format: date-time
                  description: >-
                    Timestamp is used by locks started before the specified
                    duration.

                    Timestamp field must not be nil when the lock query type is
                    `ByLockTime`.

                    Querying locks with timestamp is currently not implemented.
              description: >-
                QueryCondition is a struct used for querying locks upon
                different conditions.

                Duration field and timestamp fields could be optional, depending
                on the

                LockQueryType.
            coins:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
              title: |-
                coins is the total amount of coins that have been in the gauge
                Can distribute multiple coin denoms
            start_time:
              type: string
              format: date-time
              title: start_time is the distribution start time
            num_epochs_paid_over:
              type: string
              format: uint64
              title: >-
                num_epochs_paid_over is the number of total epochs distribution
                will be

                completed over
            filled_epochs:
              type: string
              format: uint64
              title: >-
                filled_epochs is the number of epochs distribution has been
                completed on

                already
            distributed_coins:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
              title: distributed_coins are coins that have been distributed already
          description: >-
            Gauge is an object that stores and distributes yields to recipients
            who

            satisfy certain conditions. Currently gauges support conditions
            around the

            duration for which a given denom is locked.
        title: Active gagues that match denom in query
      pagination:
        title: Pagination defines pagination for the response
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
  osmosis.incentives.ActiveGaugesResponse:
    type: object
    properties:
      data:
        type: array
        items:
          type: object
          properties:
            id:
              type: string
              format: uint64
              title: id is the unique ID of a Gauge
            is_perpetual:
              type: boolean
              description: >-
                is_perpetual is a flag to show if it's a perpetual or
                non-perpetual gauge

                Non-perpetual gauges distribute their tokens equally per epoch
                while the

                gauge is in the active period. Perpetual gauges distribute all
                their tokens

                at a single time and only distribute their tokens again once the
                gauge is

                refilled, Intended for use with incentives that get refilled
                daily.
            distribute_to:
              title: |-
                distribute_to is where the gauge rewards are distributed to.
                This is queried via lock duration or by timestamp
              type: object
              properties:
                lock_query_type:
                  title: >-
                    LockQueryType is a type of lock query, ByLockDuration |
                    ByLockTime
                  type: string
                  enum:
                    - ByDuration
                    - ByTime
                    - NoLock
                    - ByGroup
                  default: ByDuration
                  description: |-
                    LockQueryType defines the type of the lock query that can
                    either be by duration or start time of the lock.
                denom:
                  type: string
                  title: >-
                    Denom represents the token denomination we are looking to
                    lock up
                duration:
                  type: string
                  description: >-
                    Duration is used to query locks with longer duration than
                    the specified

                    duration. Duration field must not be nil when the lock query
                    type is

                    `ByLockDuration`.
                timestamp:
                  type: string
                  format: date-time
                  description: >-
                    Timestamp is used by locks started before the specified
                    duration.

                    Timestamp field must not be nil when the lock query type is
                    `ByLockTime`.

                    Querying locks with timestamp is currently not implemented.
              description: >-
                QueryCondition is a struct used for querying locks upon
                different conditions.

                Duration field and timestamp fields could be optional, depending
                on the

                LockQueryType.
            coins:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
              title: |-
                coins is the total amount of coins that have been in the gauge
                Can distribute multiple coin denoms
            start_time:
              type: string
              format: date-time
              title: start_time is the distribution start time
            num_epochs_paid_over:
              type: string
              format: uint64
              title: >-
                num_epochs_paid_over is the number of total epochs distribution
                will be

                completed over
            filled_epochs:
              type: string
              format: uint64
              title: >-
                filled_epochs is the number of epochs distribution has been
                completed on

                already
            distributed_coins:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
              title: distributed_coins are coins that have been distributed already
          description: >-
            Gauge is an object that stores and distributes yields to recipients
            who

            satisfy certain conditions. Currently gauges support conditions
            around the

            duration for which a given denom is locked.
        title: Active gagues only
      pagination:
        title: Pagination defines pagination for the response
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
  osmosis.incentives.Gauge:
    type: object
    properties:
      id:
        type: string
        format: uint64
        title: id is the unique ID of a Gauge
      is_perpetual:
        type: boolean
        description: >-
          is_perpetual is a flag to show if it's a perpetual or non-perpetual
          gauge

          Non-perpetual gauges distribute their tokens equally per epoch while
          the

          gauge is in the active period. Perpetual gauges distribute all their
          tokens

          at a single time and only distribute their tokens again once the gauge
          is

          refilled, Intended for use with incentives that get refilled daily.
      distribute_to:
        title: |-
          distribute_to is where the gauge rewards are distributed to.
          This is queried via lock duration or by timestamp
        type: object
        properties:
          lock_query_type:
            title: LockQueryType is a type of lock query, ByLockDuration | ByLockTime
            type: string
            enum:
              - ByDuration
              - ByTime
              - NoLock
              - ByGroup
            default: ByDuration
            description: |-
              LockQueryType defines the type of the lock query that can
              either be by duration or start time of the lock.
          denom:
            type: string
            title: Denom represents the token denomination we are looking to lock up
          duration:
            type: string
            description: >-
              Duration is used to query locks with longer duration than the
              specified

              duration. Duration field must not be nil when the lock query type
              is

              `ByLockDuration`.
          timestamp:
            type: string
            format: date-time
            description: >-
              Timestamp is used by locks started before the specified duration.

              Timestamp field must not be nil when the lock query type is
              `ByLockTime`.

              Querying locks with timestamp is currently not implemented.
        description: >-
          QueryCondition is a struct used for querying locks upon different
          conditions.

          Duration field and timestamp fields could be optional, depending on
          the

          LockQueryType.
      coins:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
        title: |-
          coins is the total amount of coins that have been in the gauge
          Can distribute multiple coin denoms
      start_time:
        type: string
        format: date-time
        title: start_time is the distribution start time
      num_epochs_paid_over:
        type: string
        format: uint64
        title: >-
          num_epochs_paid_over is the number of total epochs distribution will
          be

          completed over
      filled_epochs:
        type: string
        format: uint64
        title: >-
          filled_epochs is the number of epochs distribution has been completed
          on

          already
      distributed_coins:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
        title: distributed_coins are coins that have been distributed already
    description: |-
      Gauge is an object that stores and distributes yields to recipients who
      satisfy certain conditions. Currently gauges support conditions around the
      duration for which a given denom is locked.
  osmosis.incentives.GaugeByIDResponse:
    type: object
    properties:
      gauge:
        type: object
        properties:
          id:
            type: string
            format: uint64
            title: id is the unique ID of a Gauge
          is_perpetual:
            type: boolean
            description: >-
              is_perpetual is a flag to show if it's a perpetual or
              non-perpetual gauge

              Non-perpetual gauges distribute their tokens equally per epoch
              while the

              gauge is in the active period. Perpetual gauges distribute all
              their tokens

              at a single time and only distribute their tokens again once the
              gauge is

              refilled, Intended for use with incentives that get refilled
              daily.
          distribute_to:
            title: |-
              distribute_to is where the gauge rewards are distributed to.
              This is queried via lock duration or by timestamp
            type: object
            properties:
              lock_query_type:
                title: >-
                  LockQueryType is a type of lock query, ByLockDuration |
                  ByLockTime
                type: string
                enum:
                  - ByDuration
                  - ByTime
                  - NoLock
                  - ByGroup
                default: ByDuration
                description: |-
                  LockQueryType defines the type of the lock query that can
                  either be by duration or start time of the lock.
              denom:
                type: string
                title: >-
                  Denom represents the token denomination we are looking to lock
                  up
              duration:
                type: string
                description: >-
                  Duration is used to query locks with longer duration than the
                  specified

                  duration. Duration field must not be nil when the lock query
                  type is

                  `ByLockDuration`.
              timestamp:
                type: string
                format: date-time
                description: >-
                  Timestamp is used by locks started before the specified
                  duration.

                  Timestamp field must not be nil when the lock query type is
                  `ByLockTime`.

                  Querying locks with timestamp is currently not implemented.
            description: >-
              QueryCondition is a struct used for querying locks upon different
              conditions.

              Duration field and timestamp fields could be optional, depending
              on the

              LockQueryType.
          coins:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
            title: |-
              coins is the total amount of coins that have been in the gauge
              Can distribute multiple coin denoms
          start_time:
            type: string
            format: date-time
            title: start_time is the distribution start time
          num_epochs_paid_over:
            type: string
            format: uint64
            title: >-
              num_epochs_paid_over is the number of total epochs distribution
              will be

              completed over
          filled_epochs:
            type: string
            format: uint64
            title: >-
              filled_epochs is the number of epochs distribution has been
              completed on

              already
          distributed_coins:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
            title: distributed_coins are coins that have been distributed already
        description: >-
          Gauge is an object that stores and distributes yields to recipients
          who

          satisfy certain conditions. Currently gauges support conditions around
          the

          duration for which a given denom is locked.
        title: Gauge that corresponds to provided gague ID
  osmosis.incentives.GaugeWeight:
    type: object
    properties:
      gauge_id:
        type: string
        format: uint64
      weight_ratio:
        type: string
  osmosis.incentives.GaugesResponse:
    type: object
    properties:
      data:
        type: array
        items:
          type: object
          properties:
            id:
              type: string
              format: uint64
              title: id is the unique ID of a Gauge
            is_perpetual:
              type: boolean
              description: >-
                is_perpetual is a flag to show if it's a perpetual or
                non-perpetual gauge

                Non-perpetual gauges distribute their tokens equally per epoch
                while the

                gauge is in the active period. Perpetual gauges distribute all
                their tokens

                at a single time and only distribute their tokens again once the
                gauge is

                refilled, Intended for use with incentives that get refilled
                daily.
            distribute_to:
              title: |-
                distribute_to is where the gauge rewards are distributed to.
                This is queried via lock duration or by timestamp
              type: object
              properties:
                lock_query_type:
                  title: >-
                    LockQueryType is a type of lock query, ByLockDuration |
                    ByLockTime
                  type: string
                  enum:
                    - ByDuration
                    - ByTime
                    - NoLock
                    - ByGroup
                  default: ByDuration
                  description: |-
                    LockQueryType defines the type of the lock query that can
                    either be by duration or start time of the lock.
                denom:
                  type: string
                  title: >-
                    Denom represents the token denomination we are looking to
                    lock up
                duration:
                  type: string
                  description: >-
                    Duration is used to query locks with longer duration than
                    the specified

                    duration. Duration field must not be nil when the lock query
                    type is

                    `ByLockDuration`.
                timestamp:
                  type: string
                  format: date-time
                  description: >-
                    Timestamp is used by locks started before the specified
                    duration.

                    Timestamp field must not be nil when the lock query type is
                    `ByLockTime`.

                    Querying locks with timestamp is currently not implemented.
              description: >-
                QueryCondition is a struct used for querying locks upon
                different conditions.

                Duration field and timestamp fields could be optional, depending
                on the

                LockQueryType.
            coins:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
              title: |-
                coins is the total amount of coins that have been in the gauge
                Can distribute multiple coin denoms
            start_time:
              type: string
              format: date-time
              title: start_time is the distribution start time
            num_epochs_paid_over:
              type: string
              format: uint64
              title: >-
                num_epochs_paid_over is the number of total epochs distribution
                will be

                completed over
            filled_epochs:
              type: string
              format: uint64
              title: >-
                filled_epochs is the number of epochs distribution has been
                completed on

                already
            distributed_coins:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
              title: distributed_coins are coins that have been distributed already
          description: >-
            Gauge is an object that stores and distributes yields to recipients
            who

            satisfy certain conditions. Currently gauges support conditions
            around the

            duration for which a given denom is locked.
        title: Upcoming and active gauges
      pagination:
        title: Pagination defines pagination for the response
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
  osmosis.incentives.Group:
    type: object
    properties:
      group_gauge_id:
        type: string
        format: uint64
      internal_gauge_info:
        type: object
        properties:
          total_weight:
            type: string
          gauge_records:
            type: array
            items:
              type: object
              properties:
                gauge_id:
                  type: string
                  format: uint64
                current_weight:
                  type: string
                  description: >-
                    CurrentWeight is the current weight of this gauge being
                    distributed to for

                    this epoch. For instance, for volume splitting policy, this
                    stores the

                    volume generated in the last epoch of the linked pool.
                cumulative_weight:
                  type: string
                  description: >-
                    CumulativeWeight serves as a snapshot of the accumulator
                    being tracked

                    based on splitting policy. For instance, for volume
                    splitting policy, this

                    stores the cumulative volume for the linked pool at time of
                    last update.
        description: >-
          Note that while both InternalGaugeInfo and InternalGaugeRecord could

          technically be replaced by DistrInfo and DistrRecord from the
          pool-incentives

          module, we create separate types here to keep our abstractions clean
          and

          readable (pool-incentives distribution abstractions are used in a very

          specific way that does not directly relate to gauge logic). This also
          helps

          us sidestep a refactor to avoid an import cycle.
      splitting_policy:
        type: string
        enum:
          - ByVolume
        default: ByVolume
        title: >-
          SplittingPolicy determines the way we want to split incentives in
          groupGauges
    description: >-
      Group is an object that stores a 1:1 mapped gauge ID, a list of pool gauge

      info, and a splitting policy. These are grouped into a single abstraction
      to

      allow for distribution of group incentives to internal gauges according to

      the specified splitting policy.
  osmosis.incentives.GroupsWithGauge:
    type: object
    properties:
      group:
        type: object
        properties:
          group_gauge_id:
            type: string
            format: uint64
          internal_gauge_info:
            type: object
            properties:
              total_weight:
                type: string
              gauge_records:
                type: array
                items:
                  type: object
                  properties:
                    gauge_id:
                      type: string
                      format: uint64
                    current_weight:
                      type: string
                      description: >-
                        CurrentWeight is the current weight of this gauge being
                        distributed to for

                        this epoch. For instance, for volume splitting policy,
                        this stores the

                        volume generated in the last epoch of the linked pool.
                    cumulative_weight:
                      type: string
                      description: >-
                        CumulativeWeight serves as a snapshot of the accumulator
                        being tracked

                        based on splitting policy. For instance, for volume
                        splitting policy, this

                        stores the cumulative volume for the linked pool at time
                        of last update.
            description: >-
              Note that while both InternalGaugeInfo and InternalGaugeRecord
              could

              technically be replaced by DistrInfo and DistrRecord from the
              pool-incentives

              module, we create separate types here to keep our abstractions
              clean and

              readable (pool-incentives distribution abstractions are used in a
              very

              specific way that does not directly relate to gauge logic). This
              also helps

              us sidestep a refactor to avoid an import cycle.
          splitting_policy:
            type: string
            enum:
              - ByVolume
            default: ByVolume
            title: >-
              SplittingPolicy determines the way we want to split incentives in
              groupGauges
        description: >-
          Group is an object that stores a 1:1 mapped gauge ID, a list of pool
          gauge

          info, and a splitting policy. These are grouped into a single
          abstraction to

          allow for distribution of group incentives to internal gauges
          according to

          the specified splitting policy.
      gauge:
        type: object
        properties:
          id:
            type: string
            format: uint64
            title: id is the unique ID of a Gauge
          is_perpetual:
            type: boolean
            description: >-
              is_perpetual is a flag to show if it's a perpetual or
              non-perpetual gauge

              Non-perpetual gauges distribute their tokens equally per epoch
              while the

              gauge is in the active period. Perpetual gauges distribute all
              their tokens

              at a single time and only distribute their tokens again once the
              gauge is

              refilled, Intended for use with incentives that get refilled
              daily.
          distribute_to:
            title: |-
              distribute_to is where the gauge rewards are distributed to.
              This is queried via lock duration or by timestamp
            type: object
            properties:
              lock_query_type:
                title: >-
                  LockQueryType is a type of lock query, ByLockDuration |
                  ByLockTime
                type: string
                enum:
                  - ByDuration
                  - ByTime
                  - NoLock
                  - ByGroup
                default: ByDuration
                description: |-
                  LockQueryType defines the type of the lock query that can
                  either be by duration or start time of the lock.
              denom:
                type: string
                title: >-
                  Denom represents the token denomination we are looking to lock
                  up
              duration:
                type: string
                description: >-
                  Duration is used to query locks with longer duration than the
                  specified

                  duration. Duration field must not be nil when the lock query
                  type is

                  `ByLockDuration`.
              timestamp:
                type: string
                format: date-time
                description: >-
                  Timestamp is used by locks started before the specified
                  duration.

                  Timestamp field must not be nil when the lock query type is
                  `ByLockTime`.

                  Querying locks with timestamp is currently not implemented.
            description: >-
              QueryCondition is a struct used for querying locks upon different
              conditions.

              Duration field and timestamp fields could be optional, depending
              on the

              LockQueryType.
          coins:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
            title: |-
              coins is the total amount of coins that have been in the gauge
              Can distribute multiple coin denoms
          start_time:
            type: string
            format: date-time
            title: start_time is the distribution start time
          num_epochs_paid_over:
            type: string
            format: uint64
            title: >-
              num_epochs_paid_over is the number of total epochs distribution
              will be

              completed over
          filled_epochs:
            type: string
            format: uint64
            title: >-
              filled_epochs is the number of epochs distribution has been
              completed on

              already
          distributed_coins:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
            title: distributed_coins are coins that have been distributed already
        description: >-
          Gauge is an object that stores and distributes yields to recipients
          who

          satisfy certain conditions. Currently gauges support conditions around
          the

          duration for which a given denom is locked.
    description: |-
      GroupsWithGauge is a helper struct that stores a group and its
      associated gauge.
  osmosis.incentives.InternalGaugeInfo:
    type: object
    properties:
      total_weight:
        type: string
      gauge_records:
        type: array
        items:
          type: object
          properties:
            gauge_id:
              type: string
              format: uint64
            current_weight:
              type: string
              description: >-
                CurrentWeight is the current weight of this gauge being
                distributed to for

                this epoch. For instance, for volume splitting policy, this
                stores the

                volume generated in the last epoch of the linked pool.
            cumulative_weight:
              type: string
              description: >-
                CumulativeWeight serves as a snapshot of the accumulator being
                tracked

                based on splitting policy. For instance, for volume splitting
                policy, this

                stores the cumulative volume for the linked pool at time of last
                update.
    description: >-
      Note that while both InternalGaugeInfo and InternalGaugeRecord could

      technically be replaced by DistrInfo and DistrRecord from the
      pool-incentives

      module, we create separate types here to keep our abstractions clean and

      readable (pool-incentives distribution abstractions are used in a very

      specific way that does not directly relate to gauge logic). This also
      helps

      us sidestep a refactor to avoid an import cycle.
  osmosis.incentives.InternalGaugeRecord:
    type: object
    properties:
      gauge_id:
        type: string
        format: uint64
      current_weight:
        type: string
        description: >-
          CurrentWeight is the current weight of this gauge being distributed to
          for

          this epoch. For instance, for volume splitting policy, this stores the

          volume generated in the last epoch of the linked pool.
      cumulative_weight:
        type: string
        description: >-
          CumulativeWeight serves as a snapshot of the accumulator being tracked

          based on splitting policy. For instance, for volume splitting policy,
          this

          stores the cumulative volume for the linked pool at time of last
          update.
  osmosis.incentives.ModuleToDistributeCoinsResponse:
    type: object
    properties:
      coins:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
        title: Coins that have yet to be distributed
  osmosis.incentives.QueryAllGroupsGaugesResponse:
    type: object
    properties:
      gauges:
        type: array
        items:
          type: object
          properties:
            id:
              type: string
              format: uint64
              title: id is the unique ID of a Gauge
            is_perpetual:
              type: boolean
              description: >-
                is_perpetual is a flag to show if it's a perpetual or
                non-perpetual gauge

                Non-perpetual gauges distribute their tokens equally per epoch
                while the

                gauge is in the active period. Perpetual gauges distribute all
                their tokens

                at a single time and only distribute their tokens again once the
                gauge is

                refilled, Intended for use with incentives that get refilled
                daily.
            distribute_to:
              title: |-
                distribute_to is where the gauge rewards are distributed to.
                This is queried via lock duration or by timestamp
              type: object
              properties:
                lock_query_type:
                  title: >-
                    LockQueryType is a type of lock query, ByLockDuration |
                    ByLockTime
                  type: string
                  enum:
                    - ByDuration
                    - ByTime
                    - NoLock
                    - ByGroup
                  default: ByDuration
                  description: |-
                    LockQueryType defines the type of the lock query that can
                    either be by duration or start time of the lock.
                denom:
                  type: string
                  title: >-
                    Denom represents the token denomination we are looking to
                    lock up
                duration:
                  type: string
                  description: >-
                    Duration is used to query locks with longer duration than
                    the specified

                    duration. Duration field must not be nil when the lock query
                    type is

                    `ByLockDuration`.
                timestamp:
                  type: string
                  format: date-time
                  description: >-
                    Timestamp is used by locks started before the specified
                    duration.

                    Timestamp field must not be nil when the lock query type is
                    `ByLockTime`.

                    Querying locks with timestamp is currently not implemented.
              description: >-
                QueryCondition is a struct used for querying locks upon
                different conditions.

                Duration field and timestamp fields could be optional, depending
                on the

                LockQueryType.
            coins:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
              title: |-
                coins is the total amount of coins that have been in the gauge
                Can distribute multiple coin denoms
            start_time:
              type: string
              format: date-time
              title: start_time is the distribution start time
            num_epochs_paid_over:
              type: string
              format: uint64
              title: >-
                num_epochs_paid_over is the number of total epochs distribution
                will be

                completed over
            filled_epochs:
              type: string
              format: uint64
              title: >-
                filled_epochs is the number of epochs distribution has been
                completed on

                already
            distributed_coins:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
              title: distributed_coins are coins that have been distributed already
          description: >-
            Gauge is an object that stores and distributes yields to recipients
            who

            satisfy certain conditions. Currently gauges support conditions
            around the

            duration for which a given denom is locked.
  osmosis.incentives.QueryAllGroupsResponse:
    type: object
    properties:
      groups:
        type: array
        items:
          type: object
          properties:
            group_gauge_id:
              type: string
              format: uint64
            internal_gauge_info:
              type: object
              properties:
                total_weight:
                  type: string
                gauge_records:
                  type: array
                  items:
                    type: object
                    properties:
                      gauge_id:
                        type: string
                        format: uint64
                      current_weight:
                        type: string
                        description: >-
                          CurrentWeight is the current weight of this gauge
                          being distributed to for

                          this epoch. For instance, for volume splitting policy,
                          this stores the

                          volume generated in the last epoch of the linked pool.
                      cumulative_weight:
                        type: string
                        description: >-
                          CumulativeWeight serves as a snapshot of the
                          accumulator being tracked

                          based on splitting policy. For instance, for volume
                          splitting policy, this

                          stores the cumulative volume for the linked pool at
                          time of last update.
              description: >-
                Note that while both InternalGaugeInfo and InternalGaugeRecord
                could

                technically be replaced by DistrInfo and DistrRecord from the
                pool-incentives

                module, we create separate types here to keep our abstractions
                clean and

                readable (pool-incentives distribution abstractions are used in
                a very

                specific way that does not directly relate to gauge logic). This
                also helps

                us sidestep a refactor to avoid an import cycle.
            splitting_policy:
              type: string
              enum:
                - ByVolume
              default: ByVolume
              title: >-
                SplittingPolicy determines the way we want to split incentives
                in groupGauges
          description: >-
            Group is an object that stores a 1:1 mapped gauge ID, a list of pool
            gauge

            info, and a splitting policy. These are grouped into a single
            abstraction to

            allow for distribution of group incentives to internal gauges
            according to

            the specified splitting policy.
  osmosis.incentives.QueryAllGroupsWithGaugeResponse:
    type: object
    properties:
      groups_with_gauge:
        type: array
        items:
          type: object
          properties:
            group:
              type: object
              properties:
                group_gauge_id:
                  type: string
                  format: uint64
                internal_gauge_info:
                  type: object
                  properties:
                    total_weight:
                      type: string
                    gauge_records:
                      type: array
                      items:
                        type: object
                        properties:
                          gauge_id:
                            type: string
                            format: uint64
                          current_weight:
                            type: string
                            description: >-
                              CurrentWeight is the current weight of this gauge
                              being distributed to for

                              this epoch. For instance, for volume splitting
                              policy, this stores the

                              volume generated in the last epoch of the linked
                              pool.
                          cumulative_weight:
                            type: string
                            description: >-
                              CumulativeWeight serves as a snapshot of the
                              accumulator being tracked

                              based on splitting policy. For instance, for
                              volume splitting policy, this

                              stores the cumulative volume for the linked pool
                              at time of last update.
                  description: >-
                    Note that while both InternalGaugeInfo and
                    InternalGaugeRecord could

                    technically be replaced by DistrInfo and DistrRecord from
                    the pool-incentives

                    module, we create separate types here to keep our
                    abstractions clean and

                    readable (pool-incentives distribution abstractions are used
                    in a very

                    specific way that does not directly relate to gauge logic).
                    This also helps

                    us sidestep a refactor to avoid an import cycle.
                splitting_policy:
                  type: string
                  enum:
                    - ByVolume
                  default: ByVolume
                  title: >-
                    SplittingPolicy determines the way we want to split
                    incentives in groupGauges
              description: >-
                Group is an object that stores a 1:1 mapped gauge ID, a list of
                pool gauge

                info, and a splitting policy. These are grouped into a single
                abstraction to

                allow for distribution of group incentives to internal gauges
                according to

                the specified splitting policy.
            gauge:
              type: object
              properties:
                id:
                  type: string
                  format: uint64
                  title: id is the unique ID of a Gauge
                is_perpetual:
                  type: boolean
                  description: >-
                    is_perpetual is a flag to show if it's a perpetual or
                    non-perpetual gauge

                    Non-perpetual gauges distribute their tokens equally per
                    epoch while the

                    gauge is in the active period. Perpetual gauges distribute
                    all their tokens

                    at a single time and only distribute their tokens again once
                    the gauge is

                    refilled, Intended for use with incentives that get refilled
                    daily.
                distribute_to:
                  title: |-
                    distribute_to is where the gauge rewards are distributed to.
                    This is queried via lock duration or by timestamp
                  type: object
                  properties:
                    lock_query_type:
                      title: >-
                        LockQueryType is a type of lock query, ByLockDuration |
                        ByLockTime
                      type: string
                      enum:
                        - ByDuration
                        - ByTime
                        - NoLock
                        - ByGroup
                      default: ByDuration
                      description: >-
                        LockQueryType defines the type of the lock query that
                        can

                        either be by duration or start time of the lock.
                    denom:
                      type: string
                      title: >-
                        Denom represents the token denomination we are looking
                        to lock up
                    duration:
                      type: string
                      description: >-
                        Duration is used to query locks with longer duration
                        than the specified

                        duration. Duration field must not be nil when the lock
                        query type is

                        `ByLockDuration`.
                    timestamp:
                      type: string
                      format: date-time
                      description: >-
                        Timestamp is used by locks started before the specified
                        duration.

                        Timestamp field must not be nil when the lock query type
                        is `ByLockTime`.

                        Querying locks with timestamp is currently not
                        implemented.
                  description: >-
                    QueryCondition is a struct used for querying locks upon
                    different conditions.

                    Duration field and timestamp fields could be optional,
                    depending on the

                    LockQueryType.
                coins:
                  type: array
                  items:
                    type: object
                    properties:
                      denom:
                        type: string
                      amount:
                        type: string
                    description: >-
                      Coin defines a token with a denomination and an amount.


                      NOTE: The amount field is an Int which implements the
                      custom method

                      signatures required by gogoproto.
                  title: >-
                    coins is the total amount of coins that have been in the
                    gauge

                    Can distribute multiple coin denoms
                start_time:
                  type: string
                  format: date-time
                  title: start_time is the distribution start time
                num_epochs_paid_over:
                  type: string
                  format: uint64
                  title: >-
                    num_epochs_paid_over is the number of total epochs
                    distribution will be

                    completed over
                filled_epochs:
                  type: string
                  format: uint64
                  title: >-
                    filled_epochs is the number of epochs distribution has been
                    completed on

                    already
                distributed_coins:
                  type: array
                  items:
                    type: object
                    properties:
                      denom:
                        type: string
                      amount:
                        type: string
                    description: >-
                      Coin defines a token with a denomination and an amount.


                      NOTE: The amount field is an Int which implements the
                      custom method

                      signatures required by gogoproto.
                  title: >-
                    distributed_coins are coins that have been distributed
                    already
              description: >-
                Gauge is an object that stores and distributes yields to
                recipients who

                satisfy certain conditions. Currently gauges support conditions
                around the

                duration for which a given denom is locked.
          description: |-
            GroupsWithGauge is a helper struct that stores a group and its
            associated gauge.
  osmosis.incentives.QueryCurrentWeightByGroupGaugeIDResponse:
    type: object
    properties:
      gauge_weight:
        type: array
        items:
          type: object
          properties:
            gauge_id:
              type: string
              format: uint64
            weight_ratio:
              type: string
  osmosis.incentives.QueryGroupByGroupGaugeIDResponse:
    type: object
    properties:
      group:
        type: object
        properties:
          group_gauge_id:
            type: string
            format: uint64
          internal_gauge_info:
            type: object
            properties:
              total_weight:
                type: string
              gauge_records:
                type: array
                items:
                  type: object
                  properties:
                    gauge_id:
                      type: string
                      format: uint64
                    current_weight:
                      type: string
                      description: >-
                        CurrentWeight is the current weight of this gauge being
                        distributed to for

                        this epoch. For instance, for volume splitting policy,
                        this stores the

                        volume generated in the last epoch of the linked pool.
                    cumulative_weight:
                      type: string
                      description: >-
                        CumulativeWeight serves as a snapshot of the accumulator
                        being tracked

                        based on splitting policy. For instance, for volume
                        splitting policy, this

                        stores the cumulative volume for the linked pool at time
                        of last update.
            description: >-
              Note that while both InternalGaugeInfo and InternalGaugeRecord
              could

              technically be replaced by DistrInfo and DistrRecord from the
              pool-incentives

              module, we create separate types here to keep our abstractions
              clean and

              readable (pool-incentives distribution abstractions are used in a
              very

              specific way that does not directly relate to gauge logic). This
              also helps

              us sidestep a refactor to avoid an import cycle.
          splitting_policy:
            type: string
            enum:
              - ByVolume
            default: ByVolume
            title: >-
              SplittingPolicy determines the way we want to split incentives in
              groupGauges
        description: >-
          Group is an object that stores a 1:1 mapped gauge ID, a list of pool
          gauge

          info, and a splitting policy. These are grouped into a single
          abstraction to

          allow for distribution of group incentives to internal gauges
          according to

          the specified splitting policy.
  osmosis.incentives.QueryLockableDurationsResponse:
    type: object
    properties:
      lockable_durations:
        type: array
        items:
          type: string
        title: >-
          Time durations that users can lock coins for in order to receive
          rewards
  osmosis.incentives.RewardsEstResponse:
    type: object
    properties:
      coins:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
        title: |-
          Estimated coin rewards that will be received at provided address
          from specified locks between current time and end epoch
  osmosis.incentives.SplittingPolicy:
    type: string
    enum:
      - ByVolume
    default: ByVolume
    title: >-
      SplittingPolicy determines the way we want to split incentives in
      groupGauges
  osmosis.incentives.UpcomingGaugesPerDenomResponse:
    type: object
    properties:
      upcoming_gauges:
        type: array
        items:
          type: object
          properties:
            id:
              type: string
              format: uint64
              title: id is the unique ID of a Gauge
            is_perpetual:
              type: boolean
              description: >-
                is_perpetual is a flag to show if it's a perpetual or
                non-perpetual gauge

                Non-perpetual gauges distribute their tokens equally per epoch
                while the

                gauge is in the active period. Perpetual gauges distribute all
                their tokens

                at a single time and only distribute their tokens again once the
                gauge is

                refilled, Intended for use with incentives that get refilled
                daily.
            distribute_to:
              title: |-
                distribute_to is where the gauge rewards are distributed to.
                This is queried via lock duration or by timestamp
              type: object
              properties:
                lock_query_type:
                  title: >-
                    LockQueryType is a type of lock query, ByLockDuration |
                    ByLockTime
                  type: string
                  enum:
                    - ByDuration
                    - ByTime
                    - NoLock
                    - ByGroup
                  default: ByDuration
                  description: |-
                    LockQueryType defines the type of the lock query that can
                    either be by duration or start time of the lock.
                denom:
                  type: string
                  title: >-
                    Denom represents the token denomination we are looking to
                    lock up
                duration:
                  type: string
                  description: >-
                    Duration is used to query locks with longer duration than
                    the specified

                    duration. Duration field must not be nil when the lock query
                    type is

                    `ByLockDuration`.
                timestamp:
                  type: string
                  format: date-time
                  description: >-
                    Timestamp is used by locks started before the specified
                    duration.

                    Timestamp field must not be nil when the lock query type is
                    `ByLockTime`.

                    Querying locks with timestamp is currently not implemented.
              description: >-
                QueryCondition is a struct used for querying locks upon
                different conditions.

                Duration field and timestamp fields could be optional, depending
                on the

                LockQueryType.
            coins:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
              title: |-
                coins is the total amount of coins that have been in the gauge
                Can distribute multiple coin denoms
            start_time:
              type: string
              format: date-time
              title: start_time is the distribution start time
            num_epochs_paid_over:
              type: string
              format: uint64
              title: >-
                num_epochs_paid_over is the number of total epochs distribution
                will be

                completed over
            filled_epochs:
              type: string
              format: uint64
              title: >-
                filled_epochs is the number of epochs distribution has been
                completed on

                already
            distributed_coins:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
              title: distributed_coins are coins that have been distributed already
          description: >-
            Gauge is an object that stores and distributes yields to recipients
            who

            satisfy certain conditions. Currently gauges support conditions
            around the

            duration for which a given denom is locked.
        title: Upcoming gagues that match denom in query
      pagination:
        title: Pagination defines pagination for the response
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
  osmosis.incentives.UpcomingGaugesResponse:
    type: object
    properties:
      data:
        type: array
        items:
          type: object
          properties:
            id:
              type: string
              format: uint64
              title: id is the unique ID of a Gauge
            is_perpetual:
              type: boolean
              description: >-
                is_perpetual is a flag to show if it's a perpetual or
                non-perpetual gauge

                Non-perpetual gauges distribute their tokens equally per epoch
                while the

                gauge is in the active period. Perpetual gauges distribute all
                their tokens

                at a single time and only distribute their tokens again once the
                gauge is

                refilled, Intended for use with incentives that get refilled
                daily.
            distribute_to:
              title: |-
                distribute_to is where the gauge rewards are distributed to.
                This is queried via lock duration or by timestamp
              type: object
              properties:
                lock_query_type:
                  title: >-
                    LockQueryType is a type of lock query, ByLockDuration |
                    ByLockTime
                  type: string
                  enum:
                    - ByDuration
                    - ByTime
                    - NoLock
                    - ByGroup
                  default: ByDuration
                  description: |-
                    LockQueryType defines the type of the lock query that can
                    either be by duration or start time of the lock.
                denom:
                  type: string
                  title: >-
                    Denom represents the token denomination we are looking to
                    lock up
                duration:
                  type: string
                  description: >-
                    Duration is used to query locks with longer duration than
                    the specified

                    duration. Duration field must not be nil when the lock query
                    type is

                    `ByLockDuration`.
                timestamp:
                  type: string
                  format: date-time
                  description: >-
                    Timestamp is used by locks started before the specified
                    duration.

                    Timestamp field must not be nil when the lock query type is
                    `ByLockTime`.

                    Querying locks with timestamp is currently not implemented.
              description: >-
                QueryCondition is a struct used for querying locks upon
                different conditions.

                Duration field and timestamp fields could be optional, depending
                on the

                LockQueryType.
            coins:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
              title: |-
                coins is the total amount of coins that have been in the gauge
                Can distribute multiple coin denoms
            start_time:
              type: string
              format: date-time
              title: start_time is the distribution start time
            num_epochs_paid_over:
              type: string
              format: uint64
              title: >-
                num_epochs_paid_over is the number of total epochs distribution
                will be

                completed over
            filled_epochs:
              type: string
              format: uint64
              title: >-
                filled_epochs is the number of epochs distribution has been
                completed on

                already
            distributed_coins:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
              title: distributed_coins are coins that have been distributed already
          description: >-
            Gauge is an object that stores and distributes yields to recipients
            who

            satisfy certain conditions. Currently gauges support conditions
            around the

            duration for which a given denom is locked.
        title: Gauges whose distribution is upcoming
      pagination:
        title: Pagination defines pagination for the response
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
  osmosis.lockup.LockQueryType:
    type: string
    enum:
      - ByDuration
      - ByTime
      - NoLock
      - ByGroup
    default: ByDuration
    description: |-
      LockQueryType defines the type of the lock query that can
      either be by duration or start time of the lock.
  osmosis.lockup.QueryCondition:
    type: object
    properties:
      lock_query_type:
        title: LockQueryType is a type of lock query, ByLockDuration | ByLockTime
        type: string
        enum:
          - ByDuration
          - ByTime
          - NoLock
          - ByGroup
        default: ByDuration
        description: |-
          LockQueryType defines the type of the lock query that can
          either be by duration or start time of the lock.
      denom:
        type: string
        title: Denom represents the token denomination we are looking to lock up
      duration:
        type: string
        description: >-
          Duration is used to query locks with longer duration than the
          specified

          duration. Duration field must not be nil when the lock query type is

          `ByLockDuration`.
      timestamp:
        type: string
        format: date-time
        description: >-
          Timestamp is used by locks started before the specified duration.

          Timestamp field must not be nil when the lock query type is
          `ByLockTime`.

          Querying locks with timestamp is currently not implemented.
    description: >-
      QueryCondition is a struct used for querying locks upon different
      conditions.

      Duration field and timestamp fields could be optional, depending on the

      LockQueryType.
  osmosis.lockup.AccountLockedCoinsResponse:
    type: object
    properties:
      coins:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
  osmosis.lockup.AccountLockedDurationResponse:
    type: object
    properties:
      locks:
        type: array
        items:
          type: object
          properties:
            ID:
              type: string
              format: uint64
              description: >-
                ID is the unique id of the lock.

                The ID of the lock is decided upon lock creation, incrementing
                by 1 for

                every lock.
            owner:
              type: string
              description: |-
                Owner is the account address of the lock owner.
                Only the owner can modify the state of the lock.
            duration:
              type: string
              description: >-
                Duration is the time needed for a lock to mature after unlocking
                has

                started.
            end_time:
              type: string
              format: date-time
              description: >-
                EndTime refers to the time at which the lock would mature and
                get deleted.

                This value is first initialized when an unlock has started for
                the lock,

                end time being block time + duration.
            coins:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
              description: >-
                Coins are the tokens locked within the lock, kept in the module
                account.
            reward_receiver_address:
              type: string
              description: >-
                Reward Receiver Address is the address that would be receiving
                rewards for

                the incentives for the lock. This is set to owner by default and
                can be

                changed via separate msg.
          description: >-
            PeriodLock is a single lock unit by period defined by the x/lockup
            module.

            It's a record of a locked coin at a specific time. It stores owner,
            duration,

            unlock time and the number of coins locked. A state of a period lock
            is

            created upon lock creation, and deleted once the lock has been
            matured after

            the `duration` has passed since unbonding started.
  osmosis.lockup.AccountLockedLongerDurationDenomResponse:
    type: object
    properties:
      locks:
        type: array
        items:
          type: object
          properties:
            ID:
              type: string
              format: uint64
              description: >-
                ID is the unique id of the lock.

                The ID of the lock is decided upon lock creation, incrementing
                by 1 for

                every lock.
            owner:
              type: string
              description: |-
                Owner is the account address of the lock owner.
                Only the owner can modify the state of the lock.
            duration:
              type: string
              description: >-
                Duration is the time needed for a lock to mature after unlocking
                has

                started.
            end_time:
              type: string
              format: date-time
              description: >-
                EndTime refers to the time at which the lock would mature and
                get deleted.

                This value is first initialized when an unlock has started for
                the lock,

                end time being block time + duration.
            coins:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
              description: >-
                Coins are the tokens locked within the lock, kept in the module
                account.
            reward_receiver_address:
              type: string
              description: >-
                Reward Receiver Address is the address that would be receiving
                rewards for

                the incentives for the lock. This is set to owner by default and
                can be

                changed via separate msg.
          description: >-
            PeriodLock is a single lock unit by period defined by the x/lockup
            module.

            It's a record of a locked coin at a specific time. It stores owner,
            duration,

            unlock time and the number of coins locked. A state of a period lock
            is

            created upon lock creation, and deleted once the lock has been
            matured after

            the `duration` has passed since unbonding started.
  osmosis.lockup.AccountLockedLongerDurationNotUnlockingOnlyResponse:
    type: object
    properties:
      locks:
        type: array
        items:
          type: object
          properties:
            ID:
              type: string
              format: uint64
              description: >-
                ID is the unique id of the lock.

                The ID of the lock is decided upon lock creation, incrementing
                by 1 for

                every lock.
            owner:
              type: string
              description: |-
                Owner is the account address of the lock owner.
                Only the owner can modify the state of the lock.
            duration:
              type: string
              description: >-
                Duration is the time needed for a lock to mature after unlocking
                has

                started.
            end_time:
              type: string
              format: date-time
              description: >-
                EndTime refers to the time at which the lock would mature and
                get deleted.

                This value is first initialized when an unlock has started for
                the lock,

                end time being block time + duration.
            coins:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
              description: >-
                Coins are the tokens locked within the lock, kept in the module
                account.
            reward_receiver_address:
              type: string
              description: >-
                Reward Receiver Address is the address that would be receiving
                rewards for

                the incentives for the lock. This is set to owner by default and
                can be

                changed via separate msg.
          description: >-
            PeriodLock is a single lock unit by period defined by the x/lockup
            module.

            It's a record of a locked coin at a specific time. It stores owner,
            duration,

            unlock time and the number of coins locked. A state of a period lock
            is

            created upon lock creation, and deleted once the lock has been
            matured after

            the `duration` has passed since unbonding started.
  osmosis.lockup.AccountLockedLongerDurationResponse:
    type: object
    properties:
      locks:
        type: array
        items:
          type: object
          properties:
            ID:
              type: string
              format: uint64
              description: >-
                ID is the unique id of the lock.

                The ID of the lock is decided upon lock creation, incrementing
                by 1 for

                every lock.
            owner:
              type: string
              description: |-
                Owner is the account address of the lock owner.
                Only the owner can modify the state of the lock.
            duration:
              type: string
              description: >-
                Duration is the time needed for a lock to mature after unlocking
                has

                started.
            end_time:
              type: string
              format: date-time
              description: >-
                EndTime refers to the time at which the lock would mature and
                get deleted.

                This value is first initialized when an unlock has started for
                the lock,

                end time being block time + duration.
            coins:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
              description: >-
                Coins are the tokens locked within the lock, kept in the module
                account.
            reward_receiver_address:
              type: string
              description: >-
                Reward Receiver Address is the address that would be receiving
                rewards for

                the incentives for the lock. This is set to owner by default and
                can be

                changed via separate msg.
          description: >-
            PeriodLock is a single lock unit by period defined by the x/lockup
            module.

            It's a record of a locked coin at a specific time. It stores owner,
            duration,

            unlock time and the number of coins locked. A state of a period lock
            is

            created upon lock creation, and deleted once the lock has been
            matured after

            the `duration` has passed since unbonding started.
  osmosis.lockup.AccountLockedPastTimeDenomResponse:
    type: object
    properties:
      locks:
        type: array
        items:
          type: object
          properties:
            ID:
              type: string
              format: uint64
              description: >-
                ID is the unique id of the lock.

                The ID of the lock is decided upon lock creation, incrementing
                by 1 for

                every lock.
            owner:
              type: string
              description: |-
                Owner is the account address of the lock owner.
                Only the owner can modify the state of the lock.
            duration:
              type: string
              description: >-
                Duration is the time needed for a lock to mature after unlocking
                has

                started.
            end_time:
              type: string
              format: date-time
              description: >-
                EndTime refers to the time at which the lock would mature and
                get deleted.

                This value is first initialized when an unlock has started for
                the lock,

                end time being block time + duration.
            coins:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
              description: >-
                Coins are the tokens locked within the lock, kept in the module
                account.
            reward_receiver_address:
              type: string
              description: >-
                Reward Receiver Address is the address that would be receiving
                rewards for

                the incentives for the lock. This is set to owner by default and
                can be

                changed via separate msg.
          description: >-
            PeriodLock is a single lock unit by period defined by the x/lockup
            module.

            It's a record of a locked coin at a specific time. It stores owner,
            duration,

            unlock time and the number of coins locked. A state of a period lock
            is

            created upon lock creation, and deleted once the lock has been
            matured after

            the `duration` has passed since unbonding started.
  osmosis.lockup.AccountLockedPastTimeNotUnlockingOnlyResponse:
    type: object
    properties:
      locks:
        type: array
        items:
          type: object
          properties:
            ID:
              type: string
              format: uint64
              description: >-
                ID is the unique id of the lock.

                The ID of the lock is decided upon lock creation, incrementing
                by 1 for

                every lock.
            owner:
              type: string
              description: |-
                Owner is the account address of the lock owner.
                Only the owner can modify the state of the lock.
            duration:
              type: string
              description: >-
                Duration is the time needed for a lock to mature after unlocking
                has

                started.
            end_time:
              type: string
              format: date-time
              description: >-
                EndTime refers to the time at which the lock would mature and
                get deleted.

                This value is first initialized when an unlock has started for
                the lock,

                end time being block time + duration.
            coins:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
              description: >-
                Coins are the tokens locked within the lock, kept in the module
                account.
            reward_receiver_address:
              type: string
              description: >-
                Reward Receiver Address is the address that would be receiving
                rewards for

                the incentives for the lock. This is set to owner by default and
                can be

                changed via separate msg.
          description: >-
            PeriodLock is a single lock unit by period defined by the x/lockup
            module.

            It's a record of a locked coin at a specific time. It stores owner,
            duration,

            unlock time and the number of coins locked. A state of a period lock
            is

            created upon lock creation, and deleted once the lock has been
            matured after

            the `duration` has passed since unbonding started.
  osmosis.lockup.AccountLockedPastTimeResponse:
    type: object
    properties:
      locks:
        type: array
        items:
          type: object
          properties:
            ID:
              type: string
              format: uint64
              description: >-
                ID is the unique id of the lock.

                The ID of the lock is decided upon lock creation, incrementing
                by 1 for

                every lock.
            owner:
              type: string
              description: |-
                Owner is the account address of the lock owner.
                Only the owner can modify the state of the lock.
            duration:
              type: string
              description: >-
                Duration is the time needed for a lock to mature after unlocking
                has

                started.
            end_time:
              type: string
              format: date-time
              description: >-
                EndTime refers to the time at which the lock would mature and
                get deleted.

                This value is first initialized when an unlock has started for
                the lock,

                end time being block time + duration.
            coins:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
              description: >-
                Coins are the tokens locked within the lock, kept in the module
                account.
            reward_receiver_address:
              type: string
              description: >-
                Reward Receiver Address is the address that would be receiving
                rewards for

                the incentives for the lock. This is set to owner by default and
                can be

                changed via separate msg.
          description: >-
            PeriodLock is a single lock unit by period defined by the x/lockup
            module.

            It's a record of a locked coin at a specific time. It stores owner,
            duration,

            unlock time and the number of coins locked. A state of a period lock
            is

            created upon lock creation, and deleted once the lock has been
            matured after

            the `duration` has passed since unbonding started.
  osmosis.lockup.AccountUnlockableCoinsResponse:
    type: object
    properties:
      coins:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
  osmosis.lockup.AccountUnlockedBeforeTimeResponse:
    type: object
    properties:
      locks:
        type: array
        items:
          type: object
          properties:
            ID:
              type: string
              format: uint64
              description: >-
                ID is the unique id of the lock.

                The ID of the lock is decided upon lock creation, incrementing
                by 1 for

                every lock.
            owner:
              type: string
              description: |-
                Owner is the account address of the lock owner.
                Only the owner can modify the state of the lock.
            duration:
              type: string
              description: >-
                Duration is the time needed for a lock to mature after unlocking
                has

                started.
            end_time:
              type: string
              format: date-time
              description: >-
                EndTime refers to the time at which the lock would mature and
                get deleted.

                This value is first initialized when an unlock has started for
                the lock,

                end time being block time + duration.
            coins:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
              description: >-
                Coins are the tokens locked within the lock, kept in the module
                account.
            reward_receiver_address:
              type: string
              description: >-
                Reward Receiver Address is the address that would be receiving
                rewards for

                the incentives for the lock. This is set to owner by default and
                can be

                changed via separate msg.
          description: >-
            PeriodLock is a single lock unit by period defined by the x/lockup
            module.

            It's a record of a locked coin at a specific time. It stores owner,
            duration,

            unlock time and the number of coins locked. A state of a period lock
            is

            created upon lock creation, and deleted once the lock has been
            matured after

            the `duration` has passed since unbonding started.
  osmosis.lockup.AccountUnlockingCoinsResponse:
    type: object
    properties:
      coins:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
  osmosis.lockup.LockRewardReceiverResponse:
    type: object
    properties:
      reward_receiver:
        type: string
  osmosis.lockup.LockedDenomResponse:
    type: object
    properties:
      amount:
        type: string
  osmosis.lockup.LockedResponse:
    type: object
    properties:
      lock:
        type: object
        properties:
          ID:
            type: string
            format: uint64
            description: >-
              ID is the unique id of the lock.

              The ID of the lock is decided upon lock creation, incrementing by
              1 for

              every lock.
          owner:
            type: string
            description: |-
              Owner is the account address of the lock owner.
              Only the owner can modify the state of the lock.
          duration:
            type: string
            description: >-
              Duration is the time needed for a lock to mature after unlocking
              has

              started.
          end_time:
            type: string
            format: date-time
            description: >-
              EndTime refers to the time at which the lock would mature and get
              deleted.

              This value is first initialized when an unlock has started for the
              lock,

              end time being block time + duration.
          coins:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
            description: >-
              Coins are the tokens locked within the lock, kept in the module
              account.
          reward_receiver_address:
            type: string
            description: >-
              Reward Receiver Address is the address that would be receiving
              rewards for

              the incentives for the lock. This is set to owner by default and
              can be

              changed via separate msg.
        description: >-
          PeriodLock is a single lock unit by period defined by the x/lockup
          module.

          It's a record of a locked coin at a specific time. It stores owner,
          duration,

          unlock time and the number of coins locked. A state of a period lock
          is

          created upon lock creation, and deleted once the lock has been matured
          after

          the `duration` has passed since unbonding started.
  osmosis.lockup.ModuleBalanceResponse:
    type: object
    properties:
      coins:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
  osmosis.lockup.ModuleLockedAmountResponse:
    type: object
    properties:
      coins:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
  osmosis.lockup.NextLockIDResponse:
    type: object
    properties:
      lock_id:
        type: string
        format: uint64
  osmosis.lockup.Params:
    type: object
    properties:
      force_unlock_allowed_addresses:
        type: array
        items:
          type: string
  osmosis.lockup.PeriodLock:
    type: object
    properties:
      ID:
        type: string
        format: uint64
        description: >-
          ID is the unique id of the lock.

          The ID of the lock is decided upon lock creation, incrementing by 1
          for

          every lock.
      owner:
        type: string
        description: |-
          Owner is the account address of the lock owner.
          Only the owner can modify the state of the lock.
      duration:
        type: string
        description: |-
          Duration is the time needed for a lock to mature after unlocking has
          started.
      end_time:
        type: string
        format: date-time
        description: >-
          EndTime refers to the time at which the lock would mature and get
          deleted.

          This value is first initialized when an unlock has started for the
          lock,

          end time being block time + duration.
      coins:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
        description: >-
          Coins are the tokens locked within the lock, kept in the module
          account.
      reward_receiver_address:
        type: string
        description: >-
          Reward Receiver Address is the address that would be receiving rewards
          for

          the incentives for the lock. This is set to owner by default and can
          be

          changed via separate msg.
    description: >-
      PeriodLock is a single lock unit by period defined by the x/lockup module.

      It's a record of a locked coin at a specific time. It stores owner,
      duration,

      unlock time and the number of coins locked. A state of a period lock is

      created upon lock creation, and deleted once the lock has been matured
      after

      the `duration` has passed since unbonding started.
  osmosis.lockup.QueryParamsResponse:
    type: object
    properties:
      params:
        type: object
        properties:
          force_unlock_allowed_addresses:
            type: array
            items:
              type: string
  osmosis.lockup.SyntheticLock:
    type: object
    properties:
      underlying_lock_id:
        type: string
        format: uint64
        description: >-
          Underlying Lock ID is the underlying native lock's id for this
          synthetic

          lockup. A synthetic lock MUST have an underlying lock.
      synth_denom:
        type: string
        description: |-
          SynthDenom is the synthetic denom that is a combination of
          gamm share + bonding status + validator address.
      end_time:
        type: string
        format: date-time
        title: >-
          used for unbonding synthetic lockups, for active synthetic lockups,
          this

          value is set to uninitialized value
      duration:
        type: string
        description: |-
          Duration is the duration for a synthetic lock to mature
          at the point of unbonding has started.
    description: >-
      SyntheticLock is creating virtual lockup where new denom is combination of

      original denom and synthetic suffix. At the time of synthetic lockup
      creation

      and deletion, accumulation store is also being updated and on querier
      side,

      they can query as freely as native lockup.
  osmosis.lockup.SyntheticLockupByLockupIDResponse:
    type: object
    properties:
      synthetic_lock:
        type: object
        properties:
          underlying_lock_id:
            type: string
            format: uint64
            description: >-
              Underlying Lock ID is the underlying native lock's id for this
              synthetic

              lockup. A synthetic lock MUST have an underlying lock.
          synth_denom:
            type: string
            description: |-
              SynthDenom is the synthetic denom that is a combination of
              gamm share + bonding status + validator address.
          end_time:
            type: string
            format: date-time
            title: >-
              used for unbonding synthetic lockups, for active synthetic
              lockups, this

              value is set to uninitialized value
          duration:
            type: string
            description: |-
              Duration is the duration for a synthetic lock to mature
              at the point of unbonding has started.
        description: >-
          SyntheticLock is creating virtual lockup where new denom is
          combination of

          original denom and synthetic suffix. At the time of synthetic lockup
          creation

          and deletion, accumulation store is also being updated and on querier
          side,

          they can query as freely as native lockup.
  osmosis.lockup.SyntheticLockupsByLockupIDResponse:
    type: object
    properties:
      synthetic_locks:
        type: array
        items:
          type: object
          properties:
            underlying_lock_id:
              type: string
              format: uint64
              description: >-
                Underlying Lock ID is the underlying native lock's id for this
                synthetic

                lockup. A synthetic lock MUST have an underlying lock.
            synth_denom:
              type: string
              description: |-
                SynthDenom is the synthetic denom that is a combination of
                gamm share + bonding status + validator address.
            end_time:
              type: string
              format: date-time
              title: >-
                used for unbonding synthetic lockups, for active synthetic
                lockups, this

                value is set to uninitialized value
            duration:
              type: string
              description: |-
                Duration is the duration for a synthetic lock to mature
                at the point of unbonding has started.
          description: >-
            SyntheticLock is creating virtual lockup where new denom is
            combination of

            original denom and synthetic suffix. At the time of synthetic lockup
            creation

            and deletion, accumulation store is also being updated and on
            querier side,

            they can query as freely as native lockup.
  osmosis.mint.v1beta1.DistributionProportions:
    type: object
    properties:
      staking:
        type: string
        description: |-
          staking defines the proportion of the minted mint_denom that is to be
          allocated as staking rewards.
      pool_incentives:
        type: string
        description: >-
          pool_incentives defines the proportion of the minted mint_denom that
          is

          to be allocated as pool incentives.
      developer_rewards:
        type: string
        description: >-
          developer_rewards defines the proportion of the minted mint_denom that
          is

          to be allocated to developer rewards address.
      community_pool:
        type: string
        description: |-
          community_pool defines the proportion of the minted mint_denom that is
          to be allocated to the community pool.
    description: |-
      DistributionProportions defines the distribution proportions of the minted
      denom. In other words, defines which stakeholders will receive the minted
      denoms and how much.
  osmosis.mint.v1beta1.Params:
    type: object
    properties:
      mint_denom:
        type: string
        description: mint_denom is the denom of the coin to mint.
      genesis_epoch_provisions:
        type: string
        description: genesis_epoch_provisions epoch provisions from the first epoch.
      epoch_identifier:
        type: string
        description: epoch_identifier mint epoch identifier e.g. (day, week).
      reduction_period_in_epochs:
        type: string
        format: int64
        description: |-
          reduction_period_in_epochs the number of epochs it takes
          to reduce the rewards.
      reduction_factor:
        type: string
        description: |-
          reduction_factor is the reduction multiplier to execute
          at the end of each period set by reduction_period_in_epochs.
      distribution_proportions:
        description: >-
          distribution_proportions defines the distribution proportions of the
          minted

          denom. In other words, defines which stakeholders will receive the
          minted

          denoms and how much.
        type: object
        properties:
          staking:
            type: string
            description: >-
              staking defines the proportion of the minted mint_denom that is to
              be

              allocated as staking rewards.
          pool_incentives:
            type: string
            description: >-
              pool_incentives defines the proportion of the minted mint_denom
              that is

              to be allocated as pool incentives.
          developer_rewards:
            type: string
            description: >-
              developer_rewards defines the proportion of the minted mint_denom
              that is

              to be allocated to developer rewards address.
          community_pool:
            type: string
            description: >-
              community_pool defines the proportion of the minted mint_denom
              that is

              to be allocated to the community pool.
      weighted_developer_rewards_receivers:
        type: array
        items:
          type: object
          properties:
            address:
              type: string
            weight:
              type: string
          description: |-
            WeightedAddress represents an address with a weight assigned to it.
            The weight is used to determine the proportion of the total minted
            tokens to be minted to the address.
        description: >-
          weighted_developer_rewards_receivers is the address to receive
          developer

          rewards with weights assignedt to each address. The final amount that
          each

          address receives is: epoch_provisions *

          distribution_proportions.developer_rewards * Address's Weight.
      minting_rewards_distribution_start_epoch:
        type: string
        format: int64
        title: >-
          minting_rewards_distribution_start_epoch start epoch to distribute
          minting

          rewards
    description: Params holds parameters for the x/mint module.
  osmosis.mint.v1beta1.QueryEpochProvisionsResponse:
    type: object
    properties:
      epoch_provisions:
        type: string
        format: byte
        description: epoch_provisions is the current minting per epoch provisions value.
    description: |-
      QueryEpochProvisionsResponse is the response type for the
      Query/EpochProvisions RPC method.
  osmosis.mint.v1beta1.QueryParamsResponse:
    type: object
    properties:
      params:
        description: params defines the parameters of the module.
        type: object
        properties:
          mint_denom:
            type: string
            description: mint_denom is the denom of the coin to mint.
          genesis_epoch_provisions:
            type: string
            description: genesis_epoch_provisions epoch provisions from the first epoch.
          epoch_identifier:
            type: string
            description: epoch_identifier mint epoch identifier e.g. (day, week).
          reduction_period_in_epochs:
            type: string
            format: int64
            description: |-
              reduction_period_in_epochs the number of epochs it takes
              to reduce the rewards.
          reduction_factor:
            type: string
            description: |-
              reduction_factor is the reduction multiplier to execute
              at the end of each period set by reduction_period_in_epochs.
          distribution_proportions:
            description: >-
              distribution_proportions defines the distribution proportions of
              the minted

              denom. In other words, defines which stakeholders will receive the
              minted

              denoms and how much.
            type: object
            properties:
              staking:
                type: string
                description: >-
                  staking defines the proportion of the minted mint_denom that
                  is to be

                  allocated as staking rewards.
              pool_incentives:
                type: string
                description: >-
                  pool_incentives defines the proportion of the minted
                  mint_denom that is

                  to be allocated as pool incentives.
              developer_rewards:
                type: string
                description: >-
                  developer_rewards defines the proportion of the minted
                  mint_denom that is

                  to be allocated to developer rewards address.
              community_pool:
                type: string
                description: >-
                  community_pool defines the proportion of the minted mint_denom
                  that is

                  to be allocated to the community pool.
          weighted_developer_rewards_receivers:
            type: array
            items:
              type: object
              properties:
                address:
                  type: string
                weight:
                  type: string
              description: >-
                WeightedAddress represents an address with a weight assigned to
                it.

                The weight is used to determine the proportion of the total
                minted

                tokens to be minted to the address.
            description: >-
              weighted_developer_rewards_receivers is the address to receive
              developer

              rewards with weights assignedt to each address. The final amount
              that each

              address receives is: epoch_provisions *

              distribution_proportions.developer_rewards * Address's Weight.
          minting_rewards_distribution_start_epoch:
            type: string
            format: int64
            title: >-
              minting_rewards_distribution_start_epoch start epoch to distribute
              minting

              rewards
    description: QueryParamsResponse is the response type for the Query/Params RPC method.
  osmosis.mint.v1beta1.WeightedAddress:
    type: object
    properties:
      address:
        type: string
      weight:
        type: string
    description: |-
      WeightedAddress represents an address with a weight assigned to it.
      The weight is used to determine the proportion of the total minted
      tokens to be minted to the address.
  osmosis.poolincentives.v1beta1.DistrInfo:
    type: object
    properties:
      total_weight:
        type: string
      records:
        type: array
        items:
          type: object
          properties:
            gauge_id:
              type: string
              format: uint64
            weight:
              type: string
  osmosis.poolincentives.v1beta1.DistrRecord:
    type: object
    properties:
      gauge_id:
        type: string
        format: uint64
      weight:
        type: string
  osmosis.poolincentives.v1beta1.IncentivizedPool:
    type: object
    properties:
      pool_id:
        type: string
        format: uint64
      lockable_duration:
        type: string
      gauge_id:
        type: string
        format: uint64
  osmosis.poolincentives.v1beta1.Params:
    type: object
    properties:
      minted_denom:
        type: string
        description: >-
          minted_denom is the denomination of the coin expected to be minted by
          the

          minting module. Pool-incentives module doesn’t actually mint the coin

          itself, but rather manages the distribution of coins that matches the

          defined minted_denom.
  osmosis.poolincentives.v1beta1.QueryDistrInfoResponse:
    type: object
    properties:
      distr_info:
        type: object
        properties:
          total_weight:
            type: string
          records:
            type: array
            items:
              type: object
              properties:
                gauge_id:
                  type: string
                  format: uint64
                weight:
                  type: string
  osmosis.poolincentives.v1beta1.QueryExternalIncentiveGaugesResponse:
    type: object
    properties:
      data:
        type: array
        items:
          type: object
          properties:
            id:
              type: string
              format: uint64
              title: id is the unique ID of a Gauge
            is_perpetual:
              type: boolean
              description: >-
                is_perpetual is a flag to show if it's a perpetual or
                non-perpetual gauge

                Non-perpetual gauges distribute their tokens equally per epoch
                while the

                gauge is in the active period. Perpetual gauges distribute all
                their tokens

                at a single time and only distribute their tokens again once the
                gauge is

                refilled, Intended for use with incentives that get refilled
                daily.
            distribute_to:
              title: |-
                distribute_to is where the gauge rewards are distributed to.
                This is queried via lock duration or by timestamp
              type: object
              properties:
                lock_query_type:
                  title: >-
                    LockQueryType is a type of lock query, ByLockDuration |
                    ByLockTime
                  type: string
                  enum:
                    - ByDuration
                    - ByTime
                    - NoLock
                    - ByGroup
                  default: ByDuration
                  description: |-
                    LockQueryType defines the type of the lock query that can
                    either be by duration or start time of the lock.
                denom:
                  type: string
                  title: >-
                    Denom represents the token denomination we are looking to
                    lock up
                duration:
                  type: string
                  description: >-
                    Duration is used to query locks with longer duration than
                    the specified

                    duration. Duration field must not be nil when the lock query
                    type is

                    `ByLockDuration`.
                timestamp:
                  type: string
                  format: date-time
                  description: >-
                    Timestamp is used by locks started before the specified
                    duration.

                    Timestamp field must not be nil when the lock query type is
                    `ByLockTime`.

                    Querying locks with timestamp is currently not implemented.
              description: >-
                QueryCondition is a struct used for querying locks upon
                different conditions.

                Duration field and timestamp fields could be optional, depending
                on the

                LockQueryType.
            coins:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
              title: |-
                coins is the total amount of coins that have been in the gauge
                Can distribute multiple coin denoms
            start_time:
              type: string
              format: date-time
              title: start_time is the distribution start time
            num_epochs_paid_over:
              type: string
              format: uint64
              title: >-
                num_epochs_paid_over is the number of total epochs distribution
                will be

                completed over
            filled_epochs:
              type: string
              format: uint64
              title: >-
                filled_epochs is the number of epochs distribution has been
                completed on

                already
            distributed_coins:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
              title: distributed_coins are coins that have been distributed already
          description: >-
            Gauge is an object that stores and distributes yields to recipients
            who

            satisfy certain conditions. Currently gauges support conditions
            around the

            duration for which a given denom is locked.
  osmosis.poolincentives.v1beta1.QueryGaugeIdsResponse:
    type: object
    properties:
      gauge_ids_with_duration:
        type: array
        items:
          type: object
          properties:
            gauge_id:
              type: string
              format: uint64
            duration:
              type: string
            gauge_incentive_percentage:
              type: string
  osmosis.poolincentives.v1beta1.QueryGaugeIdsResponse.GaugeIdWithDuration:
    type: object
    properties:
      gauge_id:
        type: string
        format: uint64
      duration:
        type: string
      gauge_incentive_percentage:
        type: string
  osmosis.poolincentives.v1beta1.QueryIncentivizedPoolsResponse:
    type: object
    properties:
      incentivized_pools:
        type: array
        items:
          type: object
          properties:
            pool_id:
              type: string
              format: uint64
            lockable_duration:
              type: string
            gauge_id:
              type: string
              format: uint64
  osmosis.poolincentives.v1beta1.QueryLockableDurationsResponse:
    type: object
    properties:
      lockable_durations:
        type: array
        items:
          type: string
  osmosis.poolincentives.v1beta1.QueryParamsResponse:
    type: object
    properties:
      params:
        type: object
        properties:
          minted_denom:
            type: string
            description: >-
              minted_denom is the denomination of the coin expected to be minted
              by the

              minting module. Pool-incentives module doesn’t actually mint the
              coin

              itself, but rather manages the distribution of coins that matches
              the

              defined minted_denom.
  cosmos.staking.v1beta1.Delegation:
    type: object
    properties:
      delegator_address:
        type: string
        description: delegator_address is the bech32-encoded address of the delegator.
      validator_address:
        type: string
        description: validator_address is the bech32-encoded address of the validator.
      shares:
        type: string
        description: shares define the delegation shares received.
    description: |-
      Delegation represents the bond with tokens held by an account. It is
      owned by one delegator, and is associated with the voting power of one
      validator.
  cosmos.staking.v1beta1.DelegationResponse:
    type: object
    properties:
      delegation:
        type: object
        properties:
          delegator_address:
            type: string
            description: delegator_address is the bech32-encoded address of the delegator.
          validator_address:
            type: string
            description: validator_address is the bech32-encoded address of the validator.
          shares:
            type: string
            description: shares define the delegation shares received.
        description: |-
          Delegation represents the bond with tokens held by an account. It is
          owned by one delegator, and is associated with the voting power of one
          validator.
      balance:
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
        description: |-
          Coin defines a token with a denomination and an amount.

          NOTE: The amount field is an Int which implements the custom method
          signatures required by gogoproto.
    description: |-
      DelegationResponse is equivalent to Delegation except that it contains a
      balance in addition to shares which is more suitable for client responses.
  osmosis.superfluid.AllAssetsResponse:
    type: object
    properties:
      assets:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            asset_type:
              title: >-
                AssetType indicates whether the superfluid asset is a native
                token or an lp

                share
              type: string
              enum:
                - SuperfluidAssetTypeNative
                - SuperfluidAssetTypeLPShare
                - SuperfluidAssetTypeConcentratedShare
              default: SuperfluidAssetTypeNative
          title: >-
            SuperfluidAsset stores the pair of superfluid asset type and denom
            pair
  osmosis.superfluid.AllIntermediaryAccountsResponse:
    type: object
    properties:
      accounts:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            val_addr:
              type: string
            gauge_id:
              type: string
              format: uint64
            address:
              type: string
      pagination:
        type: object
        properties:
          next_key:
            type: string
            format: byte
            description: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently. It will be empty if
              there are no more results.
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
  osmosis.superfluid.AssetMultiplierResponse:
    type: object
    properties:
      osmo_equivalent_multiplier:
        type: object
        properties:
          epoch_number:
            type: string
            format: int64
          denom:
            type: string
            title: superfluid asset denom, can be LP token or native token
          multiplier:
            type: string
        description: >-
          The Osmo-Equivalent-Multiplier Record for epoch N refers to the osmo
          worth we

          treat an LP share as having, for all of epoch N. Eventually this is
          intended

          to be set as the Time-weighted-average-osmo-backing for the entire
          duration

          of epoch N-1. (Thereby locking what's in use for epoch N as based on
          the

          prior epochs rewards) However for now, this is not the TWAP but
          instead the

          spot price at the boundary. For different types of assets in the
          future, it

          could change.
  osmosis.superfluid.AssetTypeResponse:
    type: object
    properties:
      asset_type:
        type: string
        enum:
          - SuperfluidAssetTypeNative
          - SuperfluidAssetTypeLPShare
          - SuperfluidAssetTypeConcentratedShare
        default: SuperfluidAssetTypeNative
        title: |-
          SuperfluidAssetType indicates whether the superfluid asset is
          a native token, lp share of a pool, or concentrated share of a pool
  osmosis.superfluid.ConcentratedPoolUserPositionRecord:
    type: object
    properties:
      validator_address:
        type: string
      position_id:
        type: string
        format: uint64
      lock_id:
        type: string
        format: uint64
      synthetic_lock:
        type: object
        properties:
          underlying_lock_id:
            type: string
            format: uint64
            description: >-
              Underlying Lock ID is the underlying native lock's id for this
              synthetic

              lockup. A synthetic lock MUST have an underlying lock.
          synth_denom:
            type: string
            description: |-
              SynthDenom is the synthetic denom that is a combination of
              gamm share + bonding status + validator address.
          end_time:
            type: string
            format: date-time
            title: >-
              used for unbonding synthetic lockups, for active synthetic
              lockups, this

              value is set to uninitialized value
          duration:
            type: string
            description: |-
              Duration is the duration for a synthetic lock to mature
              at the point of unbonding has started.
        description: >-
          SyntheticLock is creating virtual lockup where new denom is
          combination of

          original denom and synthetic suffix. At the time of synthetic lockup
          creation

          and deletion, accumulation store is also being updated and on querier
          side,

          they can query as freely as native lockup.
      delegation_amount:
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
        description: |-
          Coin defines a token with a denomination and an amount.

          NOTE: The amount field is an Int which implements the custom method
          signatures required by gogoproto.
      equivalent_staked_amount:
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
        description: |-
          Coin defines a token with a denomination and an amount.

          NOTE: The amount field is an Int which implements the custom method
          signatures required by gogoproto.
  osmosis.superfluid.ConnectedIntermediaryAccountResponse:
    type: object
    properties:
      account:
        type: object
        properties:
          denom:
            type: string
          val_addr:
            type: string
          gauge_id:
            type: string
            format: uint64
          address:
            type: string
  osmosis.superfluid.Delegations:
    type: object
    properties:
      val_addr:
        type: string
      amount_sfsd:
        type: string
      osmo_equivalent:
        type: string
  osmosis.superfluid.EstimateSuperfluidDelegatedAmountByValidatorDenomResponse:
    type: object
    properties:
      total_delegated_coins:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
  osmosis.superfluid.OsmoEquivalentMultiplierRecord:
    type: object
    properties:
      epoch_number:
        type: string
        format: int64
      denom:
        type: string
        title: superfluid asset denom, can be LP token or native token
      multiplier:
        type: string
    description: >-
      The Osmo-Equivalent-Multiplier Record for epoch N refers to the osmo worth
      we

      treat an LP share as having, for all of epoch N. Eventually this is
      intended

      to be set as the Time-weighted-average-osmo-backing for the entire
      duration

      of epoch N-1. (Thereby locking what's in use for epoch N as based on the

      prior epochs rewards) However for now, this is not the TWAP but instead
      the

      spot price at the boundary. For different types of assets in the future,
      it

      could change.
  osmosis.superfluid.Params:
    type: object
    properties:
      minimum_risk_factor:
        type: string
        description: >-
          minimum_risk_factor is to be cut on OSMO equivalent value of lp tokens
          for

          superfluid staking, default: 5%. The minimum risk factor works

          to counter-balance the staked amount on chain's exposure to various
          asset

          volatilities, and have base staking be 'resistant' to volatility.
    title: Params holds parameters for the superfluid module
  osmosis.superfluid.QueryParamsResponse:
    type: object
    properties:
      params:
        description: params defines the parameters of the module.
        type: object
        properties:
          minimum_risk_factor:
            type: string
            description: >-
              minimum_risk_factor is to be cut on OSMO equivalent value of lp
              tokens for

              superfluid staking, default: 5%. The minimum risk factor works

              to counter-balance the staked amount on chain's exposure to
              various asset

              volatilities, and have base staking be 'resistant' to volatility.
        title: Params holds parameters for the superfluid module
  osmosis.superfluid.QueryRestSupplyResponse:
    type: object
    properties:
      amount:
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
        description: |-
          Coin defines a token with a denomination and an amount.

          NOTE: The amount field is an Int which implements the custom method
          signatures required by gogoproto.
  osmosis.superfluid.QueryTotalDelegationByDelegatorResponse:
    type: object
    properties:
      superfluid_delegation_records:
        type: array
        items:
          type: object
          properties:
            delegator_address:
              type: string
            validator_address:
              type: string
            delegation_amount:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
            equivalent_staked_amount:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
          description: >-
            SuperfluidDelegationRecord is a struct used to indicate superfluid

            delegations of an account in the state machine in a user friendly
            form.
      delegation_response:
        type: array
        items:
          type: object
          properties:
            delegation:
              type: object
              properties:
                delegator_address:
                  type: string
                  description: >-
                    delegator_address is the bech32-encoded address of the
                    delegator.
                validator_address:
                  type: string
                  description: >-
                    validator_address is the bech32-encoded address of the
                    validator.
                shares:
                  type: string
                  description: shares define the delegation shares received.
              description: >-
                Delegation represents the bond with tokens held by an account.
                It is

                owned by one delegator, and is associated with the voting power
                of one

                validator.
            balance:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
          description: >-
            DelegationResponse is equivalent to Delegation except that it
            contains a

            balance in addition to shares which is more suitable for client
            responses.
      total_delegated_coins:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
      total_equivalent_staked_amount:
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
        description: |-
          Coin defines a token with a denomination and an amount.

          NOTE: The amount field is an Int which implements the custom method
          signatures required by gogoproto.
  osmosis.superfluid.QueryTotalDelegationByValidatorForDenomResponse:
    type: object
    properties:
      assets:
        type: array
        items:
          type: object
          properties:
            val_addr:
              type: string
            amount_sfsd:
              type: string
            osmo_equivalent:
              type: string
  osmosis.superfluid.QueryUnpoolWhitelistResponse:
    type: object
    properties:
      pool_ids:
        type: array
        items:
          type: string
          format: uint64
  osmosis.superfluid.SuperfluidAsset:
    type: object
    properties:
      denom:
        type: string
      asset_type:
        title: >-
          AssetType indicates whether the superfluid asset is a native token or
          an lp

          share
        type: string
        enum:
          - SuperfluidAssetTypeNative
          - SuperfluidAssetTypeLPShare
          - SuperfluidAssetTypeConcentratedShare
        default: SuperfluidAssetTypeNative
    title: SuperfluidAsset stores the pair of superfluid asset type and denom pair
  osmosis.superfluid.SuperfluidAssetType:
    type: string
    enum:
      - SuperfluidAssetTypeNative
      - SuperfluidAssetTypeLPShare
      - SuperfluidAssetTypeConcentratedShare
    default: SuperfluidAssetTypeNative
    title: |-
      SuperfluidAssetType indicates whether the superfluid asset is
      a native token, lp share of a pool, or concentrated share of a pool
  osmosis.superfluid.SuperfluidDelegationAmountResponse:
    type: object
    properties:
      amount:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
  osmosis.superfluid.SuperfluidDelegationRecord:
    type: object
    properties:
      delegator_address:
        type: string
      validator_address:
        type: string
      delegation_amount:
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
        description: |-
          Coin defines a token with a denomination and an amount.

          NOTE: The amount field is an Int which implements the custom method
          signatures required by gogoproto.
      equivalent_staked_amount:
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
        description: |-
          Coin defines a token with a denomination and an amount.

          NOTE: The amount field is an Int which implements the custom method
          signatures required by gogoproto.
    description: |-
      SuperfluidDelegationRecord is a struct used to indicate superfluid
      delegations of an account in the state machine in a user friendly form.
  osmosis.superfluid.SuperfluidDelegationsByDelegatorResponse:
    type: object
    properties:
      superfluid_delegation_records:
        type: array
        items:
          type: object
          properties:
            delegator_address:
              type: string
            validator_address:
              type: string
            delegation_amount:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
            equivalent_staked_amount:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
          description: >-
            SuperfluidDelegationRecord is a struct used to indicate superfluid

            delegations of an account in the state machine in a user friendly
            form.
      total_delegated_coins:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
      total_equivalent_staked_amount:
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
        description: |-
          Coin defines a token with a denomination and an amount.

          NOTE: The amount field is an Int which implements the custom method
          signatures required by gogoproto.
  osmosis.superfluid.SuperfluidDelegationsByValidatorDenomResponse:
    type: object
    properties:
      superfluid_delegation_records:
        type: array
        items:
          type: object
          properties:
            delegator_address:
              type: string
            validator_address:
              type: string
            delegation_amount:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
            equivalent_staked_amount:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
          description: >-
            SuperfluidDelegationRecord is a struct used to indicate superfluid

            delegations of an account in the state machine in a user friendly
            form.
  osmosis.superfluid.SuperfluidIntermediaryAccountInfo:
    type: object
    properties:
      denom:
        type: string
      val_addr:
        type: string
      gauge_id:
        type: string
        format: uint64
      address:
        type: string
  osmosis.superfluid.SuperfluidUndelegationsByDelegatorResponse:
    type: object
    properties:
      superfluid_delegation_records:
        type: array
        items:
          type: object
          properties:
            delegator_address:
              type: string
            validator_address:
              type: string
            delegation_amount:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
            equivalent_staked_amount:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
          description: >-
            SuperfluidDelegationRecord is a struct used to indicate superfluid

            delegations of an account in the state machine in a user friendly
            form.
      total_undelegated_coins:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
      synthetic_locks:
        type: array
        items:
          type: object
          properties:
            underlying_lock_id:
              type: string
              format: uint64
              description: >-
                Underlying Lock ID is the underlying native lock's id for this
                synthetic

                lockup. A synthetic lock MUST have an underlying lock.
            synth_denom:
              type: string
              description: |-
                SynthDenom is the synthetic denom that is a combination of
                gamm share + bonding status + validator address.
            end_time:
              type: string
              format: date-time
              title: >-
                used for unbonding synthetic lockups, for active synthetic
                lockups, this

                value is set to uninitialized value
            duration:
              type: string
              description: |-
                Duration is the duration for a synthetic lock to mature
                at the point of unbonding has started.
          description: >-
            SyntheticLock is creating virtual lockup where new denom is
            combination of

            original denom and synthetic suffix. At the time of synthetic lockup
            creation

            and deletion, accumulation store is also being updated and on
            querier side,

            they can query as freely as native lockup.
  osmosis.superfluid.TotalSuperfluidDelegationsResponse:
    type: object
    properties:
      total_delegations:
        type: string
  osmosis.superfluid.UserConcentratedSuperfluidPositionsDelegatedResponse:
    type: object
    properties:
      cl_pool_user_position_records:
        type: array
        items:
          type: object
          properties:
            validator_address:
              type: string
            position_id:
              type: string
              format: uint64
            lock_id:
              type: string
              format: uint64
            synthetic_lock:
              type: object
              properties:
                underlying_lock_id:
                  type: string
                  format: uint64
                  description: >-
                    Underlying Lock ID is the underlying native lock's id for
                    this synthetic

                    lockup. A synthetic lock MUST have an underlying lock.
                synth_denom:
                  type: string
                  description: |-
                    SynthDenom is the synthetic denom that is a combination of
                    gamm share + bonding status + validator address.
                end_time:
                  type: string
                  format: date-time
                  title: >-
                    used for unbonding synthetic lockups, for active synthetic
                    lockups, this

                    value is set to uninitialized value
                duration:
                  type: string
                  description: |-
                    Duration is the duration for a synthetic lock to mature
                    at the point of unbonding has started.
              description: >-
                SyntheticLock is creating virtual lockup where new denom is
                combination of

                original denom and synthetic suffix. At the time of synthetic
                lockup creation

                and deletion, accumulation store is also being updated and on
                querier side,

                they can query as freely as native lockup.
            delegation_amount:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
            equivalent_staked_amount:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
  osmosis.superfluid.UserConcentratedSuperfluidPositionsUndelegatingResponse:
    type: object
    properties:
      cl_pool_user_position_records:
        type: array
        items:
          type: object
          properties:
            validator_address:
              type: string
            position_id:
              type: string
              format: uint64
            lock_id:
              type: string
              format: uint64
            synthetic_lock:
              type: object
              properties:
                underlying_lock_id:
                  type: string
                  format: uint64
                  description: >-
                    Underlying Lock ID is the underlying native lock's id for
                    this synthetic

                    lockup. A synthetic lock MUST have an underlying lock.
                synth_denom:
                  type: string
                  description: |-
                    SynthDenom is the synthetic denom that is a combination of
                    gamm share + bonding status + validator address.
                end_time:
                  type: string
                  format: date-time
                  title: >-
                    used for unbonding synthetic lockups, for active synthetic
                    lockups, this

                    value is set to uninitialized value
                duration:
                  type: string
                  description: |-
                    Duration is the duration for a synthetic lock to mature
                    at the point of unbonding has started.
              description: >-
                SyntheticLock is creating virtual lockup where new denom is
                combination of

                original denom and synthetic suffix. At the time of synthetic
                lockup creation

                and deletion, accumulation store is also being updated and on
                querier side,

                they can query as freely as native lockup.
            delegation_amount:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
            equivalent_staked_amount:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
  osmosis.tokenfactory.v1beta1.DenomAuthorityMetadata:
    type: object
    properties:
      admin:
        type: string
        title: Can be empty for no admin, or a valid osmosis address
    description: |-
      DenomAuthorityMetadata specifies metadata for addresses that have specific
      capabilities over a token factory denom. Right now there is only one Admin
      permission, but is planned to be extended to the future.
  osmosis.tokenfactory.v1beta1.Params:
    type: object
    properties:
      denom_creation_fee:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
        description: >-
          DenomCreationFee defines the fee to be charged on the creation of a
          new

          denom. The fee is drawn from the MsgCreateDenom's sender account, and

          transferred to the community pool.
      denom_creation_gas_consume:
        type: string
        format: uint64
        description: |-
          DenomCreationGasConsume defines the gas cost for creating a new denom.
          This is intended as a spam deterrence mechanism.

          See: https://github.com/CosmWasm/token-factory/issues/11
    description: Params defines the parameters for the tokenfactory module.
  osmosis.tokenfactory.v1beta1.QueryAllBeforeSendHooksAddressesResponse:
    type: object
    properties:
      denoms:
        type: array
        items:
          type: string
      before_send_hook_addresses:
        type: array
        items:
          type: string
    description: >-
      QueryAllBeforeSendHooksAddressesResponse defines the response structure
      for

      the AllBeforeSendHooksAddresses gRPC query.
  osmosis.tokenfactory.v1beta1.QueryBeforeSendHookAddressResponse:
    type: object
    properties:
      cosmwasm_address:
        type: string
    description: |-
      QueryBeforeSendHookAddressResponse defines the response structure for the
      DenomBeforeSendHook gRPC query.
  osmosis.tokenfactory.v1beta1.QueryDenomAuthorityMetadataResponse:
    type: object
    properties:
      authority_metadata:
        type: object
        properties:
          admin:
            type: string
            title: Can be empty for no admin, or a valid osmosis address
        description: >-
          DenomAuthorityMetadata specifies metadata for addresses that have
          specific

          capabilities over a token factory denom. Right now there is only one
          Admin

          permission, but is planned to be extended to the future.
    description: |-
      QueryDenomAuthorityMetadataResponse defines the response structure for the
      DenomAuthorityMetadata gRPC query.
  osmosis.tokenfactory.v1beta1.QueryDenomsFromCreatorResponse:
    type: object
    properties:
      denoms:
        type: array
        items:
          type: string
    description: |-
      QueryDenomsFromCreatorRequest defines the response structure for the
      DenomsFromCreator gRPC query.
  osmosis.tokenfactory.v1beta1.QueryParamsResponse:
    type: object
    properties:
      params:
        description: params defines the parameters of the module.
        type: object
        properties:
          denom_creation_fee:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
            description: >-
              DenomCreationFee defines the fee to be charged on the creation of
              a new

              denom. The fee is drawn from the MsgCreateDenom's sender account,
              and

              transferred to the community pool.
          denom_creation_gas_consume:
            type: string
            format: uint64
            description: >-
              DenomCreationGasConsume defines the gas cost for creating a new
              denom.

              This is intended as a spam deterrence mechanism.


              See: https://github.com/CosmWasm/token-factory/issues/11
    description: QueryParamsResponse is the response type for the Query/Params RPC method.
  osmosis.txfees.v1beta1.FeeToken:
    type: object
    properties:
      denom:
        type: string
      poolID:
        type: string
        format: uint64
    description: |-
      FeeToken is a struct that specifies a coin denom, and pool ID pair.
      This marks the token as eligible for use as a tx fee asset in Osmosis.
      Its price in osmo is derived through looking at the provided pool ID.
      The pool ID must have osmo as one of its assets.
  osmosis.txfees.v1beta1.QueryBaseDenomResponse:
    type: object
    properties:
      base_denom:
        type: string
  osmosis.txfees.v1beta1.QueryDenomPoolIdResponse:
    type: object
    properties:
      poolID:
        type: string
        format: uint64
  osmosis.txfees.v1beta1.QueryDenomSpotPriceResponse:
    type: object
    properties:
      poolID:
        type: string
        format: uint64
      spot_price:
        type: string
    title: >-
      QueryDenomSpotPriceRequest defines grpc response structure for querying
      spot

      price for the specified tx fee denom
  osmosis.txfees.v1beta1.QueryEipBaseFeeResponse:
    type: object
    properties:
      base_fee:
        type: string
  osmosis.txfees.v1beta1.QueryFeeTokensResponse:
    type: object
    properties:
      fee_tokens:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            poolID:
              type: string
              format: uint64
          description: >-
            FeeToken is a struct that specifies a coin denom, and pool ID pair.

            This marks the token as eligible for use as a tx fee asset in
            Osmosis.

            Its price in osmo is derived through looking at the provided pool
            ID.

            The pool ID must have osmo as one of its assets.
