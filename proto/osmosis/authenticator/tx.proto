syntax = "proto3";
package osmosis.authenticator;

option go_package = "github.com/osmosis-labs/osmosis/v20/x/authenticator/types";

// Msg defines the Msg service.
service Msg {
  rpc AddAuthenticator(MsgAddAuthenticator)
      returns (MsgAddAuthenticatorResponse);
  rpc RemoveAuthenticator(MsgRemoveAuthenticator)
      returns (MsgRemoveAuthenticatorResponse);
  rpc CreateAccount(MsgCreateAccount) returns (MsgCreateAccountResponse);
}

// MsgAddAuthenticatorRequest defines the Msg/AddAuthenticator request type.
message MsgAddAuthenticator {
  string sender = 1;
  string type = 2;
  bytes data = 3;
}

// MsgAddAuthenticatorResponse defines the Msg/AddAuthenticator response type.
message MsgAddAuthenticatorResponse { bool success = 1; }

// MsgRemoveAuthenticatorRequest defines the Msg/RemoveAuthenticator request
// type.
message MsgRemoveAuthenticator {
  string sender = 1;
  uint64 id = 2;
}

// MsgRemoveAuthenticatorResponse defines the Msg/RemoveAuthenticator response
// type.
message MsgRemoveAuthenticatorResponse { bool success = 1; }

// TxExtension allows for additional authenticator-specific data in
// transactions.
message TxExtension {
  // selected_authenticators holds indices for the chosen authenticators per
  // message.
  repeated int32 selected_authenticators = 1;
}

// AuthenticatorData defines the data for instantiating an authenticator.
message AuthenticatorData {
  string type = 1;
  bytes data = 2;
}

// MsgCreateAccount defines the Msg/CreateAccount request type.
message MsgCreateAccount {
  string sender = 1;
  string salt = 2; // The salt may be empty but it's used to be able to create
                   // an account even if the authenticator data is not unique
  repeated AuthenticatorData authenticators = 3;
}

// MsgCreateAccountResponse defines the Msg/CreateAccount response type.
message MsgCreateAccountResponse { string address = 1; }
