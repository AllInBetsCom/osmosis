syntax = "proto3";
package osmosis.protorev.v1beta1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "osmosis/protorev/v1beta1/params.proto";
import "osmosis/protorev/v1beta1/protorev.proto";

import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/osmosis-labs/osmosis/v14/x/protorev/types";

// Query defines the gRPC querier service.
service Query {
  // Params queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/osmosis/v13/protorev/params";
  }

  // GetProtoRevNumberOfTrades queries the number of arbitrage trades the module
  // has executed
  rpc GetProtoRevNumberOfTrades(QueryGetProtoRevNumberOfTradesRequest)
      returns (QueryGetProtoRevNumberOfTradesResponse) {
    option (google.api.http).get = "/osmosis/v13/protorev/number_of_trades";
  }

  // GetProtoRevProfitsByDenom queries the profits of the module by denom
  rpc GetProtoRevProfitsByDenom(QueryGetProtoRevProfitsByDenomRequest)
      returns (QueryGetProtoRevProfitsByDenomResponse) {
    option (google.api.http).get = "/osmosis/v13/protorev/profits_by_denom";
  }

  // GetProtoRevAllProfits queries all of the profits from the module
  rpc GetProtoRevAllProfits(QueryGetProtoRevAllProfitsRequest)
      returns (QueryGetProtoRevAllProfitsResponse) {
    option (google.api.http).get = "/osmosis/v13/protorev/all_profits";
  }

  // GetProtoRevStatisticsByRoute queries the number of arbitrages and profits
  // that have been executed for a given route
  rpc GetProtoRevStatisticsByRoute(QueryGetProtoRevStatisticsByRouteRequest)
      returns (QueryGetProtoRevStatisticsByRouteResponse) {
    option (google.api.http).get = "/osmosis/v13/protorev/statistics_by_route";
  }

  // GetProtoRevAllRouteStatistics queries all of route that the module has
  // arbitrage against and the number of trades and profits that have been
  // executed for each route
  rpc GetProtoRevAllRouteStatistics(QueryGetProtoRevAllRouteStatisticsRequest)
      returns (QueryGetProtoRevAllRouteStatisticsResponse) {
    option (google.api.http).get = "/osmosis/v13/protorev/all_route_statistics";
  }

  // GetProtoRevTokenPairArbRoutes queries all of the hot routes that the module
  // is currently arbitraging
  rpc GetProtoRevTokenPairArbRoutes(QueryGetProtoRevTokenPairArbRoutesRequest)
      returns (QueryGetProtoRevTokenPairArbRoutesResponse) {
    option (google.api.http).get =
        "/osmosis/v13/protorev/token_pair_arb_routes";
  }

  // GetProtoRevMaxRoutesPerTx queries the maximum number of routes that can be
  // executed in a single transaction
  rpc GetProtoRevMaxRoutesPerTx(QueryGetProtoRevMaxRoutesPerTxRequest)
      returns (QueryGetProtoRevMaxRoutesPerTxResponse) {
    option (google.api.http).get = "/osmosis/v13/protorev/max_routes_per_tx";
  }

  // GetProtoRevMaxRoutesPerBlock queries the maximum number of routes that can
  // be executed in a single block
  rpc GetProtoRevMaxRoutesPerBlock(QueryGetProtoRevMaxRoutesPerBlockRequest)
      returns (QueryGetProtoRevMaxRoutesPerBlockResponse) {
    option (google.api.http).get = "/osmosis/v13/protorev/max_routes_per_block";
  }

  // GetProtoRevAdminAccount queries the admin account of the module
  rpc GetProtoRevAdminAccount(QueryGetProtoRevAdminAccountRequest)
      returns (QueryGetProtoRevAdminAccountResponse) {
    option (google.api.http).get = "/osmosis/v13/protorev/admin_account";
  }

  // GetProtoRevDeveloperAccount queries the developer account of the module
  rpc GetProtoRevDeveloperAccount(QueryGetProtoRevDeveloperAccountRequest)
      returns (QueryGetProtoRevDeveloperAccountResponse) {
    option (google.api.http).get = "/osmosis/v13/protorev/developer_account";
  }

  // GetProtoRevPoolWeights queries the weights of each pool type currently
  // being used by the module
  rpc GetProtoRevPoolWeights(QueryGetProtoRevPoolWeightsRequest)
      returns (QueryGetProtoRevPoolWeightsResponse) {
    option (google.api.http).get = "/osmosis/v13/protorev/pool_weights";
  }
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [ (gogoproto.nullable) = false ];
}

// QueryGetProtoRevNumberOfTradesRequest is request type for the
// Query/GetProtoRevNumberOfTrades RPC method.
message QueryGetProtoRevNumberOfTradesRequest {}

// QueryGetProtoRevNumberOfTradesResponse is response type for the
// Query/GetProtoRevNumberOfTrades RPC method.
message QueryGetProtoRevNumberOfTradesResponse {
  // number_of_trades is the number of trades the module has executed
  string number_of_trades = 1 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
}

// QueryGetProtoRevProfitsByDenomRequest is request type for the
// Query/GetProtoRevProfitsByDenom RPC method.
message QueryGetProtoRevProfitsByDenomRequest {
  // denom is the denom to query profits by
  string denom = 1;
}

// QueryGetProtoRevProfitsByDenomResponse is response type for the
// Query/GetProtoRevProfitsByDenom RPC method.
message QueryGetProtoRevProfitsByDenomResponse {
  // profit is the profits of the module by the selected denom
  cosmos.base.v1beta1.Coin profit = 1;
}

// QueryGetProtoRevAllProfitsRequest is request type for the
// Query/GetProtoRevAllProfits RPC method.
message QueryGetProtoRevAllProfitsRequest {}

// QueryGetProtoRevAllProfitsResponse is response type for the
// Query/GetProtoRevAllProfits RPC method.
message QueryGetProtoRevAllProfitsResponse {
  // profits is a list of all of the profits from the module
  repeated cosmos.base.v1beta1.Coin profits = 1;
}

// QueryGetProtoRevStatisticsByPoolRequest is request type for the
// Query/GetProtoRevStatisticsByRoute RPC method.
message QueryGetProtoRevStatisticsByRouteRequest {
  // route is the set of pool ids to query statistics by
  repeated uint64 route = 1;
}

// QueryGetProtoRevStatisticsByRouteResponse is response type for the
// Query/GetProtoRevStatisticsByRoute RPC method.
message QueryGetProtoRevStatisticsByRouteResponse {
  // statistics contains the number of trades the module has executed after a
  // swap on a given pool and the profits from the trades
  RouteStatistics statistics = 1;
}

// QueryGetProtoRevAllRouteStatisticsRequest is request type for the
// Query/GetProtoRevAllRouteStatistics RPC method.
message QueryGetProtoRevAllRouteStatisticsRequest {}

// QueryGetProtoRevAllRouteStatisticsResponse is response type for the
// Query/GetProtoRevAllRouteStatistics RPC method.
message QueryGetProtoRevAllRouteStatisticsResponse {
  // statistics contains the number of trades the module has executed on a
  // a given route and the profits from the trades
  repeated RouteStatistics statistics = 1 [ (gogoproto.nullable) = false ];
}

// QueryGetProtoRevTokenPairArbRoutesRequest is request type for the
// Query/GetProtoRevTokenPairArbRoutes RPC method.
message QueryGetProtoRevTokenPairArbRoutesRequest {}

// QueryGetProtoRevTokenPairArbRoutesResponse is response type for the
// Query/GetProtoRevTokenPairArbRoutes RPC method.
message QueryGetProtoRevTokenPairArbRoutesResponse {
  // routes is a list of all of the hot routes that the module is currently
  // arbitraging
  repeated TokenPairArbRoutes routes = 1;
}

// QueryGetProtoRevMaxRoutesPerTxRequest is request type for the
// Query/GetProtoRevMaxRoutesPerTx RPC method.
message QueryGetProtoRevMaxRoutesPerTxRequest {}

// QueryGetProtoRevMaxRoutesPerTxResponse is response type for the
// Query/GetProtoRevMaxRoutesPerTx RPC method.
message QueryGetProtoRevMaxRoutesPerTxResponse {
  // max_routes_per_tx is the maximum number of routes that can be executed in a
  // single transaction
  uint64 max_routes_per_tx = 1;
}

// QueryGetProtoRevMaxRoutesPerBlockRequest is request type for the
// Query/GetProtoRevMaxRoutesPerBlock RPC method.
message QueryGetProtoRevMaxRoutesPerBlockRequest {}

// QueryGetProtoRevMaxRoutesPerBlockResponse is response type for the
// Query/GetProtoRevMaxRoutesPerBlock RPC method.
message QueryGetProtoRevMaxRoutesPerBlockResponse {
  // max_routes_per_block is the maximum number of routes that can be executed
  // in a single block
  uint64 max_routes_per_block = 1;
}

// QueryGetProtoRevAdminAccountRequest is request type for the
// Query/GetProtoRevAdminAccount RPC method.
message QueryGetProtoRevAdminAccountRequest {}

// QueryGetProtoRevAdminAccountResponse is response type for the
// Query/GetProtoRevAdminAccount RPC method.
message QueryGetProtoRevAdminAccountResponse {
  // admin_account is the admin account of the module
  string admin_account = 1;
}

// QueryGetProtoRevDeveloperAccountRequest is request type for the
// Query/GetProtoRevDeveloperAccount RPC method.
message QueryGetProtoRevDeveloperAccountRequest {}

// QueryGetProtoRevDeveloperAccountResponse is response type for the
// Query/GetProtoRevDeveloperAccount RPC method.
message QueryGetProtoRevDeveloperAccountResponse {
  // developer_account is the developer account of the module
  string developer_account = 1;
}

// QueryGetProtoRevPoolWeightsRequest is request type for the
// Query/GetProtoRevPoolWeights RPC method.
message QueryGetProtoRevPoolWeightsRequest {}

// QueryGetProtoRevPoolWeightsResponse is response type for the
// Query/GetProtoRevPoolWeights RPC method.
message QueryGetProtoRevPoolWeightsResponse {
  // pool_weights is a list of all of the pool weights
  PoolWeights pool_weights = 1;
}