syntax = "proto3";
package osmosis.poolmanager.v1beta1;

import "gogoproto/gogo.proto";

option go_package = "github.com/osmosis-labs/osmosis/v20/x/poolmanager/types";

message SwapAmountInRoute {
  uint64 pool_id = 1 [ (gogoproto.moretags) = "yaml:\"pool_id\"" ];
  string token_out_denom = 2
      [ (gogoproto.moretags) = "yaml:\"token_out_denom\"" ];
}

message SwapAmountOutRoute {
  uint64 pool_id = 1 [ (gogoproto.moretags) = "yaml:\"pool_id\"" ];
  string token_in_denom = 2
      [ (gogoproto.moretags) = "yaml:\"token_in_denom\"" ];
}

message SwapAmountInSplitRoute {
  repeated SwapAmountInRoute pools = 1
      [ (gogoproto.moretags) = "yaml:\"pools\"", (gogoproto.nullable) = false ];
  string token_in_amount = 2 [

    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.moretags) = "yaml:\"token_in_amount\"",
    (gogoproto.nullable) = false
  ];
}

message SwapAmountOutSplitRoute {
  repeated SwapAmountOutRoute pools = 1
      [ (gogoproto.moretags) = "yaml:\"pools\"", (gogoproto.nullable) = false ];
  string token_out_amount = 2 [

    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.moretags) = "yaml:\"token_out_amount\"",
    (gogoproto.nullable) = false
  ];
}

// The following are used in creating a stateful routing graph.

message Route {
  uint64 pool_id = 1;
  string token = 2;
}

message Routes { repeated Route routes = 1; }

// The following are used to make printing parts of the structure as strings and
// not as memory addresses. This is important in creating keys that are used to
// determine best routes. This should NOT be used in anything stateful.
message InnerMap { map<string, Routes> inner_map = 1; }

message RoutingGraphMap { map<string, InnerMap> graph = 1; }

// The following are used to serialize and deserialize the routing graph into
// KVStore. If this is not used, the store will not be deterministic.
message InnerMapEntry {
  string key = 1;
  Routes value = 2;
}

message Inner { repeated InnerMapEntry entries = 1; }

message RoutingGraphEntry {
  string key = 1;
  Inner value = 2;
}

message RoutingGraph { repeated RoutingGraphEntry entries = 1; }